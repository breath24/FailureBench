task_id,failure_analysis,category
HumanEval/132,"This task is about checking whether a string of square brackets contains a valid subsequence where at least one pair of brackets is nested inside another. All models failed in solving this task correctly, where they consistently produced the same flawed stack-based solution that used early return detection logic. The pattern was always: push opening brackets onto a stack, pop when encountering closing brackets, and return True immediately upon finding any bracket still in the stack after a pop operation (indicating some level of nesting). This approach failed because it detected the first instance of nesting rather than counting sufficient instances as required by the canonical algorithm. We tried multiple attempts to guide models by modifying the HumanEval/132 prompt: changing the function name from is_nested to is_valid, adding clarifications about ignoring unmatched brackets, providing precise definitions of “nested” as brackets positioned before their matching pairs, and completely removing the word “nested” in favor of neutral positional language. Despite all these changes, models generated the same solution. Successful Paradigm Shift and Final Solution: The breakthrough came when we completely modified the prompt, and reframed the problem using counting-focused language: “return True if and only if you can find at least 2 properly matched bracket pairs from the string, where at least one pair is inside another pair” and “Think of it as: count how many complete bracket pairs you can form, and return True if you can form 2 or more pairs where one is contained within another.” This paradigm shift guided Claude away from detection logic toward a fundamentally different algorithm that first collects all valid bracket pairs by storing their start and end positions, checks if at least 2 pairs exist, and then examines all pair combinations to determine if any pair is contained within another using proper containment logic (start1 < start2 and end2 < end1). This counting-based approach successfully passed all test cases because it performed complete analysis rather than early termination upon first detection.",Wrong Problem Mapping
