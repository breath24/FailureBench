{
  "task_id": "3762",
  "llm_response": "def maxScore(points, m):\n    n = len(points)\n    \n    def canAchieve(target):\n        dp = {}\n        \n        def solve(pos, moves, scores):\n            if moves == 0:\n                return min(scores) >= target\n            \n            key = (pos, moves, tuple(scores))\n            if key in dp:\n                return dp[key]\n            \n            result = False\n            \n            if pos > 0:\n                new_scores = scores[:]\n                new_scores[pos-1] += points[pos-1]\n                if solve(pos-1, moves-1, new_scores):\n                    result = True\n            \n            if pos < n-1:\n                new_scores = scores[:]\n                new_scores[pos+1] += points[pos+1]\n                if solve(pos+1, moves-1, new_scores):\n                    result = True\n            \n            dp[key] = result\n            return result\n        \n        return solve(-1, m, [0] * n)\n    \n    left, right = 0, sum(points)\n    answer = 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if canAchieve(mid):\n            answer = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return answer",
  "model": "claude-sonnet-4",
  "task_description": "You are given an array points of size n and an integer m. There is another array gameScore of size n, where gameScore[i] represents the score achieved at the i^th game. Initially, gameScore[i] == 0 for all i.\nYou start at index -1, which is outside the array (before the first position at index 0). You can make at most m moves. In each move, you can either:\n\nIncrease the index by 1 and add points[i] to gameScore[i].\nDecrease the index by 1 and add points[i] to gameScore[i].\n\nNote that the index must always remain within the bounds of the array after the first move.\nReturn the maximum possible minimum value in gameScore after at most m moves.\n \nExample 1:\n\nInput: points = [2,4], m = 3\nOutput: 4\nExplanation:\nInitially, index i = -1 and gameScore = [0, 0].\n\n\n\nMove\nIndex\ngameScore\n\n\n\n\nIncrease i\n0\n[2, 0]\n\n\nIncrease i\n1\n[2, 4]\n\n\nDecrease i\n0\n[4, 4]\n\n\n\nThe minimum value in gameScore is 4, and this is the maximum possible minimum among all configurations. Hence, 4 is the output.\n\nExample 2:\n\nInput: points = [1,2,3], m = 5\nOutput: 2\nExplanation:\nInitially, index i = -1 and gameScore = [0, 0, 0].\n\n\n\nMove\nIndex\ngameScore\n\n\n\n\nIncrease i\n0\n[1, 0, 0]\n\n\nIncrease i\n1\n[1, 2, 0]\n\n\nDecrease i\n0\n[2, 2, 0]\n\n\nIncrease i\n1\n[2, 4, 0]\n\n\nIncrease i\n2\n[2, 4, 3]\n\n\n\nThe minimum value in gameScore is 2, and this is the maximum possible minimum among all configurations. Hence, 2 is the output.\n\n \nConstraints:\n\n2 <= n == points.length <= 5 * 10^4\n1 <= points[i] <= 10^6\n1 <= m <= 10^9"
}