{
  "task_id": "abc397_g",
  "llm_response": "from itertools import combinations\nfrom collections import deque\n\ndef candidate_func(input_str):\n    lines = input_str.strip().split('\\n')\n    n, m, k = map(int, lines[0].split())\n    \n    edges = []\n    for i in range(1, m + 1):\n        u, v = map(int, lines[i].split())\n        edges.append((u, v))\n    \n    def bfs(graph):\n        queue = deque([(1, 0)])\n        visited = set([1])\n        \n        while queue:\n            node, dist = queue.popleft()\n            if node == n:\n                return dist\n            \n            for neighbor, weight in graph[node]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, dist + weight))\n        \n        return float('inf')\n    \n    max_dist = 0\n    \n    for chosen_edges in combinations(range(m), k):\n        graph = [[] for _ in range(n + 1)]\n        \n        for i, (u, v) in enumerate(edges):\n            weight = 1 if i in chosen_edges else 0\n            graph[u].append((v, weight))\n        \n        dist = bfs(graph)\n        max_dist = max(max_dist, dist)\n    \n    return str(max_dist)",
  "model": "claude-sonnet-4",
  "task_description": "You are given a directed graph with N vertices and M edges. The vertices are numbered 1,2,\\dots,N. Edge j (j=1,2,\\dots,M) goes from vertex u_j to vertex v_j. It is guaranteed that vertex N is reachable from vertex 1.\nInitially, all edges have weight 0. We choose exactly K out of the M edges and change their weights to 1. Find the maximum possible value of the shortest distance from vertex 1 to vertex N in the resulting graph.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M K\r\nu_1 v_1\r\nu_2 v_2\r\n\\vdots\r\nu_M v_M\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 30\n- 1 \\leq K \\leq M \\leq 100\n- 1 \\leq u_j, v_j \\leq N\n- u_j \\neq v_j\n- In the given graph, vertex N is reachable from vertex 1.\n- All input values are integers.\n\nSample Input 1\n\n3 3 2\r\n1 2\r\n2 3\r\n1 3\n\nSample Output 1\n\n1\r\n\nBy choosing edges 1,3, the shortest distance from vertex 1 to vertex 3 becomes 1. There is no way to make the shortest distance 2 or greater, so the answer is 1.\n\nSample Input 2\n\n4 4 3\r\n1 2\r\n1 3\r\n3 2\r\n2 4\n\nSample Output 2\n\n2\r\n\nBy choosing edges 1,2,4, the shortest distance from vertex 1 to vertex 4 becomes 2. There is no way to make the shortest distance 3 or greater, so the answer is 2.\n\nSample Input 3\n\n2 2 1\r\n1 2\r\n1 2\n\nSample Output 3\n\n0\r\n\nNote that there may be multi-edges."
}