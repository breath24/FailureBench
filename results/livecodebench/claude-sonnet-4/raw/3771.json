{
  "task_id": "3771",
  "llm_response": "def maxSubstringLength(s, k):\n    n = len(s)\n    if k == 0:\n        return True\n    \n    char_positions = {}\n    for i, char in enumerate(s):\n        if char not in char_positions:\n            char_positions[char] = []\n        char_positions[char].append(i)\n    \n    special_substrings = []\n    \n    for start in range(n):\n        chars_in_substring = set()\n        valid = True\n        \n        for end in range(start, n):\n            if end - start + 1 == n:\n                break\n            \n            char = s[end]\n            chars_in_substring.add(char)\n            \n            valid = True\n            for c in chars_in_substring:\n                for pos in char_positions[c]:\n                    if pos < start or pos > end:\n                        valid = False\n                        break\n                if not valid:\n                    break\n            \n            if valid:\n                special_substrings.append((start, end))\n    \n    special_substrings.sort(key=lambda x: x[1] - x[0])\n    \n    selected = []\n    for start, end in special_substrings:\n        can_select = True\n        for sel_start, sel_end in selected:\n            if not (end < sel_start or start > sel_end):\n                can_select = False\n                break\n        \n        if can_select:\n            selected.append((start, end))\n            if len(selected) == k:\n                return True\n    \n    return len(selected) >= k",
  "model": "claude-sonnet-4",
  "task_description": "Given a string s of length n and an integer k, determine whether it is possible to select k disjoint special substrings.\nA special substring is a substring where:\n\nAny character present inside the substring should not appear outside it in the string.\nThe substring is not the entire string s.\n\nNote that all k substrings must be disjoint, meaning they cannot overlap.\nReturn true if it is possible to select k such disjoint special substrings; otherwise, return false.\n \nExample 1:\n\nInput: s = \"abcdbaefab\", k = 2\nOutput: true\nExplanation:\n\nWe can select two disjoint special substrings: \"cd\" and \"ef\".\n\"cd\" contains the characters 'c' and 'd', which do not appear elsewhere in s.\n\"ef\" contains the characters 'e' and 'f', which do not appear elsewhere in s.\n\n\nExample 2:\n\nInput: s = \"cdefdc\", k = 3\nOutput: false\nExplanation:\nThere can be at most 2 disjoint special substrings: \"e\" and \"f\". Since k = 3, the output is false.\n\nExample 3:\n\nInput: s = \"abeabe\", k = 0\nOutput: true\n\n \nConstraints:\n\n2 <= n == s.length <= 5 * 10^4\n0 <= k <= 26\ns consists only of lowercase English letters."
}