{
  "task_id": "abc400_g",
  "llm_response": "from itertools import combinations\n\ndef candidate_func(input_str):\n    lines = input_str.strip().split('\\n')\n    t = int(lines[0])\n    results = []\n    line_idx = 1\n    \n    for _ in range(t):\n        n, k = map(int, lines[line_idx].split())\n        line_idx += 1\n        \n        cakes = []\n        for i in range(n):\n            x, y, z = map(int, lines[line_idx].split())\n            cakes.append((x, y, z))\n            line_idx += 1\n        \n        def get_pair_price(i, j):\n            return max(cakes[i][0] + cakes[j][0], \n                      cakes[i][1] + cakes[j][1], \n                      cakes[i][2] + cakes[j][2])\n        \n        def solve(remaining_cakes, pairs_left):\n            if pairs_left == 0:\n                return 0\n            if len(remaining_cakes) < 2 * pairs_left:\n                return float('-inf')\n            \n            max_price = 0\n            for i in range(len(remaining_cakes)):\n                for j in range(i + 1, len(remaining_cakes)):\n                    cake_i = remaining_cakes[i]\n                    cake_j = remaining_cakes[j]\n                    pair_price = get_pair_price(cake_i, cake_j)\n                    \n                    new_remaining = [remaining_cakes[idx] for idx in range(len(remaining_cakes)) \n                                   if idx != i and idx != j]\n                    \n                    total_price = pair_price + solve(new_remaining, pairs_left - 1)\n                    max_price = max(max_price, total_price)\n            \n            return max_price\n        \n        result = solve(list(range(n)), k)\n        results.append(str(result))\n    \n    return '\\n'.join(results)",
  "model": "claude-sonnet-4",
  "task_description": "Takahashi, a patissier working at the ABC pastry shop, decided to sell assorted cakes to commemorate AtCoder Beginner Contest 400.\nThe shop sells N kinds of cakes: cake 1, cake 2, \\ldots, cake N.\r\nEach cake has three non-negative integer values: beauty, tastiness, and popularity. Specifically, cake i has beauty X_i, tastiness Y_i, and popularity Z_i.\nHe considers pairing up these cakes into K pairs without overlaps.\r\nFormally, he will choose 2K distinct integers a_1,b_1,a_2,b_2,\\ldots,a_K,b_K between 1 and N (inclusive), and pair cake a_i with cake b_i.\r\nThe price of a pair formed by cakes a_i and b_i is \\max(X_{a_i} + X_{b_i},\\, Y_{a_i} + Y_{b_i},\\, Z_{a_i} + Z_{b_i}).\r\nHere, \\max(P,Q,R) denotes the greatest value among P,Q,R.\nFind the maximum possible total price of the K pairs.\nYou are given T test cases; solve each of them.\n\nInput\n\nThe input is given from Standard Input in the following format:\nT\r\n\\mathrm{case}_1\r\n\\mathrm{case}_2\r\n\\vdots\r\n\\mathrm{case}_T\r\n\n\\mathrm{case}_i represents the i-th test case. Each test case is given in the following format:\nN K\r\nX_1 Y_1 Z_1\r\nX_2 Y_2 Z_2\r\n\\vdots\r\nX_N Y_N Z_N\n\nOutput\n\nPrint T lines. The i-th line (1\\leq i\\leq T) should contain the answer to the i-th test case.\n\nConstraints\n\n\n- 1\\leq T\\leq 1000\n- 2\\leq N \\leq 10^5\n- The sum of N over all test cases in each input file is at most 10^5.\n- 1\\leq K \\leq \\lfloor \\frac{N}{2}\\rfloor (For a real number x, \\lfloor x\\rfloor denotes the greatest integer not exceeding x.)\n- 0\\leq X_i,Y_i,Z_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n1\r\n3 1\r\n6 3 8\r\n3 5 0\r\n2 7 3\n\nSample Output 1\n\n12\r\n\nWe form one pair out of three cakes.\nIf we pair cake 1 with cake 2, the price is \\max(6+3,\\,3+5,\\,8+0) = 9.\r\nIf we pair cake 1 with cake 3, the price is \\max(6+2,\\,3+7,\\,8+3) = 11.\r\nIf we pair cake 2 with cake 3, the price is \\max(3+2,\\,5+7,\\,0+3) = 12.\nHence, pairing cake 2 with cake 3 gives the highest price, which is 12.\n\nSample Input 2\n\n2\r\n5 2\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n100 100 200\r\n6 2\r\n21 74 25\r\n44 71 80\r\n46 28 96\r\n1 74 24\r\n81 83 16\r\n55 31 1\n\nSample Output 2\n\n209\r\n333\r\n\nNote that each cake can appear in at most one pair.\r\nAlso note that there can be different cakes with identical values of beauty, tastiness, and popularity.\nFor the first test case, pairing cake 1 with cake 2 gives a price of 6, pairing cake 3 with cake 5 gives a price of 203, and choosing these two pairs yields a total price of 209, which is the maximum.  \nFor the second test case, pairing cake 2 with cake 3 gives a price of 176, pairing cake 4 with cake 5 gives a price of 157, and choosing these two pairs yields a total price of 333, which is the maximum."
}