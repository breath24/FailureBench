{
  "task_id": "arc190_d",
  "llm_response": "import sys\n\ndef candidate_func(input_str):\n    lines = input_str.strip().split('\\n')\n    N, p = map(int, lines[0].split())\n    A = []\n    for i in range(1, N+1):\n        row = list(map(int, lines[i].split()))\n        A.append(row)\n    \n    zeros = []\n    for i in range(N):\n        for j in range(N):\n            if A[i][j] == 0:\n                zeros.append((i, j))\n    \n    K = len(zeros)\n    \n    result = [[0] * N for _ in range(N)]\n    \n    if K == 0:\n        B = [row[:] for row in A]\n        B_p = matrix_power(B, p, p)\n        for i in range(N):\n            for j in range(N):\n                result[i][j] = B_p[i][j]\n    else:\n        total_combinations = pow(p-1, K, p)\n        for i in range(N):\n            for j in range(N):\n                if A[i][j] != 0:\n                    coeff = total_combinations\n                    result[i][j] = (A[i][j] * coeff) % p\n                else:\n                    idx = zeros.index((i, j))\n                    coeff = 0\n                    for val in range(1, p):\n                        B = [row[:] for row in A]\n                        B[i][j] = val\n                        B_p = matrix_power(B, p, p)\n                        for x in range(N):\n                            for y in range(N):\n                                result[x][y] = (result[x][y] + B_p[x][y]) % p\n    \n    output_lines = []\n    for i in range(N):\n        output_lines.append(' '.join(map(str, result[i])))\n    return '\\n'.join(output_lines)\n\ndef matrix_power(matrix, n, mod):\n    size = len(matrix)\n    result = [[0] * size for _ in range(size)]\n    for i in range(size):\n        result[i][i] = 1\n    \n    base = [row[:] for row in matrix]\n    \n    while n > 0:\n        if n % 2 == 1:\n            result = matrix_multiply(result, base, mod)\n        base = matrix_multiply(base, base, mod)\n        n //= 2\n    return result\n\ndef matrix_multiply(A, B, mod):\n    size = len(A)\n    C = [[0] * size for _ in range(size)]\n    for i in range(size):\n        for j in range(size):\n            for k in range(size):\n                C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % mod\n    return C",
  "model": "qwen3-coder",
  "task_description": "You are given a prime number p and an N \\times N matrix A = (A_{i,j}) (1\\leq i,j\\leq N). Each element of A is an integer between 0 and p-1, inclusive.\nConsider a matrix B obtained by replacing each zero in A with an integer between 1 and p-1, inclusive. There are (p-1)^K such matrices B, where K is the number of zeros in A.\nFind each element, modulo p, of the sum of B^p over all possible B.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN p\nA_{1,1} \\cdots A_{1,N}\n\\vdots\nA_{N,1} \\cdots A_{N,N}\n\nOutput\n\nPrint N lines.\nThe i-th line should contain, in the order j=1,\\ldots,N, the (i,j) element of the sum, modulo p, of B^p over all possible B, separated by spaces.\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- p is a prime such that 1 \\leq p \\leq 10^9.\n- 0 \\leq A_{i,j} \\leq p-1\n- All input values are integers.\n\nSample Input 1\n\n2 3\n0 1\n0 2\n\nSample Output 1\n\n0 2\n1 2\n\nB^p for all possible B are as follows:\n\n- \\begin{pmatrix}1&1 \\\\ 1&2\\end{pmatrix}^3=\\begin{pmatrix}5&8 \\\\ 8&13\\end{pmatrix}\n- \\begin{pmatrix}1&1 \\\\ 2&2\\end{pmatrix}^3=\\begin{pmatrix}9&9 \\\\ 18&18\\end{pmatrix}\n- \\begin{pmatrix}2&1 \\\\ 1&2\\end{pmatrix}^3=\\begin{pmatrix}14&13 \\\\ 13&14\\end{pmatrix}\n- \\begin{pmatrix}2&1 \\\\ 2&2\\end{pmatrix}^3=\\begin{pmatrix}20&14 \\\\ 28&20\\end{pmatrix}\n\nPrint each element, modulo p=3, of their sum \\begin{pmatrix}48&44 \\\\ 67&65\\end{pmatrix}.\n\nSample Input 2\n\n3 2\n1 0 0\n0 1 0\n0 0 1\n\nSample Output 2\n\n1 1 1\n1 1 1\n1 1 1\n\nB^p for all possible B are as follows:\n\n- \\begin{pmatrix}1&1&1 \\\\ 1&1&1 \\\\ 1&1&1\\end{pmatrix}^2=\\begin{pmatrix}3&3&3\\\\3&3&3\\\\3&3&3\\end{pmatrix}\n\nPrint each element, modulo p=2, of their sum \\begin{pmatrix}3&3&3\\\\3&3&3\\\\3&3&3\\end{pmatrix}.\n\nSample Input 3\n\n4 13\n0 1 2 0\n3 4 0 5\n0 6 0 7\n8 9 0 0\n\nSample Output 3\n\n8 0 6 5\n11 1 8 5\n8 0 4 12\n8 0 1 9"
}