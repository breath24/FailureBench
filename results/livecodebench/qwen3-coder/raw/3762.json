{
  "task_id": "3762",
  "llm_response": "def maxScore(points, m):\n    n = len(points)\n    left = 0\n    right = 10**15\n    res = 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if canAchieveMin(points, m, mid):\n            res = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return res\n\ndef canAchieveMin(points, m, minVal):\n    n = len(points)\n    required = [0] * n\n    \n    for i in range(n):\n        if points[i] > 0:\n            required[i] = (minVal + points[i] - 1) // points[i]\n        else:\n            if minVal > 0:\n                return False\n            required[i] = 0\n    \n    if minVal == 0:\n        return True\n        \n    total_moves = 0\n    pos = -1\n    \n    for i in range(n):\n        if required[i] > 0:\n            moves_to_reach = i - pos\n            total_moves += moves_to_reach + required[i]\n            pos = i\n            if total_moves > m:\n                return False\n    \n    return total_moves <= m",
  "model": "qwen3-coder",
  "task_description": "You are given an array points of size n and an integer m. There is another array gameScore of size n, where gameScore[i] represents the score achieved at the i^th game. Initially, gameScore[i] == 0 for all i.\nYou start at index -1, which is outside the array (before the first position at index 0). You can make at most m moves. In each move, you can either:\n\nIncrease the index by 1 and add points[i] to gameScore[i].\nDecrease the index by 1 and add points[i] to gameScore[i].\n\nNote that the index must always remain within the bounds of the array after the first move.\nReturn the maximum possible minimum value in gameScore after at most m moves.\n \nExample 1:\n\nInput: points = [2,4], m = 3\nOutput: 4\nExplanation:\nInitially, index i = -1 and gameScore = [0, 0].\n\n\n\nMove\nIndex\ngameScore\n\n\n\n\nIncrease i\n0\n[2, 0]\n\n\nIncrease i\n1\n[2, 4]\n\n\nDecrease i\n0\n[4, 4]\n\n\n\nThe minimum value in gameScore is 4, and this is the maximum possible minimum among all configurations. Hence, 4 is the output.\n\nExample 2:\n\nInput: points = [1,2,3], m = 5\nOutput: 2\nExplanation:\nInitially, index i = -1 and gameScore = [0, 0, 0].\n\n\n\nMove\nIndex\ngameScore\n\n\n\n\nIncrease i\n0\n[1, 0, 0]\n\n\nIncrease i\n1\n[1, 2, 0]\n\n\nDecrease i\n0\n[2, 2, 0]\n\n\nIncrease i\n1\n[2, 4, 0]\n\n\nIncrease i\n2\n[2, 4, 3]\n\n\n\nThe minimum value in gameScore is 2, and this is the maximum possible minimum among all configurations. Hence, 2 is the output.\n\n \nConstraints:\n\n2 <= n == points.length <= 5 * 10^4\n1 <= points[i] <= 10^6\n1 <= m <= 10^9"
}