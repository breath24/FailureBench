{
  "task_id": "3739",
  "llm_response": "from math import comb\n\ndef distanceSum(m, n, k):\n    MOD = 10**9 + 7\n    def sum_of_distances(x, y):\n        return (x * (x - 1) // 2) * y + (y * (y - 1) // 2) * x\n\n    total_cells = m * n\n    total_distance = 0\n\n    for x in range(m):\n        for y in range(n):\n            total_distance += sum_of_distances(x, y) * (m - x) * (n - y)\n            total_distance %= MOD\n\n    total_distance *= comb(total_cells - 2, k - 2)\n    total_distance %= MOD\n\n    return total_distance",
  "model": "gpt-4o",
  "task_description": "You are given three integers m, n, and k.\nThere is a rectangular grid of size m \u00d7 n containing k identical pieces. Return the sum of Manhattan distances between every pair of pieces over all valid arrangements of pieces.\nA valid arrangement is a placement of all k pieces on the grid with at most one piece per cell.\nSince the answer may be very large, return it modulo 10^9 + 7.\nThe Manhattan Distance between two cells (x_i, y_i) and (x_j, y_j) is |x_i - x_j| + |y_i - y_j|.\n \nExample 1:\n\nInput: m = 2, n = 2, k = 2\nOutput: 8\nExplanation:\nThe valid arrangements of pieces on the board are:\n\n\nIn the first 4 arrangements, the Manhattan distance between the two pieces is 1.\nIn the last 2 arrangements, the Manhattan distance between the two pieces is 2.\n\nThus, the total Manhattan distance across all valid arrangements is 1 + 1 + 1 + 1 + 2 + 2 = 8.\n\nExample 2:\n\nInput: m = 1, n = 4, k = 3\nOutput: 20\nExplanation:\nThe valid arrangements of pieces on the board are:\n\n\nThe first and last arrangements have a total Manhattan distance of 1 + 1 + 2 = 4.\nThe middle two arrangements have a total Manhattan distance of 1 + 2 + 3 = 6.\n\nThe total Manhattan distance between all pairs of pieces across all arrangements is 4 + 6 + 6 + 4 = 20.\n\n \nConstraints:\n\n1 <= m, n <= 10^5\n2 <= m * n <= 10^5\n2 <= k <= m * n"
}