{
  "task_id": "3748",
  "llm_response": "def sortMatrix(grid):\n    n = len(grid)\n    if n == 1:\n        return grid\n\n    # Collect all elements in the bottom-left triangle (including middle diagonal)\n    bottom_left = []\n    for i in range(n):\n        for j in range(i + 1):\n            bottom_left.append(grid[i][j])\n\n    # Sort in non-increasing order\n    bottom_left.sort(reverse=True)\n\n    # Place the sorted elements back into the bottom-left triangle\n    idx = 0\n    for i in range(n):\n        for j in range(i + 1):\n            grid[i][j] = bottom_left[idx]\n            idx += 1\n\n    # Collect all elements in the top-right triangle\n    top_right = []\n    for i in range(n):\n        for j in range(i, n):\n            top_right.append(grid[i][j])\n\n    # Sort in non-decreasing order\n    top_right.sort()\n\n    # Place the sorted elements back into the top-right triangle\n    idx = 0\n    for i in range(n):\n        for j in range(i, n):\n            grid[i][j] = top_right[idx]\n            idx += 1\n\n    return grid",
  "model": "mistral-3.2-24b",
  "task_description": "You are given an n x n square matrix of integers grid. Return the matrix such that:\n\nThe diagonals in the bottom-left triangle (including the middle diagonal) are sorted in non-increasing order.\nThe diagonals in the top-right triangle are sorted in non-decreasing order.\n\n \nExample 1:\n\nInput: grid = [[1,7,3],[9,8,2],[4,5,6]]\nOutput: [[8,2,3],[9,6,7],[4,5,1]]\nExplanation:\n\nThe diagonals with a black arrow (bottom-left triangle) should be sorted in non-increasing order:\n\n[1, 8, 6] becomes [8, 6, 1].\n[9, 5] and [4] remain unchanged.\n\nThe diagonals with a blue arrow (top-right triangle) should be sorted in non-decreasing order:\n\n[7, 2] becomes [2, 7].\n[3] remains unchanged.\n\n\nExample 2:\n\nInput: grid = [[0,1],[1,2]]\nOutput: [[2,1],[1,0]]\nExplanation:\n\nThe diagonals with a black arrow must be non-increasing, so [0, 2] is changed to [2, 0]. The other diagonals are already in the correct order.\n\nExample 3:\n\nInput: grid = [[1]]\nOutput: [[1]]\nExplanation:\nDiagonals with exactly one element are already in order, so no changes are needed.\n\n \nConstraints:\n\ngrid.length == grid[i].length == n\n1 <= n <= 10\n-10^5 <= grid[i][j] <= 10^5"
}