{
  "task_id": "abc397_e",
  "llm_response": "import sys\nfrom collections import deque\n\ndef candidate_func(input_str):\n    lines = input_str.split('\\n')\n    first_line = lines[0].split()\n    N = int(first_line[0])\n    K = int(first_line[1])\n    edges = [[] for _ in range(N * K + 1)]\n    for line in lines[1:]:\n        if not line.strip():\n            continue\n        u, v = map(int, line.split())\n        edges[u].append(v)\n        edges[v].append(u)\n    \n    if K == 1:\n        return \"Yes\"\n    \n    degree = [0] * (N * K + 1)\n    for u in range(1, N * K + 1):\n        degree[u] = len(edges[u])\n    \n    q = deque()\n    for u in range(1, N * K + 1):\n        if degree[u] == 1:\n            q.append(u)\n    \n    res = []\n    marked = [False] * (N * K + 1)\n    \n    while q:\n        u = q.popleft()\n        if marked[u]:\n            continue\n        path = []\n        current = u\n        prev = -1\n        found = False\n        for _ in range(K):\n            if marked[current]:\n                found = True\n                break\n            path.append(current)\n            marked[current] = True\n            next_node = -1\n            for neighbor in edges[current]:\n                if not marked[neighbor] and neighbor != prev:\n                    next_node = neighbor\n                    break\n            if next_node == -1:\n                break\n            prev = current\n            current = next_node\n        if found or len(path) != K:\n            return \"No\"\n        res.append(path)\n        for node in path:\n            for neighbor in edges[node]:\n                if not marked[neighbor]:\n                    degree[neighbor] -= 1\n                    if degree[neighbor] == 1:\n                        q.append(neighbor)\n    \n    if len(res) == N:\n        return \"Yes\"\n    else:\n        return \"No\"",
  "model": "deepseek-chat-v3-0324",
  "task_description": "You are given a tree with NK vertices. The vertices are numbered 1,2,\\dots,NK, and the i-th edge (i=1,2,\\dots,NK-1) connects vertices u_i and v_i bidirectionally.\nDetermine whether this tree can be decomposed into N paths, each of length K. More precisely, determine whether there exists an N \\times K matrix P satisfying the following:\n\n- P_{1,1}, \\dots, P_{1,K}, P_{2,1}, \\dots, P_{N,K} is a permutation of 1,2,\\dots,NK.\n- For each i=1,2,\\dots,N and j=1,2,\\dots,K-1, there is an edge connecting vertices P_{i,j} and P_{i,j+1}.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN K\r\nu_1 v_1\r\nu_2 v_2\r\n\\vdots\r\nu_{NK-1} v_{NK-1}\n\nOutput\n\nIf it is possible to decompose the tree into N paths each of length K, print Yes. Otherwise, print No.\n\nConstraints\n\n\n- 1 \\leq N\n- 1 \\leq K\n- NK \\leq 2 \\times 10^5\n- 1 \\leq u_i < v_i \\leq NK\n- The given graph is a tree.\n- All input values are integers.\n\nSample Input 1\n\n3 2\r\n1 2\r\n2 3\r\n3 4\r\n2 5\r\n5 6\n\nSample Output 1\n\nYes\r\n\nIt can be decomposed into a path with vertices 1,2, a path with vertices 3,4, and a path with vertices 5,6.\n\nSample Input 2\n\n3 2\r\n1 2\r\n2 3\r\n3 4\r\n2 5\r\n3 6\n\nSample Output 2\n\nNo"
}