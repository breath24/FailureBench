{
  "task_id": "abc391_g",
  "llm_response": "import sys\nMOD = 998244353\n\ndef candidate_func(input_str):\n    lines = input_str.split('\\n')\n    N, M = map(int, lines[0].split())\n    S = lines[1].strip()\n    \n    dp = [[[0] * (N + 2) for _ in range(N + 2)] for __ in range(M + 2)]\n    dp[0][0][0] = 1\n    \n    for i in range(M):\n        for j in range(N + 1):\n            for k in range(N + 1):\n                if dp[i][j][k] == 0:\n                    continue\n                if j < N and S[j] == 'a':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'b':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'c':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'd':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'e':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'f':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'g':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'h':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'i':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'j':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'k':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'l':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'm':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'n':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'o':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'p':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'q':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'r':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 's':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 't':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'u':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'v':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'w':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'x':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'y':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n                if j < N and S[j] == 'z':\n                    dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1] + dp[i][j][k]) % MOD\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j][k]) % MOD\n    \n    ans = [0] * (N + 1)\n    for k in range(N + 1):\n        total = 0\n        for j in range(N + 1):\n            total = (total + dp[M][j][k]) % MOD\n        ans[k] = total\n    \n    pow26 = 1\n    for _ in range(M):\n        pow26 = pow26 * 26 % MOD\n    \n    for k in range(N + 1):\n        if k == 0:\n            ans[k] = (pow26 - ans[k]) % MOD\n        else:\n            ans[k] = (ans[k] - ans[k-1]) % MOD\n    \n    return ' '.join(map(str, ans))",
  "model": "deepseek-chat-v3-0324",
  "task_description": "You are given a lowercase English string S of length N and an integer M. For each k=0,1,\\ldots,N, solve the following problem:\n\n- There are 26^M lowercase English strings of length M. Among these, find the number, modulo 998244353, of strings whose longest common subsequence with S has length exactly k.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\r\nS\n\nOutput\n\nLet \\mathrm{ans}_i be the answer for k=i. Print the answers in the following format:\n\\mathrm{ans}_0 \\mathrm{ans}_1 \\ldots \\mathrm{ans}_N\n\nConstraints\n\n\n- 1\\leq N\\leq 10\n- 1\\leq M\\leq 100\n- N and M are integers.\n- S is a lowercase English string of length N.\n\nSample Input 1\n\n2 2\r\nab\n\nSample Output 1\n\n576 99 1\r\n\nThe answers for k=0,1,2 are as follows:\n\n- For k=0: Among length 2 lowercase English strings, those with a longest common subsequence of length 0 with ab include strings such as cd, re, zz, totaling 576.\n- For k=1: Among length 2 lowercase English strings, those with a longest common subsequence of length 1 with ab include strings such as ac, wa, ba, totaling 99.\n- For k=2: Among length 2 lowercase English strings, there is 1 string (ab) whose longest common subsequence with ab has length 2.\n\nSample Input 2\n\n3 4\r\naaa\n\nSample Output 2\n\n390625 62500 3750 101\n\nSample Input 3\n\n7 50\r\natcoder\n\nSample Output 3\n\n309810541 226923474 392073062 146769908 221445233 435648037 862664208 238437587"
}