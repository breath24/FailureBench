{
  "task_id": "arc196_d",
  "llm_response": "import sys\nimport bisect\n\ndef candidate_func(input_str):\n    lines = input_str.split('\\n')\n    parts = lines[0].split()\n    N = int(parts[0])\n    M = int(parts[1])\n    Q = int(partsused = [0] * (M + 2)\n    for i in range(1, M + 1):\n        S, T = map(int, lines[i].split())\n        if S < T:\n            left = S\n            right = T - 1\n        else:\n            left = T\n            right = S - 1\n        starts.append(left)\n        ends.append(right)\n    queries = []\n    for i in range(M + 1, M + Q + 1):\n        L, R = map(int, lines[i].split())\n        queries.append((L, R))\n    sorted_intervals = []\n    for i in range(1, M + 1):\n        left = starts[i]\n        right = ends[i]\n        sorted_intervals.append((left, right, i))\n    sorted_intervals.sort()\n    lefts = [x[0] for x in sorted_intervals]\n    rights = [x[1] for x in sorted_intervals]\n    indices = [x[2] for x in sorted_intervals]\n    prefix = [0] * (M + 2)\n    for i in range(1, M + 1):\n        prefix[i] = max(prefix[i - 1], rights[i - 1])\n    suffix = [0] * (M + 2)\n    for i in range(M, 0, -1):\n        suffix[i] = min(suffix[i + 1], lefts[i - 1]) if i < M else float('inf')\n    res = []\n    for query in queries:\n        L, R = query\n        if L == R:\n            res.append(\"Yes\")\n            continue\n        max_right = prefix[R]\n        min_left = suffix[L]\n        if max_right >= min_left:\n            res.append(\"No\")\n        else:\n            res.append(\"Yes\")\n    return '\\n'.join(res)",
  "model": "deepseek-chat-v3-0324",
  "task_description": "There are N towns, numbered 1,2,\\ldots,N, arranged in a line in this order.\nThere are N-1 roads connecting adjacent towns: road j\\,(1 \\leq j \\leq N-1) connects towns j and j+1. For each road j, you can set a strength w_j (an integer that may be negative).\nWhen a person travels along a road, their stamina changes. Specifically, if a person with stamina x travels along road j, their stamina becomes x + w_j.\nThere are M people who will now move between these towns.\nPerson i\\,(1 \\le i \\le M) starts with stamina 0 at town S_i and travels to town T_i via the shortest path.\r\nIt is guaranteed that |S_i - T_i| > 1. Also, (S_i, T_i) \\neq (S_j, T_j) if i \\neq j.\nPerson i\u2019s requirement is as follows:\n\nWhen departing Town S_i and when arriving at Town T_i, their stamina should be exactly 0. At every other town, their stamina should always be a positive integer.\n\nAssume that there are no changes to stamina other than those due to traveling along roads as described above.\nProcess Q queries. For the k-th query (1 \\le k \\le Q), if it is possible to set the strengths of the roads so that the requirements of all people L_k, L_k + 1, \\ldots, R_k are satisfied, print Yes; otherwise, print No.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M Q\r\nS_1 T_1\r\nS_2 T_2\r\n\\vdots\r\nS_M T_M\r\nL_1 R_1\r\nL_2 R_2\r\n\\vdots\r\nL_Q R_Q\n\nOutput\n\nPrint Q lines.\nThe k-th line should contain Yes if there is a way to set the strengths of the roads so that the requirements of all people L_k, L_k + 1, \\ldots, R_k are satisfied, and No otherwise.\n\nConstraints\n\n\n- 3 \\le N \\le 4 \\times 10^5\n- 1 \\le M \\le 2 \\times 10^5\n- 1 \\le Q \\le 2 \\times 10^5\n- 1 \\le S_i, T_i \\le N\n- |S_i - T_i| > 1\n- (S_i, T_i) \\neq (S_j, T_j)\\,(i \\neq j)\n- 1 \\le L_k \\le R_k \\le M\n- All input values are integers.\n\nSample Input 1\n\n5 4 2\r\n4 2\r\n1 3\r\n3 5\r\n2 4\r\n1 3\r\n2 4\n\nSample Output 1\n\nYes\r\nNo\r\n\nFor the first query, consider setting the strengths of roads 1, 2, 3, 4 to 1, -1, 1, -1, respectively.\n\n- Person 1 starts at town 4 with stamina 0, visits town 3 with stamina 1, and arrives at town 2 with stamina 0.\n- Person 2 starts at town 1 with stamina 0, visits town 2 with stamina 1, and arrives at town 3 with stamina 0.\n- Person 3 starts at town 3 with stamina 0, visits town 4 with stamina 1, and arrives at town 5 with stamina 0.\n\nThus, this configuration satisfies the requirements of persons 1,2,3, so print Yes on the first line.\nFor the second query, it is impossible to satisfy the requirements of persons 2,3,4 simultaneously, so print No.\n\nSample Input 2\n\n7 6 3\r\n1 5\r\n2 4\r\n4 6\r\n7 1\r\n5 3\r\n1 6\r\n1 6\r\n4 4\r\n2 5\n\nSample Output 2\n\nNo\r\nYes\r\nYes"
}