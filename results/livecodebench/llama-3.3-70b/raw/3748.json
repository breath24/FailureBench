{
  "task_id": "3748",
  "llm_response": "def sortMatrix(grid):\n    n = len(grid)\n    bottom_left = {}\n    top_right = {}\n    for i in range(n):\n        for j in range(n):\n            if i + j not in bottom_left:\n                bottom_left[i + j] = []\n            bottom_left[i + j].append(grid[i][j])\n            if i - j not in top_right:\n                top_right[i - j] = []\n            top_right[i - j].append(grid[i][j])\n    for key in bottom_left:\n        bottom_left[key].sort(reverse=True)\n    for key in top_right:\n        top_right[key].sort()\n    for i in range(n):\n        for j in range(n):\n            grid[i][j] = bottom_left[i + j].pop(0)\n            top_right[i - j].pop(0)\n    return grid",
  "model": "llama-3.3-70b",
  "task_description": "You are given an n x n square matrix of integers grid. Return the matrix such that:\n\nThe diagonals in the bottom-left triangle (including the middle diagonal) are sorted in non-increasing order.\nThe diagonals in the top-right triangle are sorted in non-decreasing order.\n\n \nExample 1:\n\nInput: grid = [[1,7,3],[9,8,2],[4,5,6]]\nOutput: [[8,2,3],[9,6,7],[4,5,1]]\nExplanation:\n\nThe diagonals with a black arrow (bottom-left triangle) should be sorted in non-increasing order:\n\n[1, 8, 6] becomes [8, 6, 1].\n[9, 5] and [4] remain unchanged.\n\nThe diagonals with a blue arrow (top-right triangle) should be sorted in non-decreasing order:\n\n[7, 2] becomes [2, 7].\n[3] remains unchanged.\n\n\nExample 2:\n\nInput: grid = [[0,1],[1,2]]\nOutput: [[2,1],[1,0]]\nExplanation:\n\nThe diagonals with a black arrow must be non-increasing, so [0, 2] is changed to [2, 0]. The other diagonals are already in the correct order.\n\nExample 3:\n\nInput: grid = [[1]]\nOutput: [[1]]\nExplanation:\nDiagonals with exactly one element are already in order, so no changes are needed.\n\n \nConstraints:\n\ngrid.length == grid[i].length == n\n1 <= n <= 10\n-10^5 <= grid[i][j] <= 10^5"
}