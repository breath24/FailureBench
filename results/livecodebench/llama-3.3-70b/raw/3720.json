{
  "task_id": "3720",
  "llm_response": "import heapq\nfrom collections import defaultdict\n\ndef minMaxWeight(n, edges, threshold):\n    graph = defaultdict(list)\n    for u, v, w in edges:\n        graph[u].append((v, w))\n\n    def check(mid):\n        q = []\n        in_degree = [0] * n\n        for u in range(n):\n            for v, w in graph[u]:\n                if w <= mid:\n                    in_degree[v] += 1\n                    heapq.heappush(q, (w, u, v))\n        while q:\n            w, u, v = heapq.heappop(q)\n            in_degree[v] -= 1\n            for x, y in graph[v]:\n                if y <= mid and in_degree[x] < threshold:\n                    in_degree[x] += 1\n                    heapq.heappush(q, (y, v, x))\n        return all(in_degree[i] > 0 for i in range(1, n))\n\n    left, right = 0, 10**6\n    while left < right:\n        mid = (left + right) // 2\n        if check(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left if left <= 10**6 else -1",
  "model": "llama-3.3-70b",
  "task_description": "You are given two integers, n and threshold, as well as a directed weighted graph of n nodes numbered from 0 to n - 1. The graph is represented by a 2D integer array edges, where edges[i] = [A_i, B_i, W_i] indicates that there is an edge going from node A_i to node B_i with weight W_i.\nYou have to remove some edges from this graph (possibly none), so that it satisfies the following conditions:\n\nNode 0 must be reachable from all other nodes.\nThe maximum edge weight in the resulting graph is minimized.\nEach node has at most threshold outgoing edges.\n\nReturn the minimum possible value of the maximum edge weight after removing the necessary edges. If it is impossible for all conditions to be satisfied, return -1.\n \nExample 1:\n\nInput: n = 5, edges = [[1,0,1],[2,0,2],[3,0,1],[4,3,1],[2,1,1]], threshold = 2\nOutput: 1\nExplanation:\n\nRemove the edge 2 -> 0. The maximum weight among the remaining edges is 1.\n\nExample 2:\n\nInput: n = 5, edges = [[0,1,1],[0,2,2],[0,3,1],[0,4,1],[1,2,1],[1,4,1]], threshold = 1\nOutput: -1\nExplanation: \nIt is impossible to reach node 0 from node 2.\n\nExample 3:\n\nInput: n = 5, edges = [[1,2,1],[1,3,3],[1,4,5],[2,3,2],[3,4,2],[4,0,1]], threshold = 1\nOutput: 2\nExplanation: \n\nRemove the edges 1 -> 3 and 1 -> 4. The maximum weight among the remaining edges is 2.\n\nExample 4:\n\nInput: n = 5, edges = [[1,2,1],[1,3,3],[1,4,5],[2,3,2],[4,0,1]], threshold = 1\nOutput: -1\n\n \nConstraints:\n\n2 <= n <= 10^5\n1 <= threshold <= n - 1\n1 <= edges.length <= min(10^5, n * (n - 1) / 2).\nedges[i].length == 3\n0 <= A_i, B_i < n\nA_i != B_i\n1 <= W_i <= 10^6\nThere may be multiple edges between a pair of nodes, but they must have unique weights."
}