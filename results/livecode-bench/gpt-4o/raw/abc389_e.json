{
  "task_id": "abc389_e",
  "llm_response": "def candidate_func(input_str):\n    import sys\n    input = sys.stdin.read\n    from math import isqrt\n\n    data = input_str.split()\n    N = int(data[0])\n    M = int(data[1])\n    P = list(map(int, data[2:]))\n\n    def can_buy(total_units):\n        cost = 0\n        for p in P:\n            max_k = isqrt(M // p)\n            if total_units <= max_k:\n                cost += total_units * total_units * p\n            else:\n                cost += max_k * max_k * p + (total_units - max_k) * (total_units - max_k) * p\n            if cost > M:\n                return False\n        return cost <= M\n\n    low, high = 0, 10**18\n    while low < high:\n        mid = (low + high + 1) // 2\n        if can_buy(mid):\n            low = mid\n        else:\n            high = mid - 1\n\n    return str(low)",
  "model": "gpt-4o",
  "task_description": "There are N types of products, each having 10^{100} units in stock.\nYou can buy any non-negative number of units of each product. To buy k units of the i-th product, it costs k^2 P_i yen.\nIf your total purchase cost is at most M yen, what is the maximum number of units you can buy in total?\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\r\nP_1 \\ldots P_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^{5}\n- 1 \\leq M \\leq 10^{18}\n- 1 \\leq P_i \\leq 2 \\times 10^{9}\n- All input values are integers.\n\nSample Input 1\n\n3 9\r\n4 1 9\n\nSample Output 1\n\n3\r\n\nIf you buy one unit of the 1st product and two units of the 2nd product, the total purchase cost is 1^2 \\times 4 + 2^2 \\times 1 = 8. It is impossible to buy four or more units in total with a total cost of at most 9 yen, so the answer is 3.\n\nSample Input 2\n\n10 1000\r\n2 15 6 5 12 1 7 9 17 2\n\nSample Output 2\n\n53"
}