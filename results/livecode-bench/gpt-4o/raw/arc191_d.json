{
  "task_id": "arc191_d",
  "llm_response": "from collections import deque, defaultdict\n\ndef candidate_func(input_str):\n    data = input_str.split()\n    N = int(data[0])\n    M = int(data[1])\n    S = int(data[2])\n    T = int(data[3])\n    \n    edges = data[4:]\n    graph = defaultdict(list)\n    \n    for i in range(M):\n        u = int(edges[2 * i])\n        v = int(edges[2 * i + 1])\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def bfs(start):\n        dist = [-1] * (N + 1)\n        queue = deque([start])\n        dist[start] = 0\n        while queue:\n            node = queue.popleft()\n            for neighbor in graph[node]:\n                if dist[neighbor] == -1:\n                    dist[neighbor] = dist[node] + 1\n                    queue.append(neighbor)\n        return dist\n    \n    dist_from_S = bfs(S)\n    dist_from_T = bfs(T)\n    \n    if dist_from_S[T] == -1:\n        return \"-1\"\n    \n    min_operations = float('inf')\n    \n    for u in range(1, N + 1):\n        for v in graph[u]:\n            if u != v and dist_from_S[u] + 1 + dist_from_T[v] >= dist_from_S[T]:\n                min_operations = min(min_operations, dist_from_S[u] + 1 + dist_from_T[v])\n    \n    return str(min_operations) if min_operations != float('inf') else \"-1\"",
  "model": "gpt-4o",
  "task_description": "You are given a simple connected undirected graph with N vertices and M edges, where the vertices are numbered 1 to N and the edges are numbered 1 to M. Edge i connects vertex u_i and vertex v_i in both directions.\nInitially, there is a piece A on vertex S and a piece B on vertex T. Here, S and T are given as input.\nYou may perform the following operation any number of times in any order:\n\n- Choose either piece A or piece B, and move it from its current vertex to an adjacent vertex via an edge. However, you cannot make a move that results in both pieces ending up on the same vertex.\n\nYour goal is to reach the state in which piece A is on vertex T and piece B is on vertex S.\nDetermine whether this is possible, and if it is, find the minimum number of operations required to achieve it.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M S T\nu_1 v_1\nu_2 v_2\n\\vdots\nu_M v_M\n\nOutput\n\nIf it is impossible to achieve the goal, print -1.\nIf it is possible, print the minimum number of operations required.\n\nConstraints\n\n\n- 2 \\le N \\le 2\\times 10^5\n- \\displaystyle N-1 \\le M \\le \\min\\left(\\frac{N(N-1)}{2},\\,2\\times 10^5\\right)\n- 1 \\le u_i < v_i \\le N\n- The given graph is simple and connected.\n- 1 \\le S, T \\le N\n- S \\neq T\n- All input values are integers.\n\nSample Input 1\n\n4 4 3 4\n2 4\n1 4\n3 4\n2 3\n\nSample Output 1\n\n3\n\nFor example, the following sequence of operations completes the goal in three moves:\n\n- Move piece A to vertex 2.\n- Piece A is on vertex 2, piece B is on vertex 4.\n\n\n- Move piece B to vertex 3.\n- Piece A is on vertex 2, piece B is on vertex 3.\n\n\n- Move piece A to vertex 4.\n- Piece A is on vertex 4, piece B is on vertex 3.\n\n\n\nIt is impossible to complete the goal in fewer than three moves, so print 3.\n\nSample Input 2\n\n2 1 1 2\n1 2\n\nSample Output 2\n\n-1\n\nNo matter how you move the pieces, you cannot achieve the goal.\n\nSample Input 3\n\n5 6 3 5\n1 2\n2 3\n1 5\n2 4\n1 3\n2 5\n\nSample Output 3\n\n4"
}