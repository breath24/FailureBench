{
  "task_id": "arc190_c",
  "llm_response": "import sys\n\ndef candidate_func(input_data):\n    MOD = 998244353\n    \n    lines = input_data.strip().split('\\n')\n    H, W = map(int, lines[0].split())\n    \n    grid = []\n    for i in range(1, H + 1):\n        row = list(map(int, lines[i].split()))\n        grid.append(row)\n    \n    line_idx = H + 1\n    Q, sh, sw = map(int, lines[line_idx].split())\n    sh -= 1\n    sw -= 1\n    line_idx += 1\n    \n    queries = []\n    for i in range(Q):\n        d, a = lines[line_idx + i].split()\n        a = int(a)\n        queries.append((d, a))\n    \n    fact = [1] * (H + W)\n    for i in range(1, H + W):\n        fact[i] = (fact[i - 1] * i) % MOD\n    \n    def modinv(x):\n        return pow(x, MOD - 2, MOD)\n    \n    factinv = [1] * (H + W)\n    factinv[H + W - 1] = modinv(fact[H + W - 1])\n    for i in range(H + W - 2, -1, -1):\n        factinv[i] = (factinv[i + 1] * (i + 1)) % MOD\n    \n    def comb(n, r):\n        if r < 0 or r > n:\n            return 0\n        return (fact[n] * factinv[r] % MOD) * factinv[n - r] % MOD\n    \n    dp_up = [[0] * W for _ in range(H)]\n    dp_down = [[0] * W for _ in range(H)]\n    \n    dp_up[0][0] = 1\n    for i in range(H):\n        for j in range(W):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp_up[i][j] = (dp_up[i][j] + dp_up[i - 1][j]) % MOD\n            if j > 0:\n                dp_up[i][j] = (dp_up[i][j] + dp_up[i][j - 1]) % MOD\n            dp_up[i][j] = (dp_up[i][j] * grid[i][j]) % MOD\n    \n    dp_down[H - 1][W - 1] = 1\n    for i in range(H - 1, -1, -1):\n        for j in range(W - 1, -1, -1):\n            if i == H - 1 and j == W - 1:\n                continue\n            if i < H - 1:\n                dp_down[i][j] = (dp_down[i][j] + dp_down[i + 1][j]) % MOD\n            if j < W - 1:\n                dp_down[i][j] = (dp_down[i][j] + dp_down[i][j + 1]) % MOD\n            dp_down[i][j] = (dp_down[i][j] * grid[i][j]) % MOD\n    \n    res = (dp_up[H - 1][W - 1] * modinv(grid[H - 1][W - 1])) % MOD\n    \n    results = []\n    pos_h, pos_w = sh, sw\n    \n    for d, a in queries:\n        if d == 'U':\n            pos_h -= 1\n        elif d == 'D':\n            pos_h += 1\n        elif d == 'L':\n            pos_w -= 1\n        elif d == 'R':\n            pos_w += 1\n        \n        old_val = grid[pos_h][pos_w]\n        grid[pos_h][pos_w] = a\n        \n        contrib_old = dp_up[pos_h][pos_w] * dp_down[pos_h][pos_w] % MOD\n        if old_val != 0:\n            contrib_old = contrib_old * modinv(old_val) % MOD\n        \n        dp_up[0][0] = 1\n        for i in range(H):\n            for j in range(W):\n                if i == 0 and j == 0:\n                    continue\n                dp_up[i][j] = 0\n                if i > 0:\n                    dp_up[i][j] = (dp_up[i][j] + dp_up[i - 1][j]) % MOD\n                if j > 0:\n                    dp_up[i][j] = (dp_up[i][j] + dp_up[i][j - 1]) % MOD\n                dp_up[i][j] = (dp_up[i][j] * grid[i][j]) % MOD\n        \n        dp_down[H - 1][W - 1] = 1\n        for i in range(H - 1, -1, -1):\n            for j in range(W - 1, -1, -1):\n                if i == H - 1 and j == W - 1:\n                    continue\n                dp_down[i][j] = 0\n                if i < H - 1:\n                    dp_down[i][j] = (dp_down[i][j] + dp_down[i + 1][j]) % MOD\n                if j < W - 1:\n                    dp_down[i][j] = (dp_down[i][j] + dp_down[i][j + 1]) % MOD\n                dp_down[i][j] = (dp_down[i][j] * grid[i][j]) % MOD\n        \n        res = dp_up[H - 1][W - 1]\n        results.append(str(res))\n    \n    return '\\n'.join(results)",
  "model": "qwen3-coder",
  "task_description": "There is an H \\times W grid. Let (h,w) denote the cell at the h-th row from the top and the w-th column from the left. A non-negative integer A_{h,w} is written in cell (h,w).\nTakahashi starts at cell (sh,sw) and will perform Q changes to the grid. The i-th change is given by a character d_i (d_i is one of L, R, U, D) and a non-negative integer a_i, meaning Takahashi will do the following:\n\n- Move one cell in the direction d_i. That is, if d_i is L, move left; if R, move right; if U, move up; if D, move down by one cell. Then, let the destination cell be (h,w), and set A_{h,w} to a_i.\n\nIt is guaranteed that in each change, he can move one cell in direction d_i.\nAfter each change, print the answer to the following problem:\n\nA sequence of cells P = ((h_1,w_1), \\ldots, (h_{M},w_{M})) is said to be a path if and only if it satisfies all of the following conditions:\n\n- (h_1,w_1) = (1,1), (h_{M},w_{M}) = (H,W), and M = H + W - 1.\n- For every i with 1 \\leq i \\leq M-1, either (h_{i+1}, w_{i+1}) = (h_i + 1, w_i) or (h_{i+1}, w_{i+1}) = (h_i, w_i + 1).\n\nThere are \\binom{H+W-2}{H-1} paths. For a path P = ((h_1,w_1), \\ldots, (h_{M},w_{M})), define f(P) = \\prod_{1\\leq i\\leq M}A_{h_i,w_i}. Print the sum, modulo 998244353, of f(P) over all paths P.\n\nInput\n\nThe input is given from Standard Input in the following format:\nH W\nA_{1,1} \\cdots A_{1,W}\n\\vdots\nA_{H,1} \\cdots A_{H,W}\nQ sh sw\nd_1 a_1\n\\vdots\nd_Q a_Q\n\nOutput\n\nPrint Q lines.\nThe i-th line should contain the sum, modulo 998244353, of f(P) over all paths P after performing the i-th change to the grid.\n\nConstraints\n\n\n- 2 \\leq H, W \\leq 200000\n- HW \\leq 200000\n- 0 \\leq A_{h,w} < 998244353\n- 1 \\leq Q \\leq 200000\n- 1 \\leq sh \\leq H, 1 \\leq sw \\leq W\n- 0 \\leq a_i < 998244353\n- H, W, A_{h,w}, Q, sh, sw, and a_i are integers.\n- Each d_i is L, R, U, or D.\n- In each change, Takahashi can move one cell in the direction d_i.\n\nSample Input 1\n\n2 3\n1 2 3\n4 5 6\n3 2 2\nU 7\nR 8\nL 9\n\nSample Output 1\n\n456\n666\n822\n\n\n- Initially, Takahashi is at (2,2).\n- Move up, then set A_{1,2} to 7. The value of f(P) for each path is:\n- P=((1,1),(1,2),(1,3),(2,3)): f(P)=1 \\times 7 \\times 3 \\times 6=126.\n- P=((1,1),(1,2),(2,2),(2,3)): f(P)=1 \\times 7 \\times 5 \\times 6=210.\n- P=((1,1),(2,1),(2,2),(2,3)): f(P)=1 \\times 4 \\times 5 \\times 6=120.\n\n\n- Move right, then set A_{1,3} to 8. The value of f(P) for each path is:\n- P=((1,1),(1,2),(1,3),(2,3)): f(P)=1 \\times 7 \\times 8 \\times 6=336.\n- P=((1,1),(1,2),(2,2),(2,3)): f(P)=1 \\times 7 \\times 5 \\times 6=210.\n- P=((1,1),(2,1),(2,2),(2,3)): f(P)=1 \\times 4 \\times 5 \\times 6=120.\n\n\n- Move left, then set A_{1,2} to 9. The value of f(P) for each path is:\n- P=((1,1),(1,2),(1,3),(2,3)): f(P)=1 \\times 9 \\times 8 \\times 6=432.\n- P=((1,1),(1,2),(2,2),(2,3)): f(P)=1 \\times 9 \\times 5 \\times 6=270.\n- P=((1,1),(2,1),(2,2),(2,3)): f(P)=1 \\times 4 \\times 5 \\times 6=120.\n\nSample Input 2\n\n5 4\n147015809 294958521 852121867 499798308\n790350368 404692331 645419803 290531806\n275766153 896286651 239187926 945049742\n340760022 236352314 926236110 223464913\n287023679 590772036 340282357 521075891\n6 3 1\nU 344644511\nR 45812235\nD 260083498\nR 781118585\nL 156297846\nL 411901560\n\nSample Output 2\n\n299123226\n548055393\n810247224\n876210800\n773990840\n506814544"
}