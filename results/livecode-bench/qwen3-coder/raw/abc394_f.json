{
  "task_id": "abc394_f",
  "llm_response": "import sys\nfrom collections import defaultdict, deque\n\ndef candidate_func(input_data):\n    lines = input_data.strip().split('\\n')\n    N = int(lines[0])\n    \n    if N == 1:\n        return \"-1\"\n    \n    adj = defaultdict(list)\n    \n    for i in range(1, N):\n        a, b = map(int, lines[i].split())\n        adj[a].append(b)\n        adj[b].append(a)\n    \n    degree = [0] * (N + 1)\n    for i in range(1, N + 1):\n        degree[i] = len(adj[i])\n    \n    if N < 5:\n        return \"-1\"\n    \n    leaves = deque()\n    alive = [True] * (N + 1)\n    \n    for i in range(1, N + 1):\n        if degree[i] == 1:\n            leaves.append(i)\n    \n    while leaves:\n        leaf = leaves.popleft()\n        if not alive[leaf]:\n            continue\n        alive[leaf] = False\n        for neighbor in adj[leaf]:\n            if alive[neighbor]:\n                degree[neighbor] -= 1\n                if degree[neighbor] == 1:\n                    leaves.append(neighbor)\n    \n    vertices = []\n    for i in range(1, N + 1):\n        if alive[i]:\n            vertices.append(i)\n    \n    if not vertices:\n        return \"-1\"\n    \n    sub_degree = defaultdict(int)\n    sub_adj = defaultdict(list)\n    \n    for i in range(1, N):\n        a, b = map(int, lines[i].split())\n        if alive[a] and alive[b]:\n            sub_adj[a].append(b)\n            sub_adj[b].append(a)\n            sub_degree[a] += 1\n            sub_degree[b] += 1\n    \n    valid = True\n    has_four = False\n    \n    for v in vertices:\n        if sub_degree[v] != 1 and sub_degree[v] != 4:\n            valid = False\n            break\n        if sub_degree[v] == 4:\n            has_four = True\n    \n    if not valid or not has_four:\n        return \"-1\"\n    \n    return str(len(vertices))",
  "model": "qwen3-coder",
  "task_description": "You are given an undirected tree T with N vertices, numbered 1, 2, \\ldots, N. The i-th edge is an undirected edge connecting vertices A_i and B_i.\nA graph is defined to be an alkane if and only if it satisfies the following conditions:\n\n- The graph is an undirected tree.\n- Every vertex has degree 1 or 4, and there is at least one vertex of degree 4.\n\nDetermine whether there exists a subgraph of T that is an alkane, and if so, find the maximum number of vertices in such a subgraph.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 B_1\r\nA_2 B_2\r\n\\vdots\r\nA_{N - 1} B_{N - 1}\n\nOutput\n\nIf there exists a subgraph of T that is an alkane, print the maximum number of vertices in such a subgraph. Otherwise, print -1.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq A_i, B_i \\leq N\n- The given graph is an undirected tree.\n- All input values are integers.\n\nSample Input 1\n\n9\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n2 6\r\n2 7\r\n3 8\r\n3 9\n\nSample Output 1\n\n8\r\n\nLet (u, v) denote an undirected edge between vertices u and v.\nA subgraph consisting of vertices 1,2,3,4,6,7,8,9 and edges (1,2),(2,3),(3,4),(2,6),(2,7),(3,8),(3,9) is an alkane.\n\nSample Input 2\n\n7\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\n\nSample Output 2\n\n-1\n\nSample Input 3\n\n15\r\n8 5\r\n2 9\r\n1 12\r\n6 11\r\n9 3\r\n15 1\r\n7 12\r\n7 13\r\n10 5\r\n6 9\r\n5 1\r\n1 9\r\n4 5\r\n6 14\n\nSample Output 3\n\n11"
}