{
  "task_id": "3722",
  "llm_response": "def maxSum(nums, k, m):\n    n = len(nums)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + nums[i]\n\n    max_sums = []\n    for i in range(n - m + 1):\n        current_sum = prefix[i + m] - prefix[i]\n        max_sums.append(current_sum)\n\n    dp = [-float('inf')] * (k + 1)\n    dp[0] = 0\n    for i in range(1, k + 1):\n        for j in range(n - m + 1):\n            if j >= m:\n                dp[i] = max(dp[i], dp[i - 1] + max_sums[j - m])\n            else:\n                dp[i] = max(dp[i], dp[i - 1] + max_sums[j])\n\n    return dp[k]",
  "model": "mistral-3.2-24b",
  "task_description": "You are given an integer array nums and two integers, k and m.\nReturn the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.\n \nExample 1:\n\nInput: nums = [1,2,-1,3,3,4], k = 2, m = 2\nOutput: 13\nExplanation:\nThe optimal choice is:\n\nSubarray nums[3..5] with sum 3 + 3 + 4 = 10 (length is 3 >= m).\nSubarray nums[0..1] with sum 1 + 2 = 3 (length is 2 >= m).\n\nThe total sum is 10 + 3 = 13.\n\nExample 2:\n\nInput: nums = [-10,3,-1,-2], k = 4, m = 1\nOutput: -10\nExplanation:\nThe optimal choice is choosing each element as a subarray. The output is (-10) + 3 + (-1) + (-2) = -10.\n\n \nConstraints:\n\n1 <= nums.length <= 2000\n-10^4 <= nums[i] <= 10^4\n1 <= k <= floor(nums.length / m)\n1 <= m <= 3"
}