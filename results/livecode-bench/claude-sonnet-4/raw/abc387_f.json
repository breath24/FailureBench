{
  "task_id": "abc387_f",
  "llm_response": "def candidate_func(input_str):\n    lines = input_str.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n    \n    MOD = 998244353\n    \n    from collections import defaultdict, deque\n    \n    graph = defaultdict(list)\n    in_degree = [0] * (N + 1)\n    \n    for i in range(N):\n        u = i + 1\n        v = A[i]\n        if u != v:\n            graph[v].append(u)\n            in_degree[u] += 1\n    \n    topo_order = []\n    queue = deque()\n    \n    for i in range(1, N + 1):\n        if in_degree[i] == 0:\n            queue.append(i)\n    \n    while queue:\n        node = queue.popleft()\n        topo_order.append(node)\n        for neighbor in graph[node]:\n            in_degree[neighbor] -= 1\n            if in_degree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    dp = [0] * (N + 1)\n    \n    for node in topo_order:\n        if A[node - 1] == node:\n            dp[node] = M\n        else:\n            dp[node] = dp[A[node - 1]]\n        dp[node] %= MOD\n    \n    result = 1\n    for i in range(1, N + 1):\n        result = (result * dp[i]) % MOD\n    \n    return str(result)",
  "model": "claude-sonnet-4",
  "task_description": "You are given positive integers N, M, and a sequence A = (A_1, A_2, \\dots, A_N) of length N, each element being an integer between 1 and N, inclusive.\nFind the number, modulo 998244353, of sequences x = (x_1, x_2, \\dots, x_N) of length N, each element being an integer between 1 and M, inclusive, that satisfy the following condition:\n\n- x_i \\leq x_{A_i} for every i (1 \\leq i \\leq N).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\r\nA_1 A_2 \\dots A_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 1 \\leq N, M \\leq 2025\n- 1 \\leq A_i \\leq N\n- All input values are integers.\n\nSample Input 1\n\n3 3\r\n2 1 1\n\nSample Output 1\n\n6\r\n\nThe sequences x=(1,1,1),(2,2,1),(2,2,2),(3,3,1),(3,3,2),(3,3,3) satisfy the condition.\n\nSample Input 2\n\n4 9\r\n1 1 1 1\n\nSample Output 2\n\n2025\n\nSample Input 3\n\n10 5\r\n9 4 5 5 4 2 1 5 7 2\n\nSample Output 3\n\n10010"
}