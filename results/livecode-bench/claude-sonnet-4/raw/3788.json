{
  "task_id": "3788",
  "llm_response": "def maxSum(nums):\n    from collections import defaultdict\n    \n    value_positions = defaultdict(list)\n    for i, num in enumerate(nums):\n        value_positions[num].append(i)\n    \n    max_sum = float('-inf')\n    \n    for mask in range(1, 1 << len(nums)):\n        selected = []\n        for i in range(len(nums)):\n            if mask & (1 << i):\n                selected.append(nums[i])\n        \n        if len(set(selected)) != len(selected):\n            continue\n        \n        current_max = float('-inf')\n        current_sum = 0\n        \n        for num in selected:\n            current_sum = max(num, current_sum + num)\n            current_max = max(current_max, current_sum)\n        \n        max_sum = max(max_sum, current_max)\n    \n    return max_sum",
  "model": "claude-sonnet-4",
  "task_description": "You are given an integer array nums.\nYou are allowed to delete any number of elements from nums without making it empty. After performing the deletions, select a subarray of nums such that:\n\nAll elements in the subarray are unique.\nThe sum of the elements in the subarray is maximized.\n\nReturn the maximum sum of such a subarray.\n \nExample 1:\n\nInput: nums = [1,2,3,4,5]\nOutput: 15\nExplanation:\nSelect the entire array without deleting any element to obtain the maximum sum.\n\nExample 2:\n\nInput: nums = [1,1,0,1,1]\nOutput: 1\nExplanation:\nDelete the element nums[0] == 1, nums[1] == 1, nums[2] == 0, and nums[3] == 1. Select the entire array [1] to obtain the maximum sum.\n\nExample 3:\n\nInput: nums = [1,2,-1,-2,1,0,-1]\nOutput: 3\nExplanation:\nDelete the elements nums[2] == -1 and nums[3] == -2, and select the subarray [2, 1] from [1, 2, 1, 0, -1] to obtain the maximum sum.\n\n \nConstraints:\n\n1 <= nums.length <= 100\n-100 <= nums[i] <= 100"
}