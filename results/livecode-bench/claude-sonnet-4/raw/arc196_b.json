{
  "task_id": "arc196_b",
  "llm_response": "def candidate_func(input_str):\n    lines = input_str.strip().split('\\n')\n    T = int(lines[0])\n    results = []\n    line_idx = 1\n    \n    MOD = 998244353\n    \n    for _ in range(T):\n        H, W = map(int, lines[line_idx].split())\n        line_idx += 1\n        \n        grid = []\n        for i in range(H):\n            grid.append(lines[line_idx])\n            line_idx += 1\n        \n        def solve():\n            orientations = {}\n            \n            for i in range(H):\n                for j in range(W):\n                    if grid[i][j] == 'A':\n                        orientations[(i, j)] = [(0, 1, 0, 0), (1, 0, 1, 0), (0, 0, 0, 1), (0, 0, 1, 0)]\n                    else:\n                        orientations[(i, j)] = [(1, 0, 0, 1), (0, 1, 1, 0)]\n            \n            def is_valid(assignment):\n                for i in range(H):\n                    for j in range(W):\n                        right, down, left, up = assignment[(i, j)]\n                        \n                        next_j = (j + 1) % W\n                        next_left = assignment[(i, next_j)][2]\n                        if right != next_left:\n                            return False\n                        \n                        next_i = (i + 1) % H\n                        next_up = assignment[(next_i, j)][3]\n                        if down != next_up:\n                            return False\n                \n                return True\n            \n            def backtrack(cells, assignment):\n                if not cells:\n                    return 1 if is_valid(assignment) else 0\n                \n                cell = cells[0]\n                remaining = cells[1:]\n                count = 0\n                \n                for orientation in orientations[cell]:\n                    assignment[cell] = orientation\n                    count = (count + backtrack(remaining, assignment)) % MOD\n                \n                del assignment[cell]\n                return count\n            \n            cells = [(i, j) for i in range(H) for j in range(W)]\n            return backtrack(cells, {})\n        \n        results.append(str(solve()))\n    \n    return '\\n'.join(results)",
  "model": "claude-sonnet-4",
  "task_description": "There is a grid of H rows and W columns.\nThe rows are numbered 0,1,\\ldots,H-1 from top to bottom, and the columns are numbered 0,1,\\ldots,W-1 from left to right.\nLet (i,j) denote the cell at row i and column j.\nYou are given H strings S_0, S_1, \\ldots, S_{H-1}, each of which is of length W and consists of A and B.\nIn each cell, one of the following two types of tiles is placed.\nLet S_{ij} denote the (j+1)-th character (0 \\le j \\le W-1) of the string S_i. The type of tile placed in cell (i,j) is S_{ij}.\n\n- Type A: A single line segment is drawn on the tile\u2019s surface, connecting the midpoints of two adjacent edges.\n\n\n\n- Type B: A single line segment is drawn on the tile\u2019s surface, connecting the midpoints of two opposite edges.\n\n\nThese tiles can be freely rotated. When focusing only on the pattern formed by the line segments, there are four ways to rotate a Type-A tile and two ways to rotate a Type-B tile. Therefore, if we distinguish placements only by the pattern of line segments, the number of ways to place the tiles is 4^a \\times 2^b, where a is the number of Type-A tiles and b is the number of Type-B tiles.\nAmong these ways, print the number, modulo 998244353, of ways such that the line segments on the tiles have no dead ends when viewing the grid as a torus.\nHere, \"the line segments on the tiles have no dead ends when viewing the grid as a torus\" if and only if the following two conditions are satisfied for every cell (i,j):\n\n- Both of the following exist, or neither of the following exists:\n- the line segment drawn in the cell (i,j), whose endpoint is the midpoint of the right edge of the cell (i,j)\n- the line segment drawn in the cell (i,(j+1)\\bmod W), whose endpoint is the midpoint of the left edge of the cell (i,(j+1)\\bmod W)\n\n\n- Both of the following exist, or neither of the following exists:\n- the line segment drawn in the cell (i,j), whose endpoint is the midpoint of the bottom edge of the cell (i,j)\n- the line segment drawn in the cell ((i+1)\\bmod H,j), whose endpoint is the midpoint of the top edge of the cell ((i+1)\\bmod H,j)\n\n\n\nFor example, the following placement satisfies the condition:\n\nThe following placement does not satisfy the condition. Specifically, while there is no line segment whose endpoint is the midpoint of the right edge of the tile in cell (0,2), there is a line segment whose endpoint is the midpoint of the left edge of the tile in cell (0,0), so the condition is not satisfied.\n\nYou are given T test cases; solve each of them.\n\nInput\n\nThe input is given from Standard Input in the following format:\nT\ncase_1\ncase_2\n\\vdots\ncase_T\n\nEach case is given in the following format:\nH W\nS_0\nS_1\n\\vdots\nS_{H-1}\n\nOutput\n\nFor each test case, print the number, modulo 998244353, of placements that satisfies the condition, in separate lines.\n\nConstraints\n\n\n- 1 \\le T \\le 10^5\n- 2 \\le H,W\n- HW\\leq 10^6\n- S_i\\,(0\\le i\\le H-1) are length-W strings consisting of A and B.\n- The sum of H W over all test cases is at most 10^6.\n- T, H, and W are integers.\n\nSample Input 1\n\n3\n3 3\nAAB\nAAB\nBBB\n3 3\nBBA\nABA\nAAB\n3 4\nBAAB\nBABA\nBBAA\n\nSample Output 1\n\n2\n0\n2\n\nOne valid placement for the first test case is shown in the following image:"
}