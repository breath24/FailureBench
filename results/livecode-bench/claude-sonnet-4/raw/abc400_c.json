{
  "task_id": "abc400_c",
  "llm_response": "import math\n\ndef candidate_func(input_str):\n    N = int(input_str.strip())\n    \n    good_integers = set()\n    \n    max_a = int(math.log2(N)) + 1\n    \n    for a in range(0, max_a + 1):\n        power_of_2 = 2 ** a\n        if power_of_2 > N:\n            break\n        \n        max_b_squared = N // power_of_2\n        max_b = int(math.sqrt(max_b_squared))\n        \n        for b in range(1, max_b + 1):\n            good_int = power_of_2 * (b * b)\n            if good_int <= N:\n                good_integers.add(good_int)\n            else:\n                break\n    \n    return str(len(good_integers))",
  "model": "claude-sonnet-4",
  "task_description": "A positive integer X is called a good integer if and only if it satisfies the following condition:\n\n- There exists a pair of positive integers (a,b) such that X = 2^a \\times b^2.\n\nFor example, 400 is a good integer because 400 = 2^2 \\times 10^2.\nGiven a positive integer N, find the number of good integers between 1 and N, inclusive.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\n\nOutput\n\nPrint the number of good integers between 1 and N, inclusive.\n\nConstraints\n\n\n- 1 \\leq N \\leq 10^{18}\n- N is an integer.\n\nSample Input 1\n\n20\n\nSample Output 1\n\n5\r\n\nThere are five good integers between 1 and 20: 2, 4, 8, 16, and 18.\r\nThus, print 5.\n\nSample Input 2\n\n400\n\nSample Output 2\n\n24\n\nSample Input 3\n\n1234567890\n\nSample Output 3\n\n42413\r\n\nNote that the input might not fit in a 32-bit integer type."
}