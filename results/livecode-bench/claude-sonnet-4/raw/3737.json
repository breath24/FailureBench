{
  "task_id": "3737",
  "llm_response": "def minCost(n, cost):\n    memo = {}\n    \n    def dp(pos, color):\n        if pos == n // 2:\n            return 0\n        \n        if (pos, color) in memo:\n            return memo[(pos, color)]\n        \n        result = float('inf')\n        mirror_pos = n - 1 - pos\n        \n        for left_color in range(3):\n            if pos > 0 and left_color == color:\n                continue\n            \n            for right_color in range(3):\n                if right_color == left_color:\n                    continue\n                if pos > 0 and right_color == memo.get((pos - 1, 'right'), -1):\n                    continue\n                \n                current_cost = cost[pos][left_color] + cost[mirror_pos][right_color]\n                next_cost = dp(pos + 1, left_color)\n                result = min(result, current_cost + next_cost)\n        \n        memo[(pos, color)] = result\n        return result\n    \n    memo = {}\n    \n    def solve(pos, left_prev, right_prev):\n        if pos == n // 2:\n            return 0\n        \n        if (pos, left_prev, right_prev) in memo:\n            return memo[(pos, left_prev, right_prev)]\n        \n        result = float('inf')\n        mirror_pos = n - 1 - pos\n        \n        for left_color in range(3):\n            if left_color == left_prev:\n                continue\n            \n            for right_color in range(3):\n                if right_color == left_color:\n                    continue\n                if right_color == right_prev:\n                    continue\n                \n                current_cost = cost[pos][left_color] + cost[mirror_pos][right_color]\n                next_cost = solve(pos + 1, left_color, right_color)\n                result = min(result, current_cost + next_cost)\n        \n        memo[(pos, left_prev, right_prev)] = result\n        return result\n    \n    return solve(0, -1, -1)",
  "model": "claude-sonnet-4",
  "task_description": "You are given an even integer n representing the number of houses arranged in a straight line, and a 2D array cost of size n x 3, where cost[i][j] represents the cost of painting house i with color j + 1.\nThe houses will look beautiful if they satisfy the following conditions:\n\nNo two adjacent houses are painted the same color.\nHouses equidistant from the ends of the row are not painted the same color. For example, if n = 6, houses at positions (0, 5), (1, 4), and (2, 3) are considered equidistant.\n\nReturn the minimum cost to paint the houses such that they look beautiful.\n \nExample 1:\n\nInput: n = 4, cost = [[3,5,7],[6,2,9],[4,8,1],[7,3,5]]\nOutput: 9\nExplanation:\nThe optimal painting sequence is [1, 2, 3, 2] with corresponding costs [3, 2, 1, 3]. This satisfies the following conditions:\n\nNo adjacent houses have the same color.\nHouses at positions 0 and 3 (equidistant from the ends) are not painted the same color (1 != 2).\nHouses at positions 1 and 2 (equidistant from the ends) are not painted the same color (2 != 3).\n\nThe minimum cost to paint the houses so that they look beautiful is 3 + 2 + 1 + 3 = 9.\n\nExample 2:\n\nInput: n = 6, cost = [[2,4,6],[5,3,8],[7,1,9],[4,6,2],[3,5,7],[8,2,4]]\nOutput: 18\nExplanation:\nThe optimal painting sequence is [1, 3, 2, 3, 1, 2] with corresponding costs [2, 8, 1, 2, 3, 2]. This satisfies the following conditions:\n\nNo adjacent houses have the same color.\nHouses at positions 0 and 5 (equidistant from the ends) are not painted the same color (1 != 2).\nHouses at positions 1 and 4 (equidistant from the ends) are not painted the same color (3 != 1).\nHouses at positions 2 and 3 (equidistant from the ends) are not painted the same color (2 != 3).\n\nThe minimum cost to paint the houses so that they look beautiful is 2 + 8 + 1 + 2 + 3 + 2 = 18.\n\n \nConstraints:\n\n2 <= n <= 10^5\nn is even.\ncost.length == n\ncost[i].length == 3\n0 <= cost[i][j] <= 10^5"
}