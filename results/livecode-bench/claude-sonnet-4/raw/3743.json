{
  "task_id": "3743",
  "llm_response": "def maxFreeTime(eventTime, k, startTime, endTime):\n    n = len(startTime)\n    durations = [endTime[i] - startTime[i] for i in range(n)]\n    \n    def canAchieveFreeTime(target):\n        for start in range(n + 1):\n            for end in range(start, n + 1):\n                moves = 0\n                pos = 0\n                \n                for i in range(start):\n                    if startTime[i] < pos:\n                        moves += 1\n                    pos = max(pos, endTime[i])\n                \n                if pos + target > eventTime:\n                    continue\n                \n                pos += target\n                \n                for i in range(end, n):\n                    if startTime[i] < pos:\n                        moves += 1\n                    pos = max(pos, endTime[i])\n                \n                if moves <= k:\n                    return True\n        \n        return False\n    \n    left, right = 0, eventTime\n    result = 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if canAchieveFreeTime(mid):\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result",
  "model": "claude-sonnet-4",
  "task_description": "You are given an integer eventTime denoting the duration of an event, where the event occurs from time t = 0 to time t = eventTime.\nYou are also given two integer arrays startTime and endTime, each of length n. These represent the start and end time of n non-overlapping meetings, where the i^th meeting occurs during the time [startTime[i], endTime[i]].\nYou can reschedule at most k meetings by moving their start time while maintaining the same duration, to maximize the longest continuous period of free time during the event.\nThe relative order of all the meetings should stay the same and they should remain non-overlapping.\nReturn the maximum amount of free time possible after rearranging the meetings.\nNote that the meetings can not be rescheduled to a time outside the event.\n \nExample 1:\n\nInput: eventTime = 5, k = 1, startTime = [1,3], endTime = [2,5]\nOutput: 2\nExplanation:\n\nReschedule the meeting at [1, 2] to [2, 3], leaving no meetings during the time [0, 2].\n\nExample 2:\n\nInput: eventTime = 10, k = 1, startTime = [0,2,9], endTime = [1,4,10]\nOutput: 6\nExplanation:\n\nReschedule the meeting at [2, 4] to [1, 3], leaving no meetings during the time [3, 9].\n\nExample 3:\n\nInput: eventTime = 5, k = 2, startTime = [0,1,2,3,4], endTime = [1,2,3,4,5]\nOutput: 0\nExplanation:\nThere is no time during the event not occupied by meetings.\n\n \nConstraints:\n\n1 <= eventTime <= 10^9\nn == startTime.length == endTime.length\n2 <= n <= 10^5\n1 <= k <= n\n0 <= startTime[i] < endTime[i] <= eventTime\nendTime[i] <= startTime[i + 1] where i lies in the range [0, n - 2]."
}