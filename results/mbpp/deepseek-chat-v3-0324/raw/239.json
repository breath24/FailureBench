{
  "task_id": "Mbpp/239",
  "llm_response": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 0\n    \n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = 2 * j\n            if k <= m:\n                dp[i][j] = dp[i - 1][k]\n                if j + 1 <= m:\n                    dp[i][j] += dp[i][j + 1]\n            else:\n                dp[i][j] = 0\n    \n    total = 0\n    for j in range(1, m + 1):\n        total += dp[n][j]\n    \n    return total",
  "model": "deepseek-chat-v3-0324",
  "task_description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m."
}