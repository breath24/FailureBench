{
  "task_id": "Mbpp/306",
  "llm_response": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= k or k >= n:\n        return 0\n    \n    # Create dp array to store maximum sum of increasing subsequence\n    dp = [0] * n\n    \n    # Initialize first element\n    dp[0] = arr[0]\n    \n    # Fill dp array\n    for j in range(1, n):\n        dp[j] = arr[j]\n        for prev in range(j):\n            if arr[prev] < arr[j] and dp[prev] + arr[j] > dp[j]:\n                dp[j] = dp[prev] + arr[j]\n    \n    # Find maximum sum of increasing subsequence till index i\n    # that can be extended with element at index k\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum = max(max_sum, dp[j])\n    \n    # Return the sum including the kth element\n    return max_sum + arr[k]",
  "model": "qwen3-coder",
  "task_description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i ."
}