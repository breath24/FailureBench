{
  "task_id": "Mbpp/223",
  "llm_response": "def is_majority(arr, n, x):\n    # Find the first occurrence of x\n    def first_occurrence(arr, n, x):\n        low, high = 0, n - 1\n        result = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                result = mid\n                high = mid - 1\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return result\n    \n    # Find the last occurrence of x\n    def last_occurrence(arr, n, x):\n        low, high = 0, n - 1\n        result = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                result = mid\n                low = mid + 1\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return result\n    \n    # Find first and last occurrence\n    first = first_occurrence(arr, n, x)\n    if first == -1:\n        return False\n    \n    last = last_occurrence(arr, n, x)\n    \n    # Calculate count\n    count = last - first + 1\n    \n    # Check if count is more than n/2\n    return count > n // 2",
  "model": "qwen3-coder",
  "task_description": "Write a function to check for majority element in the given sorted array."
}