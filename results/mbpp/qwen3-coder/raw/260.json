{
  "task_id": "Mbpp/260",
  "llm_response": "def newman_prime(n):\n    if n <= 0:\n        return None\n    \n    # Newman-Shanks-Williams primes are primes of the form (1 + (1 + sqrt(2))^n + (1 - sqrt(2))^n) / 2\n    # But there's a simpler recurrence relation for the sequence:\n    # Let S(n) = 2*S(n-1) + S(n-2) with S(0)=1, S(1)=1\n    # The actual primes occur at specific positions, but the sequence A001333 gives us the values\n    # We need to find the nth prime in this sequence\n    \n    # The sequence S(n): 1, 1, 3, 7, 17, 41, 99, 239, 577, 1393, 3363, 8119, 19601, 47321, ...\n    # But we want the primes from this sequence\n    \n    # Actually, Newman-Shanks-Williams primes are the primes in the sequence defined by:\n    # a(0) = 1, a(1) = 1, a(n) = 2*a(n-1) + a(n-2)\n    # Then the primes in this sequence are the Newman-Shanks-Williams primes\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Generate the sequence and find primes\n    a, b = 1, 1\n    primes_found = 0\n    \n    # Check the first two terms\n    if is_prime(a):\n        primes_found += 1\n        if primes_found == n:\n            return a\n    \n    if is_prime(b):\n        primes_found += 1\n        if primes_found == n:\n            return b\n    \n    # Generate more terms\n    while True:\n        next_term = 2 * b + a\n        if is_prime(next_term):\n            primes_found += 1\n            if primes_found == n:\n                return next_term\n        a, b = b, next_term",
  "model": "qwen3-coder",
  "task_description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number."
}