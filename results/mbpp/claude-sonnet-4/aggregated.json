[
  {
    "task_id": "Mbpp/2",
    "llm_response": "def similar_elements(list1, list2):\n    return tuple(set(list1) & set(list2))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the similar elements from the given two tuple lists."
  },
  {
    "task_id": "Mbpp/3",
    "llm_response": "def is_not_prime(n):\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to identify non-prime numbers."
  },
  {
    "task_id": "Mbpp/4",
    "llm_response": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm."
  },
  {
    "task_id": "Mbpp/6",
    "llm_response": "def differ_At_One_Bit_Pos(a, b):\n    xor = a ^ b\n    return xor != 0 and (xor & (xor - 1)) == 0",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the two numbers differ at one bit position only or not."
  },
  {
    "task_id": "Mbpp/7",
    "llm_response": "import re\n\ndef find_char_long(text):\n    words = text.split()\n    return [word for word in words if len(word) >= 4]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find all words which are at least 4 characters long in a string by using regex."
  },
  {
    "task_id": "Mbpp/8",
    "llm_response": "def square_nums(nums):\n    return [num ** 2 for num in nums]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find squares of individual elements in a list using lambda function."
  },
  {
    "task_id": "Mbpp/9",
    "llm_response": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the minimum number of rotations required to get the same string."
  },
  {
    "task_id": "Mbpp/11",
    "llm_response": "def remove_Occ(s, char):\n    if char not in s:\n        return s\n    \n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    \n    result = s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to remove first and last occurrence of a given character from the string."
  },
  {
    "task_id": "Mbpp/12",
    "llm_response": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sort a given matrix in ascending order according to the sum of its rows."
  },
  {
    "task_id": "Mbpp/14",
    "llm_response": "import math\n\ndef find_Volume(length, width, height):\n    return (length * width * height) / 2",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the volume of a triangular prism."
  },
  {
    "task_id": "Mbpp/16",
    "llm_response": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find sequences of lowercase letters joined with an underscore."
  },
  {
    "task_id": "Mbpp/17",
    "llm_response": "def square_perimeter(side_length):\n    return 4 * side_length",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the perimeter of a square."
  },
  {
    "task_id": "Mbpp/18",
    "llm_response": "def remove_dirty_chars(string, chars_to_remove):\n    result = \"\"\n    for char in string:\n        if char not in chars_to_remove:\n            result += char\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to remove characters from the first string which are present in the second string."
  },
  {
    "task_id": "Mbpp/19",
    "llm_response": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find whether a given array of integers contains any duplicate element."
  },
  {
    "task_id": "Mbpp/20",
    "llm_response": "def is_woodall(n):\n    if n <= 0:\n        return False\n    \n    # Check if n+1 is a power of 2\n    temp = n + 1\n    if temp & (temp - 1) != 0:\n        return False\n    \n    # Find k such that 2^k = n+1\n    k = 0\n    while temp > 1:\n        temp //= 2\n        k += 1\n    \n    # Check if n = k * 2^k - 1\n    return n == k * (2 ** k) - 1",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check if the given number is woodball or not."
  },
  {
    "task_id": "Mbpp/56",
    "llm_response": "def reverse_number(n):\n    return int(str(n)[::-1])\n\ndef check(n):\n    reversed_n = reverse_number(n)\n    return n == 2 * reversed_n - 1",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check if a given number is one less than twice its reverse."
  },
  {
    "task_id": "Mbpp/57",
    "llm_response": "from functools import cmp_to_key\n\ndef find_Max_Num(digits):\n    def compare(x, y):\n        if x + y > y + x:\n            return -1\n        elif x + y < y + x:\n            return 1\n        else:\n            return 0\n    \n    str_digits = [str(digit) for digit in digits]\n    str_digits.sort(key=cmp_to_key(compare))\n    result = ''.join(str_digits)\n    return int(result)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the largest number that can be formed with the given digits."
  },
  {
    "task_id": "Mbpp/58",
    "llm_response": "def opposite_Signs(x, y):\n    return (x > 0 and y < 0) or (x < 0 and y > 0)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the given two integers have opposite sign or not."
  },
  {
    "task_id": "Mbpp/59",
    "llm_response": "def is_octagonal(n):\n    return n * (3 * n - 2)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the nth octagonal number."
  },
  {
    "task_id": "Mbpp/61",
    "llm_response": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            length = j - i + 1\n            if digit_sum == length:\n                count += 1\n    \n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count number of substrings with the sum of digits equal to their length."
  },
  {
    "task_id": "Mbpp/62",
    "llm_response": "def smallest_num(lst):\n    return min(lst)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find smallest number in a list."
  },
  {
    "task_id": "Mbpp/63",
    "llm_response": "def max_difference(tuple_list):\n    max_diff = 0\n    for pair in tuple_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the maximum difference between available pairs in the given tuple list."
  },
  {
    "task_id": "Mbpp/64",
    "llm_response": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sort a list of tuples using lambda."
  },
  {
    "task_id": "Mbpp/65",
    "llm_response": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a function of recursion list sum."
  },
  {
    "task_id": "Mbpp/66",
    "llm_response": "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count positive numbers in a list."
  },
  {
    "task_id": "Mbpp/67",
    "llm_response": "def bell_number(n):\n    if n == 0:\n        return 1\n    \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the number of ways to partition a set of bell numbers."
  },
  {
    "task_id": "Mbpp/68",
    "llm_response": "def is_Monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            decreasing = False\n        if arr[i] < arr[i-1]:\n            increasing = False\n    \n    return increasing or decreasing",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the given array is monotonic or not."
  },
  {
    "task_id": "Mbpp/69",
    "llm_response": "def is_sublist(main_list, sub_list):\n    if not sub_list:\n        return True\n    if len(sub_list) > len(main_list):\n        return False\n    \n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i + len(sub_list)] == sub_list:\n            return True\n    return False",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether a list contains the given sublist or not."
  },
  {
    "task_id": "Mbpp/70",
    "llm_response": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    return all(len(t) == first_length for t in tuples_list)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find whether all the given tuples have equal length or not."
  },
  {
    "task_id": "Mbpp/71",
    "llm_response": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n    \n    return arr",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sort a list of elements using comb sort."
  },
  {
    "task_id": "Mbpp/72",
    "llm_response": "def dif_Square(n):\n    if n % 4 == 2:\n        return False\n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the given number can be represented as difference of two squares or not."
  },
  {
    "task_id": "Mbpp/74",
    "llm_response": "def is_samepatterns(colors, pattern):\n    if len(colors) != len(pattern):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for i in range(len(colors)):\n        color = colors[i]\n        pat = pattern[i]\n        \n        if color in color_to_pattern:\n            if color_to_pattern[color] != pat:\n                return False\n        else:\n            color_to_pattern[color] = pat\n            \n        if pat in pattern_to_color:\n            if pattern_to_color[pat] != color:\n                return False\n        else:\n            pattern_to_color[pat] = color\n    \n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether it follows the sequence given in the patterns array."
  },
  {
    "task_id": "Mbpp/75",
    "llm_response": "def find_tuples(tuple_list, k):\n    result = []\n    for tuple_item in tuple_list:\n        if all(element % k == 0 for element in tuple_item):\n            result.append(tuple_item)\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples."
  },
  {
    "task_id": "Mbpp/77",
    "llm_response": "def is_Diff(n):\n    n = abs(n)\n    if n < 11:\n        return n == 0\n    \n    odd_sum = 0\n    even_sum = 0\n    position = 0\n    \n    while n > 0:\n        digit = n % 10\n        if position % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n //= 10\n        position += 1\n    \n    diff = abs(odd_sum - even_sum)\n    return diff % 11 == 0",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the difference between sum of even and odd digits."
  },
  {
    "task_id": "Mbpp/79",
    "llm_response": "def word_len(word):\n    return len(word) % 2 == 1",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the length of the word is odd or not."
  },
  {
    "task_id": "Mbpp/80",
    "llm_response": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the nth tetrahedral number."
  },
  {
    "task_id": "Mbpp/82",
    "llm_response": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the volume of a sphere."
  },
  {
    "task_id": "Mbpp/84",
    "llm_response": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    \n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    \n    return dp[n]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the n-th number in newman conway sequence."
  },
  {
    "task_id": "Mbpp/85",
    "llm_response": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r * r",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the surface area of a sphere."
  },
  {
    "task_id": "Mbpp/86",
    "llm_response": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find nth centered hexagonal number."
  },
  {
    "task_id": "Mbpp/87",
    "llm_response": "def merge_dictionaries_three(dict1, dict2, dict3):\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to merge three dictionaries into a single expression."
  },
  {
    "task_id": "Mbpp/88",
    "llm_response": "from collections import Counter\n\ndef freq_count(lst):\n    return dict(Counter(lst))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to get the frequency of the elements in a list."
  },
  {
    "task_id": "Mbpp/89",
    "llm_response": "def closest_num(n):\n    return n - 1",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the closest smaller number than n."
  },
  {
    "task_id": "Mbpp/90",
    "llm_response": "def len_log(words):\n    return max(len(word) for word in words)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the length of the longest word."
  },
  {
    "task_id": "Mbpp/91",
    "llm_response": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check if a substring is present in a given list of string values."
  },
  {
    "task_id": "Mbpp/92",
    "llm_response": "def is_undulating(n):\n    s = str(n)\n    if len(s) < 3:\n        return False\n    \n    first_digit = s[0]\n    second_digit = s[1]\n    \n    if first_digit == second_digit:\n        return False\n    \n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first_digit:\n                return False\n        else:\n            if s[i] != second_digit:\n                return False\n    \n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether the given number is undulating or not."
  },
  {
    "task_id": "Mbpp/93",
    "llm_response": "def power(a, b):\n    return a ** b",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to calculate the value of 'a' to the power 'b'."
  },
  {
    "task_id": "Mbpp/94",
    "llm_response": "def index_minimum(tuples_list):\n    return min(tuples_list, key=lambda x: x[1])[0]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to extract the index minimum value record from the given tuples."
  },
  {
    "task_id": "Mbpp/95",
    "llm_response": "def Find_Min_Length(lists):\n    return min(len(lst) for lst in lists)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the minimum length of sublist."
  },
  {
    "task_id": "Mbpp/96",
    "llm_response": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the number of divisors of a given integer."
  },
  {
    "task_id": "Mbpp/97",
    "llm_response": "from collections import Counter\n\ndef frequency_lists(lists):\n    flattened = [item for sublist in lists for item in sublist]\n    return dict(Counter(flattened))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find frequency count of list of lists."
  },
  {
    "task_id": "Mbpp/98",
    "llm_response": "import math\n\ndef multiply_num(numbers):\n    if not numbers:\n        return 0\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return product / len(numbers)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to multiply all the numbers in a list and divide with the length of the list."
  },
  {
    "task_id": "Mbpp/99",
    "llm_response": "def decimal_to_binary(decimal_num):\n    if decimal_num == 0:\n        return '0'\n    \n    binary = ''\n    while decimal_num > 0:\n        binary = str(decimal_num % 2) + binary\n        decimal_num = decimal_num // 2\n    \n    return binary",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert the given decimal number to its binary equivalent."
  },
  {
    "task_id": "Mbpp/100",
    "llm_response": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        s = str(num)\n        return s == s[::-1]\n    \n    num = n + 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the next smallest palindrome of a specified number."
  },
  {
    "task_id": "Mbpp/101",
    "llm_response": "def kth_element(arr, k):\n    return arr[k-1]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the kth element in the given array."
  },
  {
    "task_id": "Mbpp/102",
    "llm_response": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(word.capitalize() for word in components)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert snake case string to camel case string."
  },
  {
    "task_id": "Mbpp/103",
    "llm_response": "def eulerian_num(n, m):\n    if m == 0:\n        return 1\n    if m >= n:\n        return 0\n    \n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    \n    for i in range(n + 1):\n        dp[i][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(1, min(i, m + 1)):\n            dp[i][j] = (j + 1) * dp[i - 1][j] + (i - j) * dp[i - 1][j - 1]\n    \n    return dp[n][m]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find eulerian number a(n, m)."
  },
  {
    "task_id": "Mbpp/104",
    "llm_response": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sort each sublist of strings in a given list of lists using lambda function."
  },
  {
    "task_id": "Mbpp/105",
    "llm_response": "def count(lst):\n    return sum(lst)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count true booleans in the given list."
  },
  {
    "task_id": "Mbpp/106",
    "llm_response": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to add the given list to the given tuples."
  },
  {
    "task_id": "Mbpp/108",
    "llm_response": "def merge_sorted_list(list1, list2, list3):\n    merged = list1 + list2 + list3\n    return sorted(merged)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm."
  },
  {
    "task_id": "Mbpp/109",
    "llm_response": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the count of rotations of a binary string with odd value."
  },
  {
    "task_id": "Mbpp/111",
    "llm_response": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common = common.intersection(set(lst))\n    \n    return list(common)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item"
  },
  {
    "task_id": "Mbpp/113",
    "llm_response": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check if a string represents an integer or not."
  },
  {
    "task_id": "Mbpp/116",
    "llm_response": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert a given tuple of positive integers into an integer."
  },
  {
    "task_id": "Mbpp/118",
    "llm_response": "def string_to_list(string):\n    return string.split(' ')",
    "model": "claude-sonnet-4",
    "task_description": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."
  },
  {
    "task_id": "Mbpp/119",
    "llm_response": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if mid % 2 == 1:\n            mid -= 1\n        \n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the element that appears only once in a sorted array."
  },
  {
    "task_id": "Mbpp/120",
    "llm_response": "def max_product_tuple(tuples_list):\n    max_product = 0\n    for tuple_pair in tuples_list:\n        product = abs(tuple_pair[0] * tuple_pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the maximum product from the pairs of tuples within a given list."
  },
  {
    "task_id": "Mbpp/123",
    "llm_response": "def sum_of_divisors(n):\n    if n <= 1:\n        return 0\n    divisors_sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        sum_i = sum_of_divisors(i)\n        if sum_i != i and sum_of_divisors(sum_i) == i:\n            amicable_sum += i\n    return amicable_sum",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sum all amicable numbers from 1 to a specified number."
  },
  {
    "task_id": "Mbpp/124",
    "llm_response": "import math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to get the angle of a complex number."
  },
  {
    "task_id": "Mbpp/125",
    "llm_response": "def find_length(s):\n    max_diff = 0\n    n = len(s)\n    \n    for i in range(n):\n        zeros = 0\n        ones = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            max_diff = max(max_diff, abs(zeros - ones))\n    \n    return max_diff",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string."
  },
  {
    "task_id": "Mbpp/126",
    "llm_response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    g = gcd(a, b)\n    total = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            total += i\n            if i != g // i:\n                total += g // i\n    return total\n\ndef sum(a, b):\n    return sum_common_divisors(a, b)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of common divisors of two given numbers."
  },
  {
    "task_id": "Mbpp/127",
    "llm_response": "def multiply_int(a, b):\n    return a * b",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to multiply two integers without using the * operator in python."
  },
  {
    "task_id": "Mbpp/128",
    "llm_response": "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to shortlist words that are longer than n from a given list of words."
  },
  {
    "task_id": "Mbpp/129",
    "llm_response": "def magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0 or len(matrix[0]) != n:\n        return False\n    \n    magic_sum = sum(matrix[0])\n    \n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    if sum(matrix[i][n-1-i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to calculate magic square."
  },
  {
    "task_id": "Mbpp/130",
    "llm_response": "from collections import Counter\n\ndef max_occurrences(lst):\n    counter = Counter(lst)\n    return counter.most_common(1)[0][0]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the item with maximum frequency in a given list."
  },
  {
    "task_id": "Mbpp/131",
    "llm_response": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        while left < right and s_list[left] not in vowels:\n            left += 1\n        while left < right and s_list[right] not in vowels:\n            right -= 1\n        \n        if left < right:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n    \n    return ''.join(s_list)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to reverse only the vowels of a given string."
  },
  {
    "task_id": "Mbpp/132",
    "llm_response": "def tup_string(tup):\n    return ''.join(tup)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert tuple to a string."
  },
  {
    "task_id": "Mbpp/133",
    "llm_response": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function."
  },
  {
    "task_id": "Mbpp/135",
    "llm_response": "def hexagonal_num(n):\n    return n * (2 * n - 1)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the nth hexagonal number."
  },
  {
    "task_id": "Mbpp/137",
    "llm_response": "import math\n\ndef zero_count(arr):\n    if not arr:\n        return 0\n    \n    zeros = arr.count(0)\n    non_zeros = len(arr) - zeros\n    \n    if non_zeros == 0:\n        return float('inf')\n    \n    return zeros / non_zeros",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the ration of zeroes in an array of integers."
  },
  {
    "task_id": "Mbpp/138",
    "llm_response": "def is_Sum_Of_Powers_Of_Two(n):\n    return n > 0 and (n & (n - 1)) == 0 or bin(n).count('1') >= 1",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not."
  },
  {
    "task_id": "Mbpp/139",
    "llm_response": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the circumference of a circle."
  },
  {
    "task_id": "Mbpp/140",
    "llm_response": "def extract_singly(lst):\n    result = []\n    for item in lst:\n        result.extend(item)\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to extract elements that occur singly in the given tuple list."
  },
  {
    "task_id": "Mbpp/141",
    "llm_response": "def pancake_sort(arr):\n    def flip(arr, i):\n        start = 0\n        while start < i:\n            arr[start], arr[i] = arr[i], arr[start]\n            start += 1\n            i -= 1\n    \n    n = len(arr)\n    curr_size = n\n    \n    while curr_size > 1:\n        max_idx = arr.index(max(arr[:curr_size]))\n        \n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                flip(arr, max_idx)\n            flip(arr, curr_size - 1)\n        \n        curr_size -= 1\n    \n    return arr",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sort a list of elements using pancake sort."
  },
  {
    "task_id": "Mbpp/142",
    "llm_response": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to count the same pair in three given lists."
  },
  {
    "task_id": "Mbpp/145",
    "llm_response": "def max_Abs_Diff(arr):\n    return max(arr) - min(arr)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the maximum difference between any two elements in a given array."
  },
  {
    "task_id": "Mbpp/160",
    "llm_response": "import math\n\ndef find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n    \n    gcd, x, y = extended_gcd(a, b)\n    \n    if n % gcd != 0:\n        return None\n    \n    x *= n // gcd\n    y *= n // gcd\n    \n    return (x, y)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find x and y that satisfies ax + by = n."
  },
  {
    "task_id": "Mbpp/161",
    "llm_response": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to remove all elements from a given list present in another list."
  },
  {
    "task_id": "Mbpp/162",
    "llm_response": "def sum_series(n):\n    total = 0\n    i = 0\n    while i <= n // 2:\n        term = n - 2 * i\n        if term <= 0:\n            break\n        total += term\n        i += 1\n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0)."
  },
  {
    "task_id": "Mbpp/165",
    "llm_response": "def count_char_position(s):\n    count = 0\n    s = s.lower()\n    for i, char in enumerate(s):\n        if char.isalpha() and ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet."
  },
  {
    "task_id": "Mbpp/166",
    "llm_response": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count the pairs with xor as an even number."
  },
  {
    "task_id": "Mbpp/167",
    "llm_response": "import math\n\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    if n & (n - 1) == 0:\n        return n\n    return 1 << (n.bit_length())",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find smallest power of 2 greater than or equal to n."
  },
  {
    "task_id": "Mbpp/168",
    "llm_response": "def frequency(lst, num):\n    return lst.count(num)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the frequency of a number in a given array."
  },
  {
    "task_id": "Mbpp/170",
    "llm_response": "def sum_range_list(lst, start_idx, end_idx):\n    return sum(lst[start_idx:end_idx+1])",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find sum of the numbers in a list between the indices of a specified range."
  },
  {
    "task_id": "Mbpp/171",
    "llm_response": "def perimeter_pentagon(side_length):\n    return 5 * side_length",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the perimeter of a pentagon."
  },
  {
    "task_id": "Mbpp/172",
    "llm_response": "def count_occurance(string):\n    return string.count('std')",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item"
  },
  {
    "task_id": "Mbpp/222",
    "llm_response": "def check_type(tup):\n    if len(tup) == 0:\n        return True\n    first_type = type(tup[0])\n    return all(type(element) == first_type for element in tup)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check if all the elements in tuple have same data type or not."
  },
  {
    "task_id": "Mbpp/223",
    "llm_response": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n // 2",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check for majority element in the given sorted array."
  },
  {
    "task_id": "Mbpp/224",
    "llm_response": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count set bits of a given number."
  },
  {
    "task_id": "Mbpp/226",
    "llm_response": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to remove the characters which have odd index values of a given string."
  },
  {
    "task_id": "Mbpp/227",
    "llm_response": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find minimum of three numbers."
  },
  {
    "task_id": "Mbpp/230",
    "llm_response": "def replace_blank(string, character):\n    return string.replace(' ', character)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to replace blank spaces with any character in a string."
  },
  {
    "task_id": "Mbpp/232",
    "llm_response": "import heapq\n\ndef larg_nnum(lst, n):\n    return heapq.nlargest(n, lst)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to get the n largest items from a dataset."
  },
  {
    "task_id": "Mbpp/233",
    "llm_response": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the lateral surface area of a cylinder."
  },
  {
    "task_id": "Mbpp/234",
    "llm_response": "def volume_cube(side_length):\n    return side_length ** 3",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the volume of a cube."
  },
  {
    "task_id": "Mbpp/235",
    "llm_response": "def even_bit_set_number(n):\n    result = n\n    position = 0\n    while (1 << position) <= n or position < 32:\n        if position % 2 == 0:\n            result |= (1 << position)\n        position += 1\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to set all even bits of a given number."
  },
  {
    "task_id": "Mbpp/237",
    "llm_response": "def check_occurences(tuples_list):\n    result = {}\n    for tup in tuples_list:\n        normalized = tuple(sorted(tup))\n        result[normalized] = result.get(normalized, 0) + 1\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check the occurrences of records which occur similar times in the given tuples."
  },
  {
    "task_id": "Mbpp/238",
    "llm_response": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count number of non-empty substrings of a given string."
  },
  {
    "task_id": "Mbpp/239",
    "llm_response": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    \n    dp = {}\n    \n    def count_sequences(length, last_value):\n        if length == 0:\n            return 1\n        if (length, last_value) in dp:\n            return dp[(length, last_value)]\n        \n        total = 0\n        min_next = 2 * last_value if last_value > 0 else 1\n        \n        for next_val in range(min_next, m + 1):\n            total += count_sequences(length - 1, next_val)\n        \n        dp[(length, last_value)] = total\n        return total\n    \n    result = 0\n    for first_val in range(1, m + 1):\n        result += count_sequences(n - 1, first_val)\n    \n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m."
  },
  {
    "task_id": "Mbpp/240",
    "llm_response": "def replace_list(list1, list2):\n    return list1[:-1] + list2",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to replace the last element of the list with another list."
  },
  {
    "task_id": "Mbpp/242",
    "llm_response": "def count_charac(string):\n    return len(string)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to count total characters in a string."
  },
  {
    "task_id": "Mbpp/244",
    "llm_response": "import math\n\ndef next_Perfect_Square(n):\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n * sqrt_n == n:\n        return (sqrt_n + 1) ** 2\n    else:\n        return (sqrt_n + 1) ** 2",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the next perfect square greater than a given number."
  },
  {
    "task_id": "Mbpp/245",
    "llm_response": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    # Calculate increasing subsequence sum ending at each index\n    inc = [0] * n\n    inc[0] = arr[0]\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    # Calculate decreasing subsequence sum starting at each index\n    dec = [0] * n\n    dec[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    # Find maximum sum by combining increasing and decreasing parts\n    max_sum_val = 0\n    for i in range(n):\n        max_sum_val = max(max_sum_val, inc[i] + dec[i] - arr[i])\n    \n    return max_sum_val",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array."
  },
  {
    "task_id": "Mbpp/247",
    "llm_response": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                if length == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the longest palindromic subsequence in the given string."
  },
  {
    "task_id": "Mbpp/250",
    "llm_response": "def count_X(tuple_input, element):\n    return tuple_input.count(element)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count the occcurences of an element in a tuple."
  },
  {
    "task_id": "Mbpp/251",
    "llm_response": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to insert an element before each element of a list."
  },
  {
    "task_id": "Mbpp/252",
    "llm_response": "import math\n\ndef convert(z):\n    if isinstance(z, (int, float)):\n        z = complex(z)\n    \n    r = abs(z)\n    theta = math.atan2(z.imag, z.real)\n    \n    return (r, theta)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to convert complex numbers to polar coordinates."
  },
  {
    "task_id": "Mbpp/253",
    "llm_response": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int) and not isinstance(element, bool):\n            count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count integers from a given list."
  },
  {
    "task_id": "Mbpp/255",
    "llm_response": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    return list(combinations_with_replacement(lst, n))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."
  },
  {
    "task_id": "Mbpp/256",
    "llm_response": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count the number of prime numbers less than a given non-negative number."
  },
  {
    "task_id": "Mbpp/257",
    "llm_response": "def swap_numbers(a, b):\n    return (b, a)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to swap two numbers."
  },
  {
    "task_id": "Mbpp/259",
    "llm_response": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        max_tuple = tuple(max(tuple1[i][j], tuple2[i][j]) for j in range(len(tuple1[i])))\n        result.append(max_tuple)\n    return tuple(result)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to maximize the given two tuples."
  },
  {
    "task_id": "Mbpp/260",
    "llm_response": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    def nsw_sequence(k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            a, b = 1, 1\n            for i in range(2, k + 1):\n                a, b = b, 2 * b + a\n            return b\n    \n    count = 0\n    k = 1\n    while count < n:\n        nsw_num = nsw_sequence(k)\n        if is_prime(nsw_num):\n            count += 1\n            if count == n:\n                return nsw_num\n        k += 1",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number."
  },
  {
    "task_id": "Mbpp/261",
    "llm_response": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to perform mathematical division operation across the given tuples."
  },
  {
    "task_id": "Mbpp/262",
    "llm_response": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to split a given list into two parts where the length of the first part of the list is given."
  },
  {
    "task_id": "Mbpp/264",
    "llm_response": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to calculate a dog's age in dog's years."
  },
  {
    "task_id": "Mbpp/265",
    "llm_response": "def list_split(lst, n):\n    result = []\n    for i in range(n):\n        result.append([lst[j] for j in range(i, len(lst), n)])\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to split a list for every nth element."
  },
  {
    "task_id": "Mbpp/266",
    "llm_response": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the lateral surface area of a cube."
  },
  {
    "task_id": "Mbpp/267",
    "llm_response": "def square_Sum(n):\n    return sum((2*i - 1)**2 for i in range(1, n + 1))",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of squares of first n odd natural numbers."
  },
  {
    "task_id": "Mbpp/268",
    "llm_response": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the n'th star number."
  },
  {
    "task_id": "Mbpp/269",
    "llm_response": "def ascii_value(char):\n    return ord(char)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the ascii value of a character."
  },
  {
    "task_id": "Mbpp/270",
    "llm_response": "def sum_even_and_even_index(lst):\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of even numbers at even positions."
  },
  {
    "task_id": "Mbpp/271",
    "llm_response": "def even_Power_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_num = 2 * i\n        total += even_num ** 5\n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of fifth power of first n even natural numbers."
  },
  {
    "task_id": "Mbpp/272",
    "llm_response": "def rear_extract(tuple_list):\n    return [tuple_item[-1] for tuple_item in tuple_list]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to perfom the rear element extraction from list of tuples records."
  },
  {
    "task_id": "Mbpp/273",
    "llm_response": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to substract the contents of one tuple with corresponding index of other tuple."
  },
  {
    "task_id": "Mbpp/274",
    "llm_response": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    total = 0\n    for i in range(0, n + 1, 2):\n        total += math.comb(n, i)\n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find sum of even index binomial coefficients."
  },
  {
    "task_id": "Mbpp/276",
    "llm_response": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the volume of a cylinder."
  },
  {
    "task_id": "Mbpp/277",
    "llm_response": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to filter a dictionary based on values."
  },
  {
    "task_id": "Mbpp/278",
    "llm_response": "def count_first_elements(tup):\n    for i, element in enumerate(tup):\n        if isinstance(element, tuple):\n            return i\n    return len(tup)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the element count that occurs before the record in the given tuple."
  },
  {
    "task_id": "Mbpp/279",
    "llm_response": "def is_num_decagonal(n):\n    return n * (4 * n - 3)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the nth decagonal number."
  },
  {
    "task_id": "Mbpp/280",
    "llm_response": "def sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to search an element in the given array by using sequential search."
  },
  {
    "task_id": "Mbpp/281",
    "llm_response": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check if the elements of a given list are unique or not."
  },
  {
    "task_id": "Mbpp/282",
    "llm_response": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to substaract two lists using map and lambda function."
  },
  {
    "task_id": "Mbpp/283",
    "llm_response": "def validate(n):\n    str_n = str(abs(n))\n    digit_count = {}\n    \n    for digit in str_n:\n        digit_count[digit] = digit_count.get(digit, 0) + 1\n    \n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself."
  },
  {
    "task_id": "Mbpp/284",
    "llm_response": "def check_element(lst, element):\n    return all(item == element for item in lst)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether all items of a list are equal to a given string."
  },
  {
    "task_id": "Mbpp/285",
    "llm_response": "import re\n\ndef text_match_two_three(text):\n    pattern = r'abb{1,2}'\n    return bool(re.search(pattern, text))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function that matches a string that has an a followed by two to three 'b'."
  },
  {
    "task_id": "Mbpp/286",
    "llm_response": "def max_sub_array_sum_repeated(arr, n, k):\n    if k == 1:\n        max_ending_here = max_so_far = arr[0]\n        for i in range(1, n):\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    \n    # Calculate prefix sum, suffix sum, total sum, and max subarray sum for single array\n    prefix_sum = [0] * n\n    suffix_sum = [0] * n\n    prefix_sum[0] = arr[0]\n    suffix_sum[n-1] = arr[n-1]\n    \n    for i in range(1, n):\n        prefix_sum[i] = max(prefix_sum[i-1] + arr[i], arr[i])\n    \n    for i in range(n-2, -1, -1):\n        suffix_sum[i] = max(suffix_sum[i+1] + arr[i], arr[i])\n    \n    max_prefix = max(prefix_sum)\n    max_suffix = max(suffix_sum)\n    \n    total_sum = sum(arr)\n    \n    # Max subarray sum in single array\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    single_max = max_so_far\n    \n    if total_sum > 0:\n        # If total sum is positive, we can benefit from middle arrays\n        result = max(single_max, max_suffix + max_prefix + (k-2) * total_sum)\n    else:\n        # If total sum is non-positive, best is either single array max or suffix + prefix\n        result = max(single_max, max_suffix + max_prefix)\n    \n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times."
  },
  {
    "task_id": "Mbpp/287",
    "llm_response": "def square_Sum(n):\n    return sum((2*i)**2 for i in range(1, n+1))",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of squares of first n even natural numbers."
  },
  {
    "task_id": "Mbpp/290",
    "llm_response": "def max_length(lists):\n    max_len = 0\n    max_list = []\n    \n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the list of lists with maximum length."
  },
  {
    "task_id": "Mbpp/292",
    "llm_response": "def find(a, b):\n    return a // b",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find quotient of two numbers."
  },
  {
    "task_id": "Mbpp/293",
    "llm_response": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the third side of a right angled triangle."
  },
  {
    "task_id": "Mbpp/294",
    "llm_response": "def max_val(lst):\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    if not numeric_values:\n        return None\n    return max(numeric_values)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the maximum value in a given heterogeneous list."
  },
  {
    "task_id": "Mbpp/296",
    "llm_response": "def get_Inv_Count(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count inversions in an array."
  },
  {
    "task_id": "Mbpp/297",
    "llm_response": "def flatten_list(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to flatten a given nested list structure."
  },
  {
    "task_id": "Mbpp/299",
    "llm_response": "from collections import defaultdict\n\ndef max_aggregate(tuples_list):\n    aggregates = defaultdict(int)\n    \n    for name, value in tuples_list:\n        aggregates[name] += value\n    \n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to calculate the maximum aggregate from the list of tuples."
  },
  {
    "task_id": "Mbpp/300",
    "llm_response": "import math\n\ndef count_binary_seq(n):\n    def binomial(n, k):\n        if k > n or k < 0:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n    \n    total = 0\n    for i in range(n + 1):\n        total += binomial(n, i) * binomial(n, i)\n    \n    return float(total)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits."
  },
  {
    "task_id": "Mbpp/301",
    "llm_response": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the depth of a dictionary."
  },
  {
    "task_id": "Mbpp/305",
    "llm_response": "import re\n\ndef start_withp(lst):\n    p_words = []\n    for item in lst:\n        words = item.split()\n        for word in words:\n            if word.lower().startswith('p'):\n                p_words.append(word)\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    return tuple(p_words) if p_words else ()",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to match two words from a list of words starting with letter 'p'."
  },
  {
    "task_id": "Mbpp/306",
    "llm_response": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= k or k >= n:\n        return 0\n    \n    # dp[j] represents maximum sum of increasing subsequence ending at index j\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    # Fill dp array for prefix until index i\n    for j in range(1, i + 1):\n        dp[j] = arr[j]\n        for prev in range(j):\n            if arr[prev] < arr[j]:\n                dp[j] = max(dp[j], dp[prev] + arr[j])\n    \n    # Find maximum sum ending at or before index i\n    max_prefix_sum = max(dp[:i+1])\n    \n    # Find the best subsequence ending at index i that can be extended to k\n    best_sum_at_i = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            best_sum_at_i = max(best_sum_at_i, dp[j])\n    \n    # Return the sum including element at k\n    return best_sum_at_i + arr[k]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i ."
  },
  {
    "task_id": "Mbpp/308",
    "llm_response": "import heapq\n\ndef large_product(nums1, nums2, k):\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    \n    products.sort(reverse=True)\n    return products[:k]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the specified number of largest products from two given lists."
  },
  {
    "task_id": "Mbpp/309",
    "llm_response": "def maximum(a, b):\n    return max(a, b)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the maximum of two numbers."
  },
  {
    "task_id": "Mbpp/310",
    "llm_response": "def string_to_tuple(string):\n    return tuple(char for char in string if char != ' ')",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert a given string to a tuple."
  },
  {
    "task_id": "Mbpp/311",
    "llm_response": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    \n    temp = n\n    bit_position = 0\n    \n    while temp > 0:\n        temp >>= 1\n        bit_position += 1\n    \n    for i in range(bit_position - 1, -1, -1):\n        if (n & (1 << i)) == 0:\n            return n | (1 << i)\n    \n    return n | (1 << bit_position)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to set the left most unset bit."
  },
  {
    "task_id": "Mbpp/312",
    "llm_response": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the volume of a cone."
  },
  {
    "task_id": "Mbpp/388",
    "llm_response": "import math\n\ndef highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    return 2 ** int(math.log2(n))",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the highest power of 2 that is less than or equal to n."
  },
  {
    "task_id": "Mbpp/389",
    "llm_response": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return b",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the n'th lucas number."
  },
  {
    "task_id": "Mbpp/390",
    "llm_response": "def add_string(list_,string):\n    return [string.format(i) for i in list_]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to insert a given string at the beginning of all items in a list."
  },
  {
    "task_id": "Mbpp/391",
    "llm_response": "def convert_list_dictionary(list1, list2, list3):\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert more than one list to nested dictionary."
  },
  {
    "task_id": "Mbpp/392",
    "llm_response": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(num):\n        if num in memo:\n            return memo[num]\n        \n        if num == 0:\n            return 0\n        \n        divided_sum = helper(num // 2) + helper(num // 3) + helper(num // 4) + helper(num // 5)\n        result = max(divided_sum, num)\n        memo[num] = result\n        return result\n    \n    return helper(n)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."
  },
  {
    "task_id": "Mbpp/394",
    "llm_response": "def check_distinct(tuple_input):\n    return len(tuple_input) == len(set(tuple_input))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check if given tuple is distinct or not."
  },
  {
    "task_id": "Mbpp/395",
    "llm_response": "from collections import Counter\n\ndef first_non_repeating_character(s):\n    char_count = Counter(s)\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the first non-repeated character in a given string."
  },
  {
    "task_id": "Mbpp/397",
    "llm_response": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the median of three specific numbers."
  },
  {
    "task_id": "Mbpp/398",
    "llm_response": "def sum_of_digits(numbers):\n    total = 0\n    for num in numbers:\n        while num > 0:\n            total += num % 10\n            num //= 10\n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to compute the sum of digits of each number of a given list."
  },
  {
    "task_id": "Mbpp/404",
    "llm_response": "def minimum(a, b):\n    return min(a, b)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the minimum of two numbers."
  },
  {
    "task_id": "Mbpp/405",
    "llm_response": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether an element exists within a tuple."
  },
  {
    "task_id": "Mbpp/406",
    "llm_response": "def find_Parity(n):\n    return n % 2 == 1",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the parity of a given number."
  },
  {
    "task_id": "Mbpp/409",
    "llm_response": "def min_product_tuple(tuples_list):\n    return min(x * y for x, y in tuples_list)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the minimum product from the pairs of tuples within a given list."
  },
  {
    "task_id": "Mbpp/410",
    "llm_response": "def min_val(lst):\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    if not numeric_values:\n        return None\n    return min(numeric_values)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the minimum value in a given heterogeneous list."
  },
  {
    "task_id": "Mbpp/412",
    "llm_response": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to remove odd numbers from a given list."
  },
  {
    "task_id": "Mbpp/413",
    "llm_response": "def extract_nth_element(tuples_list, n):\n    return [tuple_item[n] for tuple_item in tuples_list]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to extract the nth element from a given list of tuples."
  },
  {
    "task_id": "Mbpp/414",
    "llm_response": "def overlapping(seq1, seq2):\n    return bool(set(seq1) & set(seq2))",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the value exists in a sequence or not."
  },
  {
    "task_id": "Mbpp/415",
    "llm_response": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1)\n    else:\n        return (min2, min1)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find a pair with highest product from a given array of integers."
  },
  {
    "task_id": "Mbpp/418",
    "llm_response": "def Find_Max(lst):\n    return max(lst, key=len)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sublist having maximum length."
  },
  {
    "task_id": "Mbpp/419",
    "llm_response": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."
  },
  {
    "task_id": "Mbpp/420",
    "llm_response": "def cube_Sum(n):\n    total = 0\n    even_num = 2\n    for i in range(n):\n        total += even_num ** 3\n        even_num += 2\n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the cube sum of first n even natural numbers."
  },
  {
    "task_id": "Mbpp/421",
    "llm_response": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(item) for item in tup)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to concatenate each element of tuple by the delimiter."
  },
  {
    "task_id": "Mbpp/422",
    "llm_response": "def find_Average_Of_Cube(n):\n    total = sum(i**3 for i in range(1, n+1))\n    return total / n",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the average of cubes of first n natural numbers."
  },
  {
    "task_id": "Mbpp/424",
    "llm_response": "def extract_rear(tuple_of_strings):\n    return [string[-1] for string in tuple_of_strings]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to extract only the rear index element of each string in the given tuple."
  },
  {
    "task_id": "Mbpp/425",
    "llm_response": "def count_element_in_list(list_of_lists, element):\n    count = 0\n    for sublist in list_of_lists:\n        if element in sublist:\n            count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to count the number of sublists containing a particular element."
  },
  {
    "task_id": "Mbpp/426",
    "llm_response": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 == 1]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to filter odd numbers using lambda function."
  },
  {
    "task_id": "Mbpp/427",
    "llm_response": "from datetime import datetime\n\ndef change_date_format(date_string):\n    date_obj = datetime.strptime(date_string, \"%Y-%m-%d\")\n    return date_obj.strftime(\"%d-%m-%Y\")",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex."
  },
  {
    "task_id": "Mbpp/428",
    "llm_response": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    \n    return arr",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sort the given array by using shell sort."
  },
  {
    "task_id": "Mbpp/429",
    "llm_response": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to extract the elementwise and tuples from the given two tuples."
  },
  {
    "task_id": "Mbpp/430",
    "llm_response": "def parabola_directrix(a, h, k):\n    return k - 1/(4*a)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the directrix of a parabola."
  },
  {
    "task_id": "Mbpp/432",
    "llm_response": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the median of a trapezium."
  },
  {
    "task_id": "Mbpp/433",
    "llm_response": "def check_greater(arr, num):\n    return all(num > element for element in arr)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether the entered number is greater than the elements of the given array."
  },
  {
    "task_id": "Mbpp/435",
    "llm_response": "def last_Digit(n):\n    return n % 10",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the last digit of a given number."
  },
  {
    "task_id": "Mbpp/436",
    "llm_response": "def neg_nos(lst):\n    return [x for x in lst if x < 0]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to print negative numbers in a list."
  },
  {
    "task_id": "Mbpp/437",
    "llm_response": "def remove_odd(string):\n    return ''.join([char for i, char in enumerate(string) if i % 2 == 1])",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to remove odd characters in a string."
  },
  {
    "task_id": "Mbpp/439",
    "llm_response": "def multiple_to_single(lst):\n    return int(''.join(map(str, lst)))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert a list of multiple integers into a single integer."
  },
  {
    "task_id": "Mbpp/440",
    "llm_response": "import re\n\ndef find_adverb_position(sentence):\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, sentence)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return None",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find all adverbs and their positions in a given sentence."
  },
  {
    "task_id": "Mbpp/441",
    "llm_response": "def surfacearea_cube(size):\n    return 6 * size * size",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the surface area of a cube."
  },
  {
    "task_id": "Mbpp/445",
    "llm_response": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples."
  },
  {
    "task_id": "Mbpp/446",
    "llm_response": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count the occurence of all elements of list in a tuple."
  },
  {
    "task_id": "Mbpp/447",
    "llm_response": "def cube_nums(nums):\n    return [num ** 3 for num in nums]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find cubes of individual elements in a list using lambda function."
  },
  {
    "task_id": "Mbpp/448",
    "llm_response": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    \n    perrin = [3, 0, 2]\n    \n    if n == 1:\n        return 3\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    \n    for i in range(3, n):\n        next_perrin = perrin[i-2] + perrin[i-3]\n        perrin.append(next_perrin)\n    \n    return sum(perrin[:n])",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to calculate the sum of perrin numbers."
  },
  {
    "task_id": "Mbpp/450",
    "llm_response": "def extract_string(string_list, size):\n    return [string for string in string_list if len(string) == size]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to extract specified size of strings from a give list of string values."
  },
  {
    "task_id": "Mbpp/451",
    "llm_response": "def remove_whitespaces(string):\n    return string.replace(' ', '')",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to remove all whitespaces from the given string using regex."
  },
  {
    "task_id": "Mbpp/453",
    "llm_response": "def sumofFactors(n):\n    sum_even = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n            if i != n // i and (n // i) % 2 == 0:\n                sum_even += n // i\n    return sum_even",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of even factors of a number."
  },
  {
    "task_id": "Mbpp/454",
    "llm_response": "import re\n\ndef text_match_wordz(text):\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function that matches a word containing 'z'."
  },
  {
    "task_id": "Mbpp/455",
    "llm_response": "def check_monthnumb_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether the given month number contains 31 days or not."
  },
  {
    "task_id": "Mbpp/456",
    "llm_response": "def reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to reverse strings in a given list of string values."
  },
  {
    "task_id": "Mbpp/457",
    "llm_response": "def Find_Min(lst):\n    return min(lst, key=len)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sublist having minimum length."
  },
  {
    "task_id": "Mbpp/458",
    "llm_response": "def rectangle_area(length, width):\n    return length * width",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the area of a rectangle."
  },
  {
    "task_id": "Mbpp/459",
    "llm_response": "import re\n\ndef remove_uppercase(text):\n    return re.sub(r'[A-Z]', '', text)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to remove uppercase substrings from a given string by using regex."
  },
  {
    "task_id": "Mbpp/460",
    "llm_response": "def Extract(lst):\n    return [sublist[0] for sublist in lst]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to get the first element of each sublist."
  },
  {
    "task_id": "Mbpp/462",
    "llm_response": "from itertools import combinations\n\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst) + 1):\n        for combo in combinations(lst, i):\n            result.append(list(combo))\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find all possible combinations of the elements of a given list."
  },
  {
    "task_id": "Mbpp/463",
    "llm_response": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_prod = arr[0]\n    min_prod = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_prod, min_prod = min_prod, max_prod\n        \n        max_prod = max(arr[i], max_prod * arr[i])\n        min_prod = min(arr[i], min_prod * arr[i])\n        \n        result = max(result, max_prod)\n    \n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the maximum product subarray of the given array."
  },
  {
    "task_id": "Mbpp/465",
    "llm_response": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None and v != ''}",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to drop empty items from a given dictionary."
  },
  {
    "task_id": "Mbpp/468",
    "llm_response": "def max_product(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [0] * n\n    \n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    return max(dp)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array."
  },
  {
    "task_id": "Mbpp/470",
    "llm_response": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the pairwise addition of the elements of the given tuples."
  },
  {
    "task_id": "Mbpp/471",
    "llm_response": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find remainder of array multiplication divided by n."
  },
  {
    "task_id": "Mbpp/472",
    "llm_response": "def check_Consecutive(lst):\n    if len(lst) <= 1:\n        return True\n    \n    sorted_lst = sorted(lst)\n    \n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] - sorted_lst[i-1] != 1:\n            return False\n    \n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the given list contains consecutive numbers or not."
  },
  {
    "task_id": "Mbpp/473",
    "llm_response": "def tuple_intersection(list1, list2):\n    set1 = set()\n    set2 = set()\n    \n    for tup in list1:\n        set1.add(tuple(sorted(tup)))\n    \n    for tup in list2:\n        set2.add(tuple(sorted(tup)))\n    \n    intersection = set1.intersection(set2)\n    return intersection",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order."
  },
  {
    "task_id": "Mbpp/474",
    "llm_response": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to replace characters in a string."
  },
  {
    "task_id": "Mbpp/475",
    "llm_response": "def sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sort counter by value."
  },
  {
    "task_id": "Mbpp/476",
    "llm_response": "def big_sum(arr):\n    return max(arr) + min(arr)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of the largest and smallest value in a given array."
  },
  {
    "task_id": "Mbpp/477",
    "llm_response": "def is_lower(s):\n    return s.lower()",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to convert the given string to lower case."
  },
  {
    "task_id": "Mbpp/478",
    "llm_response": "def remove_lowercase(text):\n    result = \"\"\n    for char in text:\n        if not char.islower():\n            result += char\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to remove lowercase substrings from a given string."
  },
  {
    "task_id": "Mbpp/479",
    "llm_response": "def first_Digit(n):\n    n = abs(n)\n    while n >= 10:\n        n //= 10\n    return n",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the first digit of a given number."
  },
  {
    "task_id": "Mbpp/554",
    "llm_response": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 1]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find odd numbers from a mixed list."
  },
  {
    "task_id": "Mbpp/555",
    "llm_response": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers."
  },
  {
    "task_id": "Mbpp/556",
    "llm_response": "def find_Odd_Pair(arr, n):\n    even_count = 0\n    odd_count = 0\n    \n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count * odd_count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count the pairs with xor as an odd number."
  },
  {
    "task_id": "Mbpp/557",
    "llm_response": "def toggle_string(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to toggle characters case in a string."
  },
  {
    "task_id": "Mbpp/558",
    "llm_response": "def digit_distance_nums(num1, num2):\n    str1 = str(abs(num1))\n    str2 = str(abs(num2))\n    \n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    \n    total_distance = 0\n    for i in range(max_len):\n        total_distance += abs(int(str1[i]) - int(str2[i]))\n    \n    return total_distance",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the digit distance between two integers."
  },
  {
    "task_id": "Mbpp/559",
    "llm_response": "def max_sub_array_sum(arr, n):\n    max_ending_here = max_so_far = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the largest sum of contiguous subarray in the given array."
  },
  {
    "task_id": "Mbpp/560",
    "llm_response": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1) | set(tuple2)))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the union of elements of the given tuples."
  },
  {
    "task_id": "Mbpp/562",
    "llm_response": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the maximum length of sublist."
  },
  {
    "task_id": "Mbpp/563",
    "llm_response": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to extract values between quotation marks of a string."
  },
  {
    "task_id": "Mbpp/564",
    "llm_response": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count unequal element pairs from the given array."
  },
  {
    "task_id": "Mbpp/565",
    "llm_response": "def split(string):\n    return list(string)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to split a string into characters."
  },
  {
    "task_id": "Mbpp/566",
    "llm_response": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to get the sum of a non-negative integer."
  },
  {
    "task_id": "Mbpp/567",
    "llm_response": "def issort_list(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether a specified list is sorted or not."
  },
  {
    "task_id": "Mbpp/568",
    "llm_response": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to create a list of empty dictionaries."
  },
  {
    "task_id": "Mbpp/569",
    "llm_response": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sort each sublist of strings in a given list of lists."
  },
  {
    "task_id": "Mbpp/572",
    "llm_response": "def two_unique_nums(lst):\n    from collections import Counter\n    count = Counter(lst)\n    return [num for num in lst if count[num] == 1]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to remove two duplicate numbers from a given number of lists."
  },
  {
    "task_id": "Mbpp/573",
    "llm_response": "def unique_product(lst):\n    unique_nums = list(set(lst))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to calculate the product of the unique numbers of a given list."
  },
  {
    "task_id": "Mbpp/576",
    "llm_response": "def is_Sub_Array(main_list, sub_list):\n    if len(sub_list) == 0:\n        return True\n    if len(sub_list) > len(main_list):\n        return False\n    \n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i + len(sub_list)] == sub_list:\n            return True\n    return False",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether an array is subarray of another or not."
  },
  {
    "task_id": "Mbpp/577",
    "llm_response": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    \n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    \n    return factorial % 10",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the last digit in factorial of a given number."
  },
  {
    "task_id": "Mbpp/578",
    "llm_response": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to interleave lists of the same length."
  },
  {
    "task_id": "Mbpp/579",
    "llm_response": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the dissimilar elements in the given two tuples."
  },
  {
    "task_id": "Mbpp/580",
    "llm_response": "def extract_even(nested_tuple):\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            even_nested = extract_even(item)\n            if even_nested:\n                result.append(even_nested)\n        elif isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n    return tuple(result)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to extract the even elements in the nested mixed tuple."
  },
  {
    "task_id": "Mbpp/581",
    "llm_response": "import math\n\ndef surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    triangular_face_area = 0.5 * base_edge * slant_height\n    total_triangular_area = 4 * triangular_face_area\n    return base_area + total_triangular_area",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the surface area of the square pyramid."
  },
  {
    "task_id": "Mbpp/583",
    "llm_response": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    \n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    \n    return catalan[n]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function for nth catalan number."
  },
  {
    "task_id": "Mbpp/585",
    "llm_response": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm."
  },
  {
    "task_id": "Mbpp/586",
    "llm_response": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to split the array and add the first part to the end."
  },
  {
    "task_id": "Mbpp/587",
    "llm_response": "def list_tuple(lst):\n    return tuple(lst)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert a list to a tuple."
  },
  {
    "task_id": "Mbpp/588",
    "llm_response": "def big_diff(lst):\n    return max(lst) - min(lst)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the difference between largest and smallest value in a given array."
  },
  {
    "task_id": "Mbpp/589",
    "llm_response": "import math\n\ndef perfect_squares(start, end):\n    result = []\n    sqrt_start = int(math.sqrt(start))\n    if sqrt_start * sqrt_start < start:\n        sqrt_start += 1\n    \n    i = sqrt_start\n    while i * i <= end:\n        result.append(i * i)\n        i += 1\n    \n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find perfect squares between two given numbers."
  },
  {
    "task_id": "Mbpp/590",
    "llm_response": "import math\nimport cmath\n\ndef polar_rect(r, theta):\n    magnitude = abs(complex(r, theta))\n    angle = cmath.phase(complex(r, theta))\n    rectangular = cmath.rect(r, theta)\n    return ((magnitude, angle), rectangular)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert polar coordinates to rectangular coordinates."
  },
  {
    "task_id": "Mbpp/591",
    "llm_response": "def swap_List(lst):\n    if len(lst) <= 1:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to interchange the first and last elements in a list."
  },
  {
    "task_id": "Mbpp/592",
    "llm_response": "from math import comb\n\ndef sum_Of_product(n):\n    total = 0\n    for i in range(n):\n        total += comb(n, i) * comb(n, i + 1)\n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find sum of product of binomial co-efficients."
  },
  {
    "task_id": "Mbpp/593",
    "llm_response": "import re\n\ndef removezero_ip(ip):\n    parts = ip.split('.')\n    result = []\n    for part in parts:\n        result.append(str(int(part)))\n    return '.'.join(result)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to remove leading zeroes from an ip address."
  },
  {
    "task_id": "Mbpp/594",
    "llm_response": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 == 1 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    return first_even - first_odd",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the difference of first even and odd number of a given list."
  },
  {
    "task_id": "Mbpp/596",
    "llm_response": "import sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the size of the given tuple."
  },
  {
    "task_id": "Mbpp/597",
    "llm_response": "def find_kth(arr1, arr2, k):\n    merged = []\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    \n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    \n    return merged[k-1]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find kth element from the given two sorted arrays."
  },
  {
    "task_id": "Mbpp/598",
    "llm_response": "def armstrong_number(n):\n    num_str = str(n)\n    num_digits = len(num_str)\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    return sum_of_powers == n",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether the given number is armstrong or not."
  },
  {
    "task_id": "Mbpp/599",
    "llm_response": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return (total_sum, average)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find sum and average of first n natural numbers."
  },
  {
    "task_id": "Mbpp/600",
    "llm_response": "def is_Even(n):\n    return n % 2 == 0",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the given number is even or not using bitwise operator."
  },
  {
    "task_id": "Mbpp/602",
    "llm_response": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the first repeated character in a given string."
  },
  {
    "task_id": "Mbpp/603",
    "llm_response": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    ludic = [1]\n    candidates = list(range(2, n + 1))\n    \n    while candidates:\n        next_ludic = candidates[0]\n        ludic.append(next_ludic)\n        \n        new_candidates = []\n        for i, num in enumerate(candidates):\n            if (i + 1) % next_ludic != 0:\n                new_candidates.append(num)\n        \n        candidates = new_candidates\n    \n    return ludic",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to get a lucid number smaller than or equal to n."
  },
  {
    "task_id": "Mbpp/604",
    "llm_response": "def reverse_words(s):\n    words = s.split()\n    return ' '.join(reversed(words))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to reverse words in a given string."
  },
  {
    "task_id": "Mbpp/605",
    "llm_response": "def prime_num(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check if the given integer is a prime number."
  },
  {
    "task_id": "Mbpp/606",
    "llm_response": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert degrees to radians."
  },
  {
    "task_id": "Mbpp/607",
    "llm_response": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex."
  },
  {
    "task_id": "Mbpp/608",
    "llm_response": "def bell_Number(n):\n    if n == 0:\n        return 1\n    \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find nth bell number."
  },
  {
    "task_id": "Mbpp/610",
    "llm_response": "def remove_kth_element(lst, k):\n    if k <= 0 or k > len(lst):\n        return lst[:]\n    return lst[:k-1] + lst[k:]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to remove the k'th element from a given list."
  },
  {
    "task_id": "Mbpp/611",
    "llm_response": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the maximum of nth column from the given tuple list."
  },
  {
    "task_id": "Mbpp/612",
    "llm_response": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    return [first_elements, second_elements]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to merge the first and last elements separately in a list of lists."
  },
  {
    "task_id": "Mbpp/614",
    "llm_response": "def cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the cumulative sum of all the values that are present in the given tuple list."
  },
  {
    "task_id": "Mbpp/615",
    "llm_response": "def average_tuple(tuple_of_tuples):\n    return [sum(t) / len(t) for t in tuple_of_tuples]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find average value of the numbers in a given tuple of tuples."
  },
  {
    "task_id": "Mbpp/616",
    "llm_response": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to perfom the modulo of tuple elements in the given two tuples."
  },
  {
    "task_id": "Mbpp/618",
    "llm_response": "def div_list(list1, list2):\n    return [list1[i] / list2[i] for i in range(len(list1))]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to divide two lists using map and lambda function."
  },
  {
    "task_id": "Mbpp/619",
    "llm_response": "import re\n\ndef move_num(s):\n    letters = re.findall(r'[a-zA-Z]', s)\n    numbers = re.findall(r'\\d', s)\n    return ''.join(letters) + ''.join(numbers)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to move all the numbers in it to the given string."
  },
  {
    "task_id": "Mbpp/620",
    "llm_response": "from collections import defaultdict\n\ndef largest_subset(nums):\n    if not nums:\n        return 0\n    \n    nums.sort()\n    n = len(nums)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the largest subset where each pair is divisible."
  },
  {
    "task_id": "Mbpp/622",
    "llm_response": "def get_median(list1, list2, n):\n    merged = []\n    i = j = 0\n    \n    while i < n and j < n:\n        if list1[i] <= list2[j]:\n            merged.append(list1[i])\n            i += 1\n        else:\n            merged.append(list2[j])\n            j += 1\n    \n    while i < n:\n        merged.append(list1[i])\n        i += 1\n    \n    while j < n:\n        merged.append(list2[j])\n        j += 1\n    \n    total_length = 2 * n\n    if total_length % 2 == 0:\n        return (merged[total_length // 2 - 1] + merged[total_length // 2]) / 2.0\n    else:\n        return float(merged[total_length // 2])",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the median of two sorted arrays of same size."
  },
  {
    "task_id": "Mbpp/623",
    "llm_response": "def nth_nums(nums, n):\n    return [num ** n for num in nums]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the n-th power of individual elements in a list using lambda function."
  },
  {
    "task_id": "Mbpp/624",
    "llm_response": "def is_upper(string):\n    return string.upper()",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to convert the given string to upper case."
  },
  {
    "task_id": "Mbpp/626",
    "llm_response": "import math\n\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    return radius ** 2",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the largest triangle that can be inscribed in the semicircle."
  },
  {
    "task_id": "Mbpp/628",
    "llm_response": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'."
  },
  {
    "task_id": "Mbpp/629",
    "llm_response": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find even numbers from a mixed list."
  },
  {
    "task_id": "Mbpp/630",
    "llm_response": "def get_coordinates(coord):\n    x, y = coord\n    result = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            result.append([i, j])\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to extract all the adjacent coordinates of the given coordinate tuple."
  },
  {
    "task_id": "Mbpp/631",
    "llm_response": "def replace_spaces(text):\n    result = \"\"\n    for char in text:\n        if char == ' ':\n            result += '_'\n        elif char == '_':\n            result += ' '\n        else:\n            result += char\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex."
  },
  {
    "task_id": "Mbpp/632",
    "llm_response": "def move_zero(lst):\n    non_zero = []\n    zero_count = 0\n    \n    for num in lst:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero.append(num)\n    \n    return non_zero + [0] * zero_count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to move all zeroes to the end of the given list."
  },
  {
    "task_id": "Mbpp/633",
    "llm_response": "def pair_xor_Sum(arr, n):\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += arr[i] ^ arr[j]\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of xor of all pairs of numbers in the given array."
  },
  {
    "task_id": "Mbpp/635",
    "llm_response": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        \n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        \n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    \n    n = len(arr)\n    \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    \n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n    \n    return arr",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to push all values into a heap and then pop off the smallest values one at a time."
  },
  {
    "task_id": "Mbpp/637",
    "llm_response": "def noprofit_noloss(selling_price, cost_price):\n    return selling_price == cost_price",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether the given amount has no profit and no loss"
  },
  {
    "task_id": "Mbpp/638",
    "llm_response": "import math\n\ndef wind_chill(velocity, temperature):\n    wind_chill_value = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    return math.ceil(wind_chill_value)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to calculate wind chill index."
  },
  {
    "task_id": "Mbpp/639",
    "llm_response": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if name and name[0].isupper():\n            total_length += len(name)\n    return total_length",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter."
  },
  {
    "task_id": "Mbpp/641",
    "llm_response": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the nth nonagonal number."
  },
  {
    "task_id": "Mbpp/643",
    "llm_response": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\B[a-zA-Z]*z[a-zA-Z]*\\B'\n    return bool(re.search(pattern, text))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function that matches a word containing 'z', not at the start or end of the word."
  },
  {
    "task_id": "Mbpp/644",
    "llm_response": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to reverse an array upto a given position."
  },
  {
    "task_id": "Mbpp/720",
    "llm_response": "def add_dict_to_tuple(tup, dict_to_add):\n    return tup + (dict_to_add,)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to add a dictionary to the tuple."
  },
  {
    "task_id": "Mbpp/721",
    "llm_response": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    if n == 0:\n        return 0\n    \n    # dp[i][j] stores (max_sum, path_length) for reaching cell (i,j)\n    dp = [[(0, 0) for _ in range(n)] for _ in range(n)]\n    \n    # Initialize first cell\n    dp[0][0] = (matrix[0][0], 1)\n    \n    # Fill first row\n    for j in range(1, n):\n        prev_sum, prev_len = dp[0][j-1]\n        dp[0][j] = (prev_sum + matrix[0][j], prev_len + 1)\n    \n    # Fill first column\n    for i in range(1, n):\n        prev_sum, prev_len = dp[i-1][0]\n        dp[i][0] = (prev_sum + matrix[i][0], prev_len + 1)\n    \n    # Fill rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            # Coming from top\n            top_sum, top_len = dp[i-1][j]\n            top_avg = (top_sum + matrix[i][j]) / (top_len + 1)\n            \n            # Coming from left\n            left_sum, left_len = dp[i][j-1]\n            left_avg = (left_sum + matrix[i][j]) / (left_len + 1)\n            \n            # Choose path with better average\n            if top_avg >= left_avg:\n                dp[i][j] = (top_sum + matrix[i][j], top_len + 1)\n            else:\n                dp[i][j] = (left_sum + matrix[i][j], left_len + 1)\n    \n    final_sum, final_len = dp[n-1][n-1]\n    return final_sum / final_len",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n."
  },
  {
    "task_id": "Mbpp/722",
    "llm_response": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= min_height and weight >= min_weight}",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to filter the height and width of students which are stored in a dictionary."
  },
  {
    "task_id": "Mbpp/723",
    "llm_response": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to count the same pair in two given lists using map function."
  },
  {
    "task_id": "Mbpp/724",
    "llm_response": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to calculate the sum of all digits of the base to the specified power."
  },
  {
    "task_id": "Mbpp/725",
    "llm_response": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to extract values between quotation marks of the given string by using regex."
  },
  {
    "task_id": "Mbpp/726",
    "llm_response": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to multiply the adjacent elements of the given tuple."
  },
  {
    "task_id": "Mbpp/728",
    "llm_response": "def sum_list(a, b):\n    return [a[i] + b[i] for i in range(len(a))]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sum elements in two lists."
  },
  {
    "task_id": "Mbpp/730",
    "llm_response": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    \n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to remove consecutive duplicates of a given list."
  },
  {
    "task_id": "Mbpp/731",
    "llm_response": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the lateral surface area of a cone."
  },
  {
    "task_id": "Mbpp/732",
    "llm_response": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon."
  },
  {
    "task_id": "Mbpp/733",
    "llm_response": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the index of the first occurrence of a given number in a sorted array."
  },
  {
    "task_id": "Mbpp/734",
    "llm_response": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            product = 1\n            for k in range(i, j + 1):\n                product *= arr[k]\n            total_sum += product\n    \n    return total_sum",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find sum of products of all possible subarrays."
  },
  {
    "task_id": "Mbpp/735",
    "llm_response": "def toggle_middle_bits(n):\n    if n <= 3:\n        return n\n    \n    bit_length = n.bit_length()\n    \n    if bit_length <= 2:\n        return n\n    \n    mask = 0\n    for i in range(1, bit_length - 1):\n        mask |= (1 << i)\n    \n    return n ^ mask",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to toggle bits of the number except the first and the last bit."
  },
  {
    "task_id": "Mbpp/736",
    "llm_response": "import bisect\n\ndef left_insertion(arr, val):\n    return bisect.bisect_left(arr, val)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to locate the left insertion point for a specified value in sorted order."
  },
  {
    "task_id": "Mbpp/737",
    "llm_response": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether the given string is starting with a vowel or not using regex."
  },
  {
    "task_id": "Mbpp/739",
    "llm_response": "import math\n\ndef find_Index(n):\n    min_n_digit = 10**(n-1)\n    k = math.ceil((-1 + math.sqrt(1 + 8*min_n_digit)) / 2)\n    while k*(k+1)//2 < min_n_digit:\n        k += 1\n    return k",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the index of smallest triangular number with n digits."
  },
  {
    "task_id": "Mbpp/740",
    "llm_response": "def tuple_to_dict(tup):\n    result = {}\n    for i in range(0, len(tup), 2):\n        if i + 1 < len(tup):\n            result[tup[i]] = tup[i + 1]\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements."
  },
  {
    "task_id": "Mbpp/741",
    "llm_response": "def all_Characters_Same(s):\n    if len(s) <= 1:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether all the characters are same or not."
  },
  {
    "task_id": "Mbpp/742",
    "llm_response": "import math\n\ndef area_tetrahedron(side):\n    return math.sqrt(3) * side ** 2",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to caluclate the area of a tetrahedron."
  },
  {
    "task_id": "Mbpp/743",
    "llm_response": "def rotate_right(lst, n):\n    if not lst or n == 0:\n        return lst\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to rotate a given list by specified number of items to the right direction."
  },
  {
    "task_id": "Mbpp/744",
    "llm_response": "def check_none(tuple_input):\n    return None in tuple_input",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check if the given tuple has any none value or not."
  },
  {
    "task_id": "Mbpp/745",
    "llm_response": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if digits and all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find numbers within a given range where every number is divisible by every digit it contains."
  },
  {
    "task_id": "Mbpp/748",
    "llm_response": "import re\n\ndef capital_words_spaces(text):\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', text)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to put spaces between words starting with capital letters in a given string by using regex."
  },
  {
    "task_id": "Mbpp/749",
    "llm_response": "def sort_numeric_strings(string_list):\n    return sorted([int(x) for x in string_list])",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to sort a given list of strings of numbers numerically."
  },
  {
    "task_id": "Mbpp/750",
    "llm_response": "def add_tuple(lst, tpl):\n    return lst + list(tpl)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to add the given tuple to the given list."
  },
  {
    "task_id": "Mbpp/751",
    "llm_response": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        \n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        \n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    \n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check if the given array represents min heap or not."
  },
  {
    "task_id": "Mbpp/752",
    "llm_response": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n + 1):\n            a, b = b, 2 * a + b\n        return b",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the nth jacobsthal number."
  },
  {
    "task_id": "Mbpp/753",
    "llm_response": "def min_k(tuple_list, k):\n    return sorted(tuple_list, key=lambda x: x[1])[:k]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find minimum k records from tuple list."
  },
  {
    "task_id": "Mbpp/754",
    "llm_response": "def extract_index_list(l1, l2, l3):\n    result = []\n    min_length = min(len(l1), len(l2), len(l3))\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find common index elements from three lists."
  },
  {
    "task_id": "Mbpp/755",
    "llm_response": "def second_smallest(lst):\n    unique_sorted = sorted(set(lst))\n    return unique_sorted[1]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the second smallest number in a list."
  },
  {
    "task_id": "Mbpp/757",
    "llm_response": "def count_reverse_pairs(string_list):\n    count = 0\n    seen = set()\n    \n    for string in string_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen and string not in seen:\n            count += 1\n        seen.add(string)\n    \n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to count the pairs of reverse strings in the given string list."
  },
  {
    "task_id": "Mbpp/758",
    "llm_response": "def unique_sublists(lst):\n    result = {}\n    for sublist in lst:\n        key = tuple(sublist)\n        result[key] = result.get(key, 0) + 1\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to count number of unique lists within a list."
  },
  {
    "task_id": "Mbpp/759",
    "llm_response": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check a decimal with a precision of 2."
  },
  {
    "task_id": "Mbpp/760",
    "llm_response": "def unique_Element(lst):\n    return len(set(lst)) == 1",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether an array contains only one distinct element or not."
  },
  {
    "task_id": "Mbpp/762",
    "llm_response": "def check_monthnumber_number(month):\n    return month in [4, 6, 9, 11]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check whether the given month number contains 30 days or not."
  },
  {
    "task_id": "Mbpp/763",
    "llm_response": "def find_min_diff(arr, n):\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the minimum difference between any two elements in a given array."
  },
  {
    "task_id": "Mbpp/764",
    "llm_response": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count numeric values in a given string."
  },
  {
    "task_id": "Mbpp/765",
    "llm_response": "def is_polite(n):\n    return n + bin(n).count('1')",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find nth polite number."
  },
  {
    "task_id": "Mbpp/766",
    "llm_response": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to iterate over all pairs of consecutive items in a given list."
  },
  {
    "task_id": "Mbpp/767",
    "llm_response": "def get_pairs_count(arr, target_sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019."
  },
  {
    "task_id": "Mbpp/769",
    "llm_response": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to get the difference between two lists."
  },
  {
    "task_id": "Mbpp/770",
    "llm_response": "def odd_num_sum(n):\n    total = 0\n    odd_num = 1\n    for i in range(n):\n        total += odd_num ** 4\n        odd_num += 2\n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of fourth power of first n odd natural numbers."
  },
  {
    "task_id": "Mbpp/771",
    "llm_response": "def check_expression(expression):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        elif char in '({[':\n            stack.append(char)\n    \n    return len(stack) == 0",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check if the given expression is balanced or not."
  },
  {
    "task_id": "Mbpp/772",
    "llm_response": "def remove_length(string, k):\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to remove all the words with k length in the given string."
  },
  {
    "task_id": "Mbpp/773",
    "llm_response": "import re\n\ndef occurance_substring(string, substring):\n    match = re.search(substring, string)\n    if match:\n        return (substring, match.start(), match.end())\n    return None",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the occurrence and position of the substrings within a string."
  },
  {
    "task_id": "Mbpp/775",
    "llm_response": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether every odd index contains odd numbers of a given list."
  },
  {
    "task_id": "Mbpp/777",
    "llm_response": "def find_sum(lst):\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n    \n    return sum(num for num, freq in count.items() if freq == 1)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of non-repeated elements in a given array."
  },
  {
    "task_id": "Mbpp/778",
    "llm_response": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current_group = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_group.append(lst[i])\n        else:\n            result.append(current_group)\n            current_group = [lst[i]]\n    \n    result.append(current_group)\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to pack consecutive duplicates of a given list elements into sublists."
  },
  {
    "task_id": "Mbpp/780",
    "llm_response": "from itertools import combinations\n\ndef find_combinations(tuple_list):\n    result = []\n    for combo in combinations(tuple_list, 2):\n        sum_tuple = (combo[0][0] + combo[1][0], combo[0][1] + combo[1][1])\n        result.append(sum_tuple)\n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the combinations of sums with tuples in the given tuple list."
  },
  {
    "task_id": "Mbpp/781",
    "llm_response": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the count of divisors is even or odd."
  },
  {
    "task_id": "Mbpp/782",
    "llm_response": "def odd_length_sum(arr):\n    total = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 == 1:\n                total += sum(arr[i:j+1])\n    \n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of all odd length subarrays."
  },
  {
    "task_id": "Mbpp/784",
    "llm_response": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 == 1 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return 0",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the product of first even and odd number of a given list."
  },
  {
    "task_id": "Mbpp/785",
    "llm_response": "import ast\n\ndef tuple_str_int(tuple_str):\n    return ast.literal_eval(tuple_str)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to convert tuple string to integer tuple."
  },
  {
    "task_id": "Mbpp/786",
    "llm_response": "import bisect\n\ndef right_insertion(arr, value):\n    return bisect.bisect_right(arr, value)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to locate the right insertion point for a specified value in sorted order."
  },
  {
    "task_id": "Mbpp/787",
    "llm_response": "import re\n\ndef text_match_three(text):\n    pattern = r'abbb'\n    return bool(re.search(pattern, text))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function that matches a string that has an a followed by three 'b'."
  },
  {
    "task_id": "Mbpp/788",
    "llm_response": "def new_tuple(lst, string):\n    return tuple(lst + [string])",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to create a new tuple from the given string and list."
  },
  {
    "task_id": "Mbpp/790",
    "llm_response": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether every even index contains even numbers of a given list."
  },
  {
    "task_id": "Mbpp/791",
    "llm_response": "def remove_nested(test_tup):\n    return tuple(item for item in test_tup if not isinstance(item, tuple))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to remove the nested record from the given tuple."
  },
  {
    "task_id": "Mbpp/792",
    "llm_response": "def count_list(lists):\n    return len(lists)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count the number of lists in a given number of lists."
  },
  {
    "task_id": "Mbpp/793",
    "llm_response": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the last position of an element in a sorted array."
  },
  {
    "task_id": "Mbpp/794",
    "llm_response": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))",
    "model": "claude-sonnet-4",
    "task_description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'."
  },
  {
    "task_id": "Mbpp/796",
    "llm_response": "def return_sum(dictionary):\n    return sum(dictionary.values())",
    "model": "claude-sonnet-4",
    "task_description": "Write function to find the sum of all items in the given dictionary."
  },
  {
    "task_id": "Mbpp/797",
    "llm_response": "def sum_in_range(l, r):\n    total = 0\n    for i in range(l, r + 1):\n        if i % 2 == 1:\n            total += i\n    return total",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of all odd natural numbers within the range l and r."
  },
  {
    "task_id": "Mbpp/798",
    "llm_response": "def _sum(arr):\n    return sum(arr)",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the sum of an array."
  },
  {
    "task_id": "Mbpp/799",
    "llm_response": "def left_rotate(n, d):\n    d = d % 32\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to left rotate the bits of a given number."
  },
  {
    "task_id": "Mbpp/800",
    "llm_response": "def remove_all_spaces(text):\n    return text.replace(' ', '')",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to remove all whitespaces from a string."
  },
  {
    "task_id": "Mbpp/801",
    "llm_response": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to count the number of equal numbers from three given integers."
  },
  {
    "task_id": "Mbpp/803",
    "llm_response": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the given number is a perfect square or not."
  },
  {
    "task_id": "Mbpp/804",
    "llm_response": "def is_product_even(numbers):\n    if not numbers:\n        return False\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return product % 2 == 0",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to check whether the product of numbers is even or not."
  },
  {
    "task_id": "Mbpp/805",
    "llm_response": "def max_sum_list(lists):\n    return max(lists, key=sum)",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find the list in a list of lists whose sum of elements is the highest."
  },
  {
    "task_id": "Mbpp/806",
    "llm_response": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to find maximum run of uppercase characters in the given string."
  },
  {
    "task_id": "Mbpp/807",
    "llm_response": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 == 1:\n            return num\n    return None",
    "model": "claude-sonnet-4",
    "task_description": "Write a python function to find the first odd number in a given list of numbers."
  },
  {
    "task_id": "Mbpp/808",
    "llm_response": "def check_K(tuple_data, k):\n    return k in tuple_data",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check if the given tuples contain the k or not."
  },
  {
    "task_id": "Mbpp/809",
    "llm_response": "def check_smaller(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True",
    "model": "claude-sonnet-4",
    "task_description": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple."
  }
]