{
  "task_id": "Mbpp/239",
  "llm_response": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    \n    dp = {}\n    \n    def count_sequences(length, last_value):\n        if length == 0:\n            return 1\n        if (length, last_value) in dp:\n            return dp[(length, last_value)]\n        \n        total = 0\n        min_next = 2 * last_value if last_value > 0 else 1\n        \n        for next_val in range(min_next, m + 1):\n            total += count_sequences(length - 1, next_val)\n        \n        dp[(length, last_value)] = total\n        return total\n    \n    result = 0\n    for first_val in range(1, m + 1):\n        result += count_sequences(n - 1, first_val)\n    \n    return result",
  "model": "claude-sonnet-4",
  "task_description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m."
}