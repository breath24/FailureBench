{
  "task_id": "Mbpp/721",
  "llm_response": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    if n == 0:\n        return 0\n    \n    # dp[i][j] stores (max_sum, path_length) for reaching cell (i,j)\n    dp = [[(0, 0) for _ in range(n)] for _ in range(n)]\n    \n    # Initialize first cell\n    dp[0][0] = (matrix[0][0], 1)\n    \n    # Fill first row\n    for j in range(1, n):\n        prev_sum, prev_len = dp[0][j-1]\n        dp[0][j] = (prev_sum + matrix[0][j], prev_len + 1)\n    \n    # Fill first column\n    for i in range(1, n):\n        prev_sum, prev_len = dp[i-1][0]\n        dp[i][0] = (prev_sum + matrix[i][0], prev_len + 1)\n    \n    # Fill rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            # Coming from top\n            top_sum, top_len = dp[i-1][j]\n            top_avg = (top_sum + matrix[i][j]) / (top_len + 1)\n            \n            # Coming from left\n            left_sum, left_len = dp[i][j-1]\n            left_avg = (left_sum + matrix[i][j]) / (left_len + 1)\n            \n            # Choose path with better average\n            if top_avg >= left_avg:\n                dp[i][j] = (top_sum + matrix[i][j], top_len + 1)\n            else:\n                dp[i][j] = (left_sum + matrix[i][j], left_len + 1)\n    \n    final_sum, final_len = dp[n-1][n-1]\n    return final_sum / final_len",
  "model": "claude-sonnet-4",
  "task_description": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n."
}