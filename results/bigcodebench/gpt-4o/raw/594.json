{
  "task_id": "BigCodeBench/594",
  "instruct_prompt": "Generate weather data for the specified number of hours, save it in a CSV file with colomns 'Time' and 'Condition' and back up the file to a backup directory.\nThe function should output with:\n    str: The path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
  "llm_response": "import csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import randint\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\nBACKUP_DIR = './backup'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    # Ensure the output and backup directories exist\n    os.makedirs(output_dir, exist_ok=True)\n    os.makedirs(BACKUP_DIR, exist_ok=True)\n\n    # Generate weather data\n    start_time = datetime.now()\n    weather_data = []\n    for i in range(hours):\n        time = start_time + timedelta(hours=i)\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        weather_data.append((time.strftime('%Y-%m-%d %H:%M:%S'), condition))\n\n    # Define the CSV file path\n    csv_file_path = os.path.join(output_dir, 'weather_data.csv')\n\n    # Write data to CSV\n    with open(csv_file_path, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time', 'Condition'])\n        writer.writerows(weather_data)\n\n    # Backup the CSV file\n    backup_file_path = os.path.join(BACKUP_DIR, 'weather_data_backup.csv')\n    shutil.copy(csv_file_path, backup_file_path)\n\n    # Return the path of the generated CSV file\n    return csv_file_path",
  "model": "gpt-4o"
}