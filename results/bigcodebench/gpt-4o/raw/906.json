{
  "task_id": "BigCodeBench/906",
  "instruct_prompt": "Archives all processed files from a source directory to a target directory. The function identifies processed files by the '_processed' suffix in the filename.\nThe function should output with:\n    str: The path to the created archive.\nYou should write self-contained code starting with:\n```\nimport zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n```",
  "llm_response": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    # Ensure the target directory exists\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    # Create the full path for the archive\n    archive_path = os.path.join(target_dir, archive_name)\n\n    # Initialize a list to keep track of files to archive\n    files_to_archive = []\n\n    # Iterate over files in the source directory\n    for filename in os.listdir(source_dir):\n        # Check if the file has the '_processed' suffix\n        if re.search(r'_processed\\.', filename):\n            # Construct the full file path\n            file_path = os.path.join(source_dir, filename)\n            # Add the file to the list of files to archive\n            files_to_archive.append(file_path)\n\n    # Create a zip archive and add the processed files\n    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as archive:\n        for file_path in files_to_archive:\n            # Add the file to the archive\n            archive.write(file_path, os.path.basename(file_path))\n            # Optionally, remove the file after archiving\n            os.remove(file_path)\n\n    # Return the path to the created archive\n    return archive_path",
  "model": "gpt-4o"
}