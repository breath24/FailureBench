{
  "task_id": "BigCodeBench/654",
  "instruct_prompt": "Fit an exponential decay function to the indices in the array where the first column matches the target value.\nThe function should output with:\n    tuple: Containing the optimized parameters of the fitting function (popt) and the matplotlib Axes object.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n```",
  "llm_response": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n    # Extract indices where the first column matches the target value\n    indices = np.where(array[:, 0] == target_value)[0]\n    \n    # Define the exponential decay function\n    def exp_decay(x, a, b, c):\n        return a * np.exp(-b * x) + c\n    \n    # Generate x data (indices) and y data (values from the second column)\n    x_data = indices\n    y_data = array[indices, 1]\n    \n    # Initial guess for the parameters a, b, c\n    initial_guess = (1.0, 1.0, 1.0)\n    \n    # Perform the curve fitting\n    popt, pcov = optimize.curve_fit(exp_decay, x_data, y_data, p0=initial_guess)\n    \n    # Plot the data and the fitted curve\n    fig, ax = plt.subplots()\n    ax.scatter(x_data, y_data, label='Data', color='red')\n    ax.plot(x_data, exp_decay(x_data, *popt), label='Fitted curve', color='blue')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.set_title('Exponential Decay Fit')\n    ax.legend()\n    \n    # Return the optimized parameters and the Axes object\n    return popt, ax",
  "model": "gpt-4o"
}