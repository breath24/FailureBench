{
  "task_id": "BigCodeBench/211",
  "instruct_prompt": "Download and keep a zip file from a URL, extract its contents to the specified directory, and return the list of extracted files.\nThe function should output with:\n    list: A list of filenames of the extracted files.\nYou should write self-contained code starting with:\n```\nimport requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n```",
  "llm_response": "import requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Downloads a zip file from a URL, extracts its contents to the specified directory,\n    and returns the list of extracted files.\n\n    :param url: str - The URL of the zip file to download.\n    :param destination_directory: str - The directory where the contents will be extracted.\n    :param headers: dict - Optional headers to include in the request.\n    :return: list - A list of filenames of the extracted files.\n    \"\"\"\n    # Ensure the destination directory exists\n    if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n\n    # Download the zip file\n    response = requests.get(url, headers=headers)\n    zip_filename = os.path.join(destination_directory, 'downloaded.zip')\n\n    # Write the zip file to the destination directory\n    with open(zip_filename, 'wb') as f:\n        f.write(response.content)\n\n    # Extract the contents of the zip file\n    extracted_files = []\n    with zipfile.ZipFile(zip_filename, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n        extracted_files = zip_ref.namelist()\n\n    # Optionally, remove the downloaded zip file\n    os.remove(zip_filename)\n\n    return extracted_files",
  "model": "gpt-4o"
}