{
  "task_id": "BigCodeBench/785",
  "instruct_prompt": "Archive all files that match a particular pattern and then delete the original files.\nNote that: This function will return the archive file path.\nThe function should output with:\n    archive_file (str): The archive file path.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n```",
  "llm_response": "import subprocess\nimport os\nimport glob\nimport tarfile\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    # Ensure the archive directory exists\n    os.makedirs(ARCHIVE_DIR, exist_ok=True)\n    \n    # Find all files matching the pattern\n    files_to_archive = glob.glob(pattern)\n    \n    if not files_to_archive:\n        raise FileNotFoundError(f\"No files found matching pattern: {pattern}\")\n    \n    # Create a unique archive file name\n    archive_file = os.path.join(ARCHIVE_DIR, 'archive.tar.gz')\n    \n    # Create a tar.gz archive of the files\n    with tarfile.open(archive_file, \"w:gz\") as tar:\n        for file in files_to_archive:\n            tar.add(file, arcname=os.path.basename(file))\n    \n    # Delete the original files\n    for file in files_to_archive:\n        os.remove(file)\n    \n    return archive_file",
  "model": "gpt-4o"
}