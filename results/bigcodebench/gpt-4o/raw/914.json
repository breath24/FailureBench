{
  "task_id": "BigCodeBench/914",
  "instruct_prompt": "Predicts the stock closing prices for the next 7 days using simple linear regression and plots the data. Constants: - The function uses a constant time step of 24*60*60 seconds to generate future timestamps.\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list with predicted prices for the next 7 days.\n    Axes: The matplotlib Axes object containing the plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Ensure the DataFrame has the correct columns\n    if 'timestamp' not in df.columns or 'close' not in df.columns:\n        raise ValueError(\"DataFrame must contain 'timestamp' and 'close' columns\")\n\n    # Convert timestamp to numeric values for regression\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    df['timestamp_numeric'] = df['timestamp'].astype(np.int64) // 10**9\n\n    # Prepare the data for linear regression\n    X = df['timestamp_numeric'].values.reshape(-1, 1)\n    y = df['close'].values\n\n    # Create and fit the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Predict the next 7 days\n    last_timestamp = df['timestamp_numeric'].iloc[-1]\n    seconds_in_a_day = 24 * 60 * 60\n    future_timestamps = [last_timestamp + i * seconds_in_a_day for i in range(1, 8)]\n    future_timestamps_np = np.array(future_timestamps).reshape(-1, 1)\n    predicted_prices = model.predict(future_timestamps_np)\n\n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.plot(df['timestamp'], df['close'], label='Historical Prices', color='blue')\n    future_dates = pd.to_datetime(future_timestamps_np.flatten(), unit='s')\n    ax.plot(future_dates, predicted_prices, label='Predicted Prices', color='red', linestyle='--')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Stock Price Prediction')\n    ax.legend()\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    # Return the predicted prices and the plot\n    return (predicted_prices.tolist(), ax)",
  "model": "gpt-4o"
}