{
  "task_id": "BigCodeBench/777",
  "instruct_prompt": "Unzip all zip files in a directory whose name matches a certain pattern by splitting the filename the last time \"-\" occurs and using the prefix part of the filename as the directory to extract.\nThe function should output with:\n    list: A list of directories where the files were extracted.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n```",
  "llm_response": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzips all zip files in the specified directory whose names match the given pattern.\n    Extracts the contents into directories named after the prefix part of the filename.\n    \n    Args:\n    - directory (str): The path to the directory containing the zip files.\n    - pattern (str): The regex pattern to match the zip file names. Default is r'^(.*?)-\\d+\\.zip$'.\n    \n    Returns:\n    - list: A list of directories where the files were extracted.\n    \"\"\"\n    extracted_dirs = []\n    \n    # Compile the regex pattern\n    regex = re.compile(pattern)\n    \n    # Iterate over all files in the specified directory\n    for filename in os.listdir(directory):\n        # Check if the file is a zip file and matches the pattern\n        if filename.endswith('.zip'):\n            match = regex.match(filename)\n            if match:\n                # Extract the prefix part of the filename\n                prefix = match.group(1)\n                extract_dir = os.path.join(directory, prefix)\n                \n                # Ensure the extraction directory exists\n                os.makedirs(extract_dir, exist_ok=True)\n                \n                # Full path to the zip file\n                zip_path = os.path.join(directory, filename)\n                \n                # Unzip the file into the specified directory\n                with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                    zip_ref.extractall(extract_dir)\n                \n                # Add the directory to the list of extracted directories\n                extracted_dirs.append(extract_dir)\n    \n    return extracted_dirs",
  "model": "gpt-4o"
}