{
  "task_id": "BigCodeBench/346",
  "instruct_prompt": "Run a Python script as a process with predefined arguments. By default, waits for the process to complete. If wait is False, the function returns None. Raise: - ValueError: If the script does not exist. - subprocess.CalledProcessError: If the script raises an exception.\nThe function should output with:\n    int: The return code of the subprocess. If 'wait' is False, returns None.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n```",
  "llm_response": "import subprocess\nimport os\nimport sys\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run a Python script as a subprocess with predefined arguments.\n\n    Parameters:\n    - script_path (str): The path to the Python script to execute.\n    - wait (bool): Whether to wait for the process to complete. Defaults to True.\n    - *args: Additional arguments to pass to the script.\n\n    Returns:\n    - int: The return code of the subprocess. If 'wait' is False, returns None.\n\n    Raises:\n    - ValueError: If the script does not exist.\n    - subprocess.CalledProcessError: If the script raises an exception.\n    \"\"\"\n    # Check if the script exists\n    if not os.path.isfile(script_path):\n        raise ValueError(f\"The script '{script_path}' does not exist.\")\n\n    # Construct the command to run the script\n    command = [sys.executable, script_path] + list(args)\n\n    try:\n        # Run the subprocess\n        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n        if wait:\n            # Wait for the process to complete and capture output\n            stdout, stderr = process.communicate()\n\n            # Check if the process exited with a non-zero status\n            if process.returncode != 0:\n                raise subprocess.CalledProcessError(process.returncode, command, output=stdout, stderr=stderr)\n\n            return process.returncode\n        else:\n            # If not waiting, return None\n            return None\n\n    except subprocess.CalledProcessError as e:\n        # Raise the exception if the script fails\n        print(f\"Error: {e.stderr.decode()}\", file=sys.stderr)\n        raise",
  "model": "gpt-4o"
}