{
  "task_id": "BigCodeBench/93",
  "instruct_prompt": "Perform Principal Component Analysis (PCA) on a dataset and record the result. Also, generates a scatter plot of the transformed data.\nThe function should raise the exception for: ValueError: If n_components is not a positive integer.\nThe function should output with:\n    DataFrame: The transformed data with principal components.\n    Axes: The matplotlib Axes object containing the scatter plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n```",
  "llm_response": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    # Check if n_components is a positive integer\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer.\")\n    \n    # Perform PCA\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    \n    # Create a DataFrame with the transformed data\n    columns = [f'PC{i+1}' for i in range(n_components)]\n    transformed_df = pd.DataFrame(transformed_data, columns=columns)\n    \n    # Generate a scatter plot of the first two principal components\n    fig, ax = plt.subplots()\n    if n_components >= 2:\n        ax.scatter(transformed_df['PC1'], transformed_df['PC2'])\n        ax.set_xlabel('Principal Component 1')\n        ax.set_ylabel('Principal Component 2')\n        ax.set_title('PCA Scatter Plot')\n    else:\n        ax.text(0.5, 0.5, 'Not enough components for a 2D scatter plot', \n                horizontalalignment='center', verticalalignment='center', \n                transform=ax.transAxes)\n    \n    plt.show()\n    \n    return transformed_df, ax",
  "model": "gpt-4o"
}