{
  "task_id": "BigCodeBench/654",
  "instruct_prompt": "Fit an exponential decay function to the indices in the array where the first column matches the target value.\nThe function should output with:\n    tuple: Containing the optimized parameters of the fitting function (popt) and the matplotlib Axes object.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n```",
  "llm_response": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n    \"\"\"\n    Fit an exponential decay function to the indices in the array where the first column matches the target value.\n\n    Parameters:\n    array (numpy.ndarray): Input array with at least 2 columns\n    target_value: Value to match in the first column\n\n    Returns:\n    tuple: (popt, ax) where popt contains the optimized parameters and ax is the matplotlib Axes object\n    \"\"\"\n    # Find indices where first column matches target value\n    mask = (array[:, 0] == target_value)\n    indices = np.where(mask)[0]\n\n    # Get the corresponding y values (assuming second column contains the data to fit)\n    y_data = array[mask, 1]\n\n    # Create x values (indices)\n    x_data = np.arange(len(y_data))\n\n    # Define the exponential decay function to fit\n    def exp_decay(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Initial parameter guesses\n    initial_guess = [y_data[0], 0.1, 0.0]\n\n    # Perform the fit\n    popt, pcov = optimize.curve_fit(exp_decay, x_data, y_data, p0=initial_guess)\n\n    # Create the plot\n    fig, ax = plt.subplots()\n    ax.scatter(x_data, y_data, label='Data points')\n    x_fit = np.linspace(0, len(y_data)-1, 100)\n    y_fit = exp_decay(x_fit, *popt)\n    ax.plot(x_fit, y_fit, 'r-', label='Exponential fit')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.set_title(f'Exponential Decay Fit (Target: {target_value})')\n    ax.legend()\n\n    return popt, ax",
  "model": "mistral-3.2-24b"
}