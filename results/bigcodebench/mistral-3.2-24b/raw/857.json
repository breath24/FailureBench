{
  "task_id": "BigCodeBench/857",
  "instruct_prompt": "Transfer files from one directory (SOURCE_DIR) to another (DEST_DIR) based on the specified file extensions (EXTENSIONS). It also issues warnings for files that could not be transferred due to any issues.\nThe function should output with:\n    transferred_files (list): A list containing the names of files that were successfully transferred.\nYou should write self-contained code starting with:\n```\nimport warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n```",
  "llm_response": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from SOURCE_DIR to DEST_DIR based on specified extensions.\n\n    Args:\n        SOURCE_DIR (str): Path to source directory\n        DEST_DIR (str): Path to destination directory\n        EXTENSIONS (list): List of file extensions to transfer (e.g., ['.txt', '.csv'])\n\n    Returns:\n        list: Names of successfully transferred files\n    \"\"\"\n    transferred_files = []\n\n    # Create destination directory if it doesn't exist\n    os.makedirs(DEST_DIR, exist_ok=True)\n\n    # Get all files with specified extensions in source directory\n    for ext in EXTENSIONS:\n        pattern = os.path.join(SOURCE_DIR, f'*{ext}')\n        files = glob.glob(pattern)\n\n        for file_path in files:\n            try:\n                # Get just the filename (without path)\n                filename = os.path.basename(file_path)\n                dest_path = os.path.join(DEST_DIR, filename)\n\n                # Transfer the file\n                shutil.move(file_path, dest_path)\n                transferred_files.append(filename)\n\n            except Exception as e:\n                warnings.warn(f\"Failed to transfer {file_path}: {str(e)}\")\n\n    return transferred_files",
  "model": "mistral-3.2-24b"
}