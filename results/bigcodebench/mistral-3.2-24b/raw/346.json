{
  "task_id": "BigCodeBench/346",
  "instruct_prompt": "Run a Python script as a process with predefined arguments. By default, waits for the process to complete. If wait is False, the function returns None. Raise: - ValueError: If the script does not exist. - subprocess.CalledProcessError: If the script raises an exception.\nThe function should output with:\n    int: The return code of the subprocess. If 'wait' is False, returns None.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n```",
  "llm_response": "import subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run a Python script as a process with predefined arguments.\n\n    Args:\n        script_path (str): Path to the Python script to execute\n        wait (bool): Whether to wait for the process to complete (default: True)\n        *args: Additional arguments to pass to the script\n\n    Returns:\n        int: The return code of the subprocess. If 'wait' is False, returns None.\n\n    Raises:\n        ValueError: If the script does not exist\n        subprocess.CalledProcessError: If the script raises an exception\n    \"\"\"\n    # Check if script exists\n    if not os.path.isfile(script_path):\n        raise ValueError(f\"Script does not exist: {script_path}\")\n\n    # Prepare the command\n    command = [sys.executable, script_path] + list(args)\n\n    try:\n        # Run the process\n        process = subprocess.Popen(\n            command,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True\n        )\n\n        if wait:\n            # Wait for the process to complete\n            stdout, stderr = process.communicate()\n\n            # Check for errors\n            if process.returncode != 0:\n                raise subprocess.CalledProcessError(\n                    process.returncode,\n                    command,\n                    stdout=stdout,\n                    stderr=stderr\n                )\n\n            return process.returncode\n        else:\n            # Don't wait, return None\n            return None\n\n    except subprocess.CalledProcessError as e:\n        # Re-raise the exception with more context\n        raise subprocess.CalledProcessError(\n            e.returncode,\n            e.cmd,\n            e.output,\n            e.stderr\n        ) from e\n    except Exception as e:\n        # Convert other exceptions to CalledProcessError\n        raise subprocess.CalledProcessError(\n            -1,\n            command,\n            \"\",\n            str(e)\n        ) from e",
  "model": "mistral-3.2-24b"
}