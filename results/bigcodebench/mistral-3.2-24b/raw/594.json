{
  "task_id": "BigCodeBench/594",
  "instruct_prompt": "Generate weather data for the specified number of hours, save it in a CSV file with colomns 'Time' and 'Condition' and back up the file to a backup directory.\nThe function should output with:\n    str: The path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
  "llm_response": "import csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import choice\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\nBACKUP_DIR = './backup'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data for specified hours, save to CSV, and create backup.\n\n    Args:\n        hours (int): Number of hours of weather data to generate\n        output_dir (str): Directory to save the output file\n\n    Returns:\n        str: Path of the generated CSV file\n    \"\"\"\n    # Create directories if they don't exist\n    os.makedirs(output_dir, exist_ok=True)\n    os.makedirs(BACKUP_DIR, exist_ok=True)\n\n    # Generate current time and filename\n    now = datetime.now()\n    filename = f\"weather_data_{now.strftime('%Y%m%d_%H%M%S')}.csv\"\n    filepath = os.path.join(output_dir, filename)\n\n    # Generate weather data\n    with open(filepath, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', 'Condition'])\n\n        current_time = datetime.now()\n        for _ in range(hours):\n            condition = choice(WEATHER_CONDITIONS)\n            writer.writerow([current_time.strftime('%Y-%m-%d %H:%M:%S'), condition])\n            current_time += timedelta(hours=1)\n\n    # Create backup\n    backup_path = os.path.join(BACKUP_DIR, filename)\n    shutil.copy2(filepath, backup_path)\n\n    return filepath",
  "model": "mistral-3.2-24b"
}