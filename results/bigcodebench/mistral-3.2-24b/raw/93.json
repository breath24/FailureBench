{
  "task_id": "BigCodeBench/93",
  "instruct_prompt": "Perform Principal Component Analysis (PCA) on a dataset and record the result. Also, generates a scatter plot of the transformed data.\nThe function should raise the exception for: ValueError: If n_components is not a positive integer.\nThe function should output with:\n    DataFrame: The transformed data with principal components.\n    Axes: The matplotlib Axes object containing the scatter plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n```",
  "llm_response": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform PCA on the input data and return the transformed data and a scatter plot.\n\n    Parameters:\n    data (array-like): Input data to perform PCA on\n    n_components (int): Number of principal components to keep (default=2)\n\n    Returns:\n    tuple: (DataFrame of transformed data, matplotlib Axes object)\n\n    Raises:\n    ValueError: If n_components is not a positive integer\n    \"\"\"\n    # Validate n_components\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n\n    # Convert data to numpy array if it isn't already\n    data_array = np.array(data)\n\n    # Perform PCA\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data_array)\n\n    # Create DataFrame with principal components\n    columns = [f'PC{i+1}' for i in range(n_components)]\n    df_transformed = pd.DataFrame(transformed_data, columns=columns)\n\n    # Create scatter plot\n    fig, ax = plt.subplots(figsize=(8, 6))\n    if n_components == 1:\n        ax.scatter(transformed_data, np.zeros_like(transformed_data), alpha=0.5)\n        ax.set_xlabel('Principal Component 1')\n    elif n_components == 2:\n        ax.scatter(transformed_data[:, 0], transformed_data[:, 1], alpha=0.5)\n        ax.set_xlabel('Principal Component 1')\n        ax.set_ylabel('Principal Component 2')\n    else:\n        # For more than 2 components, plot first two\n        ax.scatter(transformed_data[:, 0], transformed_data[:, 1], alpha=0.5)\n        ax.set_xlabel('Principal Component 1')\n        ax.set_ylabel('Principal Component 2')\n        ax.set_title('First Two Principal Components')\n\n    ax.set_title('PCA Scatter Plot')\n    plt.grid(True)\n\n    return df_transformed, ax",
  "model": "mistral-3.2-24b"
}