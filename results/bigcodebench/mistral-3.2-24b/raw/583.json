{
  "task_id": "BigCodeBench/583",
  "instruct_prompt": "Generates an RSA public and private key pair and saves the private key in a file after encrypting it with a password using AES encryption. Returns the public key and the filename of the encrypted private key, along with encryption details for testing. The name of the output file is a in the format of \"private_key_<number>.txt\", where <number> is a the hex representation of the 8 randomly generated bytes.\nThe function should output with:\n    rsa.PublicKey: The RSA public key.\n    str: The filename where the encrypted private key is stored.\n    bytes: The encryption password, for testing decryption.\n    bytes: The encryption nonce, for testing decryption.\nYou should write self-contained code starting with:\n```\nimport rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n```",
  "llm_response": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n    # Generate RSA key pair\n    (pubkey, privkey) = rsa.newkeys(2048)\n\n    # Generate random bytes for filename\n    random_bytes = get_random_bytes(8)\n    filename = f\"private_key_{random_bytes.hex()}.txt\"\n\n    # Generate AES encryption key and nonce\n    password = get_random_bytes(32)  # AES-256 key\n    nonce = get_random_bytes(16)     # AES nonce\n\n    # Convert private key to bytes\n    privkey_bytes = rsa.PrivateKey.save_pkcs1(privkey).encode('utf-8')\n\n    # Encrypt the private key with AES\n    cipher = AES.new(password, AES.MODE_EAX, nonce=nonce)\n    ciphertext, tag = cipher.encrypt_and_digest(privkey_bytes)\n\n    # Save encrypted private key to file\n    with open(filename, 'wb') as f:\n        # Write nonce, tag, and ciphertext\n        [f.write(x) for x in (nonce, tag, ciphertext)]\n\n    return pubkey, filename, password, nonce",
  "model": "mistral-3.2-24b"
}