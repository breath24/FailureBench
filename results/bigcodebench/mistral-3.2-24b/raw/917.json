{
  "task_id": "BigCodeBench/917",
  "instruct_prompt": "Forecasts the share closing prices for the next 7 days using the ARIMA model and plots the forecast.\nThe function should output with:\n    Tuple[List[float], Axes]: A tuple containing:\n    A list with forecasted prices for the next 7 days.\n    A matplotlib Axes object containing the subplot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n```",
  "llm_response": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts the share closing prices for the next 7 days using ARIMA model.\n\n    Args:\n        df: DataFrame containing historical share prices with a 'Close' column and datetime index\n\n    Returns:\n        Tuple containing:\n        - List of forecasted prices for the next 7 days\n        - Matplotlib Axes object with the plot\n    \"\"\"\n    # Ensure the DataFrame has a datetime index\n    if not isinstance(df.index, pd.DatetimeIndex):\n        raise ValueError(\"DataFrame must have a datetime index\")\n\n    # Extract the closing prices\n    close_prices = df['Close'].copy()\n\n    # Fit ARIMA model (using common parameters, you may want to optimize these)\n    # Note: In practice, you should use auto_arima or grid search to find optimal parameters\n    model = ARIMA(close_prices, order=(5, 1, 0))  # Example parameters\n    model_fit = model.fit()\n\n    # Forecast for the next 7 days\n    forecast = model_fit.forecast(steps=7)\n\n    # Create the plot\n    fig, ax = plt.subplots(figsize=(12, 6))\n\n    # Plot historical data\n    ax.plot(close_prices.index, close_prices, label='Historical Prices', color='blue')\n\n    # Plot forecast\n    forecast_index = pd.date_range(close_prices.index[-1] + pd.Timedelta(days=1), periods=7)\n    ax.plot(forecast_index, forecast, label='Forecast', color='red', linestyle='--')\n\n    # Add title and labels\n    ax.set_title('Share Price Forecast using ARIMA')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Price')\n    ax.legend()\n\n    # Format x-axis to show dates nicely\n    ax.xaxis.set_major_locator(plt.MaxNLocator(10))\n    plt.xticks(rotation=45)\n\n    return forecast.tolist(), ax",
  "model": "mistral-3.2-24b"
}