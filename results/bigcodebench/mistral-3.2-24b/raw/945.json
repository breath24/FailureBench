{
  "task_id": "BigCodeBench/945",
  "instruct_prompt": "Generates a time series of sales data starting from a specified date, then use linear regression to forecast future sales based on the provided or generated sales data.\nThe function should output with:\n    A numpy array containing the forecasted future sales for the same number of periods as the input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates a time series of sales data and forecasts future sales using linear regression.\n\n    Parameters:\n    - start_date: str, starting date for the time series (default: '2016-01-01')\n    - periods: int, number of periods to generate/forecast (default: 13)\n    - freq: str, frequency of the time series (default: 'WOM-2FRI' - weekly on Monday)\n    - sales_data: array-like, optional existing sales data to use instead of generating\n\n    Returns:\n    - numpy array of forecasted future sales for the same number of periods as input\n    \"\"\"\n\n    # Generate or use provided sales data\n    if sales_data is None:\n        # Generate random sales data with some seasonality\n        np.random.seed(42)\n        dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n        base_sales = 100 + 20 * np.random.randn(periods)\n        seasonal = 30 * np.sin(np.linspace(0, 4*np.pi, periods))\n        sales_data = base_sales + seasonal\n    else:\n        sales_data = np.array(sales_data)\n        dates = pd.date_range(start=start_date, periods=len(sales_data), freq=freq)\n\n    # Prepare data for linear regression\n    X = np.arange(len(sales_data)).reshape(-1, 1)  # Time as feature\n    y = sales_data\n\n    # Create and fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Forecast future sales\n    future_X = np.arange(len(sales_data), len(sales_data) + periods).reshape(-1, 1)\n    forecast = model.predict(future_X)\n\n    return forecast",
  "model": "mistral-3.2-24b"
}