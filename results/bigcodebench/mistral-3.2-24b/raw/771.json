{
  "task_id": "BigCodeBench/771",
  "instruct_prompt": "Processes CSV files in a directory based on a specified pattern and creates new files with altered names while preserving the content, you've laid out a solid foundation with your initial tests.\nThe function should output with:\n    new_files (list): A list of strings, where each string is the filename of a new CSV file created by the function.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n```",
  "llm_response": "import re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    \"\"\"\n    Processes CSV files in a directory based on a specified pattern and creates new files\n    with altered names while preserving the content.\n\n    Args:\n        directory (str): Path to the directory containing CSV files\n        pattern (str): Regular expression pattern to match filenames (default matches names with numbers before .csv)\n\n    Returns:\n        list: A list of strings containing the filenames of the newly created CSV files\n    \"\"\"\n    new_files = []\n    directory_path = Path(directory)\n\n    # Verify directory exists\n    if not directory_path.exists():\n        raise ValueError(f\"Directory does not exist: {directory}\")\n\n    # Process each file in the directory\n    for file_path in directory_path.glob('*.csv'):\n        file_name = file_path.name\n        match = re.fullmatch(pattern, file_name)\n\n        if match:\n            # Extract the base name (without the number and .csv)\n            base_name = match.group(1)\n\n            # Create new filename by removing the number\n            new_file_name = f\"{base_name}.csv\"\n            new_file_path = file_path.with_name(new_file_name)\n\n            # Skip if new filename already exists\n            if new_file_path.exists():\n                continue\n\n            # Copy the content to the new file\n            with open(file_path, 'r', newline='') as src_file, \\\n                 open(new_file_path, 'w', newline='') as dest_file:\n                reader = csv.reader(src_file)\n                writer = csv.writer(dest_file)\n                for row in reader:\n                    writer.writerow(row)\n\n            new_files.append(new_file_name)\n\n    return new_files",
  "model": "mistral-3.2-24b"
}