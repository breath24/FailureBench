{
  "task_id": "BigCodeBench/590",
  "instruct_prompt": "Extracts the text and href attributes of all anchor tags from a given URL's HTML content, and returns this data in a pandas DataFrame along with the time of data extraction.\nNote that: The function requires internet connectivity to fetch HTML content.\nThe function should raise the exception for: ValueError: If the provided URL is invalid or empty. URLError: If there is an issue with network connectivity or the server.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'. Each row\n    corresponds to an anchor tag in the HTML, with 'text' and 'href' containing\n    the text and the hyperlink reference of the anchor tag, respectively.\n    'fetch_time' contains the timestamp of when the data was fetched in the format\n    'YYYY-MM-DD HH:MM:SS'.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n```",
  "llm_response": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\nfrom urllib.error import URLError, ValueError\ndef task_func(url):\n    \"\"\"\n    Extracts text and href attributes of all anchor tags from a given URL's HTML content.\n\n    Args:\n        url (str): The URL to fetch HTML content from.\n\n    Returns:\n        pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'.\n\n    Raises:\n        ValueError: If the provided URL is invalid or empty.\n        URLError: If there is an issue with network connectivity or the server.\n    \"\"\"\n    # Validate URL\n    if not url or not isinstance(url, str):\n        raise ValueError(\"URL must be a non-empty string\")\n\n    try:\n        # Fetch HTML content\n        with urllib.request.urlopen(url) as response:\n            html_content = response.read().decode('utf-8')\n\n        # Parse HTML and extract anchor tags\n        doc = pq(html_content)\n        anchors = doc('a')\n\n        # Prepare data\n        data = []\n        fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n        for anchor in anchors:\n            text = anchor.text_content().strip()\n            href = anchor.get('href', '').strip()\n            data.append({'text': text, 'href': href, 'fetch_time': fetch_time})\n\n        # Create DataFrame\n        df = pd.DataFrame(data)\n\n        return df\n\n    except URLError as e:\n        raise URLError(f\"Failed to fetch URL: {e.reason}\")\n    except Exception as e:\n        raise URLError(f\"An error occurred while processing the URL: {str(e)}\")",
  "model": "mistral-3.2-24b"
}