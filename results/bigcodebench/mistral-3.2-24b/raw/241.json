{
  "task_id": "BigCodeBench/241",
  "instruct_prompt": "Create a numeric array from the \"original\" list, normalize the array, and draw the original and normalized arrays. The function will plot the original and normalized arrays with a title of 'Original vs. Normalized Data'.\nThe function should output with:\n    np.array: A numpy array for the original data.\n    np.array: Normalized array.\n    matplotlib.axes.Axes: Axes object with the plotted data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n```",
  "llm_response": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n    \"\"\"\n    Normalizes the input array and plots both original and normalized data.\n\n    Parameters:\n    original (list): List of numeric values to be normalized\n\n    Returns:\n    tuple: (original_array, normalized_array, axes)\n        original_array: numpy array of original data\n        normalized_array: normalized numpy array\n        axes: matplotlib.axes.Axes object with the plot\n    \"\"\"\n    # Convert original list to numpy array\n    original_array = np.array(original)\n\n    # Normalize the array using MinMaxScaler (scales to [0, 1] range)\n    scaler = preprocessing.MinMaxScaler()\n    normalized_array = scaler.fit_transform(original_array.reshape(-1, 1)).flatten()\n\n    # Create the plot\n    fig, ax = plt.subplots()\n    ax.plot(original_array, label='Original Data', marker='o')\n    ax.plot(normalized_array, label='Normalized Data', marker='x')\n    ax.set_title('Original vs. Normalized Data')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.legend()\n    ax.grid(True)\n\n    return original_array, normalized_array, ax",
  "model": "mistral-3.2-24b"
}