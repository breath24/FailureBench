{
  "task_id": "BigCodeBench/574",
  "instruct_prompt": "Create a noisy sine wave of a specified length and adjusts a curve using curve_fit from scipy.optimize to the data.\nThe function should output with:\n    Axes object: A plot showing the noisy sine wave and its adjusted curve.\nYou should write self-contained code starting with:\n```\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n```",
  "llm_response": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    \"\"\"\n    Generate a noisy sine wave and fit a curve to it.\n\n    Parameters:\n    array_length (int): The length of the array.\n    noise_level (float): The level of noise in the sine wave.\n\n    Returns:\n    Axes object: A plot showing the noisy sine wave and its adjusted curve.\n    \"\"\"\n    # Generate x values\n    x = np.linspace(0, 10, array_length)\n\n    # Generate a sine wave with noise\n    y = np.sin(x) + noise_level * np.random.normal(0, 1, array_length)\n\n    # Define the function to fit\n    def func(x, a, b, c):\n        return a * np.sin(b * x + c)\n\n    # Initial guess for the parameters\n    p0 = [1, 1, 0]\n\n    # Fit the curve\n    popt, pcov = curve_fit(func, x, y, p0=p0)\n\n    # Generate the fitted curve\n    y_fit = func(x, *popt)\n\n    # Create the plot\n    plt.plot(x, y, label='Noisy sine wave')\n    plt.plot(x, y_fit, label='Fitted curve')\n    plt.legend()\n    plt.show()\n\n    return plt.gca()",
  "model": "llama-3.3-70b"
}