{
  "task_id": "BigCodeBench/324",
  "instruct_prompt": "Run files from list of files as subprocesses at the same time.\nThe function should output with:\n    list: The exit codes of the subprocesses.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport time\nimport threading\ndef task_func(file_list):\n```",
  "llm_response": "import subprocess\nimport time\nimport threading\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\ndef task_func(file_list):\n    \"\"\"\n    Run files from list of files as subprocesses at the same time.\n\n    Args:\n        file_list (list): A list of files to be executed as subprocesses.\n\n    Returns:\n        list: A list of exit codes of the subprocesses.\n    \"\"\"\n    # Create a dictionary to store the results\n    results = {}\n    # Create a ThreadPoolExecutor to manage the threads\n    with ThreadPoolExecutor() as executor:\n        # Submit each file to be executed as a subprocess\n        futures = {executor.submit(run_file, file): file for file in file_list}\n        \n        # As each subprocess completes, store its exit code in the results dictionary\n        for future in as_completed(futures):\n            file = futures[future]\n            try:\n                # Get the exit code of the subprocess\n                exit_code = future.result()\n            except Exception as e:\n                # If an exception occurred, store the exception message\n                results[file] = str(e)\n            else:\n                # Store the exit code\n                results[file] = exit_code\n\n    # Convert the results dictionary to a list\n    exit_codes = [results[file] for file in file_list]\n    return exit_codes\ndef run_file(file):\n    \"\"\"\n    Run a file as a subprocess and return its exit code.\n\n    Args:\n        file (str): The file to be executed.\n\n    Returns:\n        int: The exit code of the subprocess.\n    \"\"\"\n    # Run the file as a subprocess and wait for it to complete\n    process = subprocess.Popen([file], shell=True)\n    process.wait()\n    # Return the exit code of the subprocess\n    return process.returncode",
  "model": "llama-3.3-70b"
}