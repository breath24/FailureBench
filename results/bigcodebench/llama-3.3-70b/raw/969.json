{
  "task_id": "BigCodeBench/969",
  "instruct_prompt": "Computes the MinMax-normalized cumulative sum for each numeric column in the given DataFrame.\nThe function should raise the exception for: TypeError: If the DataFrame contains non-numeric data types. ValueError: If the DataFrame is empty or contains NaN values.\nThe function should output with:\n    pd.DataFrame: A DataFrame where each column contains the normalized cumulative sum of the\n    respective column in the input DataFrame, retaining the original column names.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n```",
  "llm_response": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Computes the MinMax-normalized cumulative sum for each numeric column in the given DataFrame.\n\n    Args:\n    df (pd.DataFrame): The input DataFrame.\n\n    Returns:\n    pd.DataFrame: A DataFrame where each column contains the normalized cumulative sum of the\n    respective column in the input DataFrame, retaining the original column names.\n\n    Raises:\n    TypeError: If the DataFrame contains non-numeric data types.\n    ValueError: If the DataFrame is empty or contains NaN values.\n    \"\"\"\n\n    # Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n\n    # Check if the DataFrame contains NaN values\n    if df.isnull().values.any():\n        raise ValueError(\"The DataFrame contains NaN values.\")\n\n    # Check if the DataFrame contains non-numeric data types\n    if not df.apply(lambda s: pd.api.types.is_numeric_dtype(s)).all():\n        raise TypeError(\"The DataFrame contains non-numeric data types.\")\n\n    # Initialize an empty list to store the normalized cumulative sums\n    normalized_cumulative_sums = []\n\n    # Iterate over each column in the DataFrame\n    for column in df.columns:\n        # Calculate the cumulative sum of the current column\n        cumulative_sum = df[column].cumsum()\n\n        # Apply MinMaxScaler to the cumulative sum\n        scaler = MinMaxScaler()\n        normalized_cumulative_sum = scaler.fit_transform(cumulative_sum.values.reshape(-1, 1)).flatten()\n\n        # Append the normalized cumulative sum to the list\n        normalized_cumulative_sums.append(normalized_cumulative_sum)\n\n    # Create a new DataFrame with the normalized cumulative sums\n    result_df = pd.DataFrame(np.array(normalized_cumulative_sums).T, columns=df.columns)\n\n    return result_df",
  "model": "llama-3.3-70b"
}