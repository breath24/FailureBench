{
  "task_id": "BigCodeBench/503",
  "instruct_prompt": "Create a DataFrame of stock prices for a specified number of days in the past using random data.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing random stock prices for the specified number of days.\n    Prices are floats in [0.0,1.0).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n```",
  "llm_response": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\ndef task_func(\n    days_in_past=7, \n    stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], \n    random_seed=0\n):\n    \"\"\"\n    Generate a DataFrame of random stock prices for a specified number of days in the past.\n\n    Args:\n    - days_in_past (int): The number of days in the past to generate stock prices for. Defaults to 7.\n    - stock_names (list): A list of stock names. Defaults to [\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"].\n    - random_seed (int): The seed for the random number generator. Defaults to 0.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame containing random stock prices for the specified number of days.\n    \"\"\"\n\n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n\n    # Generate a date range for the specified number of days in the past\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=days_in_past)\n    date_range = pd.date_range(start=start_date, end=end_date, freq='D')\n\n    # Generate random stock prices for each stock\n    data = {\n        stock: np.random.uniform(0.0, 1.0, size=len(date_range)) \n        for stock in stock_names\n    }\n\n    # Create a DataFrame with the date range as the index and the stock prices as columns\n    df = pd.DataFrame(data, index=date_range)\n\n    return df",
  "model": "llama-3.3-70b"
}