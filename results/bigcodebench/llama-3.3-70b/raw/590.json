{
  "task_id": "BigCodeBench/590",
  "instruct_prompt": "Extracts the text and href attributes of all anchor tags from a given URL's HTML content, and returns this data in a pandas DataFrame along with the time of data extraction.\nNote that: The function requires internet connectivity to fetch HTML content.\nThe function should raise the exception for: ValueError: If the provided URL is invalid or empty. URLError: If there is an issue with network connectivity or the server.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'. Each row\n    corresponds to an anchor tag in the HTML, with 'text' and 'href' containing\n    the text and the hyperlink reference of the anchor tag, respectively.\n    'fetch_time' contains the timestamp of when the data was fetched in the format\n    'YYYY-MM-DD HH:MM:SS'.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n```",
  "llm_response": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n    \"\"\"\n    Extracts the text and href attributes of all anchor tags from a given URL's HTML content,\n    and returns this data in a pandas DataFrame along with the time of data extraction.\n\n    Args:\n        url (str): The URL to extract anchor tags from.\n\n    Returns:\n        pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'.\n            Each row corresponds to an anchor tag in the HTML, with 'text' and 'href'\n            containing the text and the hyperlink reference of the anchor tag, respectively.\n            'fetch_time' contains the timestamp of when the data was fetched in the format\n            'YYYY-MM-DD HH:MM:SS'.\n\n    Raises:\n        ValueError: If the provided URL is invalid or empty.\n        URLError: If there is an issue with network connectivity or the server.\n    \"\"\"\n\n    # Check if the URL is valid\n    if not url:\n        raise ValueError(\"Invalid or empty URL\")\n\n    try:\n        # Send a GET request to the URL\n        response = urllib.request.urlopen(url)\n        \n        # Check if the request was successful\n        if response.status != 200:\n            raise urllib.error.URLError(\"Failed to retrieve HTML content\")\n\n        # Parse the HTML content using PyQuery\n        html = pq(response.read())\n\n        # Extract the text and href attributes of all anchor tags\n        anchor_tags = html('a')\n        data = []\n        for tag in anchor_tags:\n            text = tag.text\n            href = tag.get('href')\n            data.append({\n                'text': text,\n                'href': href\n            })\n\n        # Get the current timestamp\n        fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n        # Create a pandas DataFrame with the extracted data and timestamp\n        df = pd.DataFrame(data)\n        df['fetch_time'] = fetch_time\n\n        return df\n\n    except urllib.error.URLError as e:\n        raise urllib.error.URLError(\"Failed to retrieve HTML content: {}\".format(e))\nurl = \"http://example.com\"",
  "model": "llama-3.3-70b"
}