{
  "task_id": "BigCodeBench/346",
  "instruct_prompt": "Run a Python script as a process with predefined arguments. By default, waits for the process to complete. If wait is False, the function returns None. Raise: - ValueError: If the script does not exist. - subprocess.CalledProcessError: If the script raises an exception.\nThe function should output with:\n    int: The return code of the subprocess. If 'wait' is False, returns None.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n```",
  "llm_response": "import subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run a Python script as a process with predefined arguments.\n\n    Args:\n        script_path (str): The path to the Python script.\n        wait (bool, optional): Whether to wait for the process to complete. Defaults to True.\n        *args: Variable number of arguments to pass to the script.\n\n    Returns:\n        int: The return code of the subprocess. If 'wait' is False, returns None.\n\n    Raises:\n        ValueError: If the script does not exist.\n        subprocess.CalledProcessError: If the script raises an exception.\n    \"\"\"\n    # Check if the script exists\n    if not os.path.exists(script_path):\n        raise ValueError(\"The script does not exist.\")\n\n    # Construct the command to run the script\n    command = [sys.executable, script_path] + list(args)\n\n    # Run the script as a subprocess\n    try:\n        process = subprocess.Popen(command)\n        if wait:\n            # Wait for the process to complete and return the return code\n            return_code = process.wait()\n            if return_code != 0:\n                raise subprocess.CalledProcessError(return_code, command)\n            return return_code\n        else:\n            # Do not wait for the process to complete and return None\n            return None\n    except subprocess.CalledProcessError as e:\n        # Re-raise the exception if the script raises an exception\n        raise e",
  "model": "llama-3.3-70b"
}