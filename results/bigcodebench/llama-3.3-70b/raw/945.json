{
  "task_id": "BigCodeBench/945",
  "instruct_prompt": "Generates a time series of sales data starting from a specified date, then use linear regression to forecast future sales based on the provided or generated sales data.\nThe function should output with:\n    A numpy array containing the forecasted future sales for the same number of periods as the input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates a time series of sales data starting from a specified date, \n    then uses linear regression to forecast future sales based on the provided or generated sales data.\n\n    Args:\n    start_date (str): The start date of the time series. Defaults to '2016-01-01'.\n    periods (int): The number of periods in the time series. Defaults to 13.\n    freq (str): The frequency of the time series. Defaults to 'WOM-2FRI'.\n    sales_data (list or numpy array): The sales data. If None, it will be generated. Defaults to None.\n\n    Returns:\n    numpy array: A numpy array containing the forecasted future sales for the same number of periods as the input data.\n    \"\"\"\n\n    # Generate sales data if not provided\n    if sales_data is None:\n        # Generate a time series with the specified frequency\n        date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n        \n        # Generate random sales data\n        np.random.seed(0)  # For reproducibility\n        sales_data = np.random.randint(100, 200, size=periods)\n\n    # Create a pandas DataFrame with the sales data\n    df = pd.DataFrame({'Date': pd.date_range(start=start_date, periods=periods, freq=freq), \n                       'Sales': sales_data})\n\n    # Create a linear regression model\n    X = np.arange(len(df)).reshape(-1, 1)  # Feature: time\n    y = df['Sales'].values  # Target: sales\n\n    # Train the model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Forecast future sales\n    future_X = np.arange(len(df), len(df) + len(df)).reshape(-1, 1)  # Feature: future time\n    forecasted_sales = model.predict(future_X)\n\n    return forecasted_sales",
  "model": "llama-3.3-70b"
}