{
  "task_id": "BigCodeBench/93",
  "instruct_prompt": "Perform Principal Component Analysis (PCA) on a dataset and record the result. Also, generates a scatter plot of the transformed data.\nThe function should raise the exception for: ValueError: If n_components is not a positive integer.\nThe function should output with:\n    DataFrame: The transformed data with principal components.\n    Axes: The matplotlib Axes object containing the scatter plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n```",
  "llm_response": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on a dataset and record the result.\n    Also, generates a scatter plot of the transformed data.\n\n    Args:\n        data (pd.DataFrame): The input dataset.\n        n_components (int, optional): The number of principal components to retain. Defaults to 2.\n\n    Returns:\n        pd.DataFrame: The transformed data with principal components.\n        plt.Axes: The matplotlib Axes object containing the scatter plot.\n\n    Raises:\n        ValueError: If n_components is not a positive integer.\n    \"\"\"\n    # Check if n_components is a positive integer\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n\n    # Perform PCA\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n\n    # Convert the transformed data to a DataFrame\n    transformed_df = pd.DataFrame(transformed_data, columns=[f\"PC{i+1}\" for i in range(n_components)])\n\n    # Generate a scatter plot of the transformed data\n    fig, ax = plt.subplots()\n    if n_components == 2:\n        ax.scatter(transformed_df[\"PC1\"], transformed_df[\"PC2\"])\n    elif n_components == 3:\n        ax = fig.add_subplot(projection='3d')\n        ax.scatter(transformed_df[\"PC1\"], transformed_df[\"PC2\"], transformed_df[\"PC3\"])\n    else:\n        raise ValueError(\"n_components must be 2 or 3 for scatter plot\")\n\n    # Set title and labels\n    ax.set_title(\"Scatter Plot of Transformed Data\")\n    ax.set_xlabel(\"Principal Component 1\")\n    if n_components == 2:\n        ax.set_ylabel(\"Principal Component 2\")\n    elif n_components == 3:\n        ax.set_ylabel(\"Principal Component 2\")\n        ax.set_zlabel(\"Principal Component 3\")\n\n    return transformed_df, ax",
  "model": "llama-3.3-70b"
}