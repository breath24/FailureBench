{
  "task_id": "BigCodeBench/785",
  "instruct_prompt": "Archive all files that match a particular pattern and then delete the original files.\nNote that: This function will return the archive file path.\nThe function should output with:\n    archive_file (str): The archive file path.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n```",
  "llm_response": "import subprocess\nimport os\nimport glob\nimport shutil\nimport tarfile\nfrom datetime import datetime\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n\n    Args:\n        pattern (str): The pattern to match files.\n\n    Returns:\n        str: The archive file path.\n    \"\"\"\n    # Create the archive directory if it doesn't exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n\n    # Get the current date and time\n    current_datetime = datetime.now().strftime(\"%Y-%m-%d-%H-%M-%S\")\n\n    # Create the archive file path\n    archive_file = os.path.join(ARCHIVE_DIR, f\"archive_{current_datetime}.tar.gz\")\n\n    # Find all files that match the pattern\n    files_to_archive = glob.glob(pattern)\n\n    # Create a tarball with the matched files\n    with tarfile.open(archive_file, \"w:gz\") as tar:\n        for file in files_to_archive:\n            tar.add(file)\n\n    # Delete the original files\n    for file in files_to_archive:\n        os.remove(file)\n\n    return archive_file",
  "model": "llama-3.3-70b"
}