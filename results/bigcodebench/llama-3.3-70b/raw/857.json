{
  "task_id": "BigCodeBench/857",
  "instruct_prompt": "Transfer files from one directory (SOURCE_DIR) to another (DEST_DIR) based on the specified file extensions (EXTENSIONS). It also issues warnings for files that could not be transferred due to any issues.\nThe function should output with:\n    transferred_files (list): A list containing the names of files that were successfully transferred.\nYou should write self-contained code starting with:\n```\nimport warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n```",
  "llm_response": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from one directory to another based on specified file extensions.\n\n    Args:\n    SOURCE_DIR (str): The source directory containing the files to be transferred.\n    DEST_DIR (str): The destination directory where the files will be transferred.\n    EXTENSIONS (list): A list of file extensions to be transferred.\n\n    Returns:\n    list: A list containing the names of files that were successfully transferred.\n    \"\"\"\n    # Initialize an empty list to store the names of transferred files\n    transferred_files = []\n\n    # Check if the source and destination directories exist\n    if not os.path.exists(SOURCE_DIR):\n        warnings.warn(f\"Source directory '{SOURCE_DIR}' does not exist.\")\n        return transferred_files\n    if not os.path.exists(DEST_DIR):\n        warnings.warn(f\"Destination directory '{DEST_DIR}' does not exist. Creating it...\")\n        os.makedirs(DEST_DIR)\n\n    # Iterate over each file extension\n    for extension in EXTENSIONS:\n        # Find all files with the current extension in the source directory\n        files = glob.glob(os.path.join(SOURCE_DIR, f\"*.{extension}\"))\n\n        # Iterate over each file\n        for file in files:\n            # Get the file name\n            filename = os.path.basename(file)\n\n            # Try to transfer the file\n            try:\n                # Copy the file to the destination directory\n                shutil.copy2(file, DEST_DIR)\n                # Add the file name to the list of transferred files\n                transferred_files.append(filename)\n                print(f\"Transferred '{filename}' to '{DEST_DIR}'\")\n            except Exception as e:\n                # Issue a warning if the file could not be transferred\n                warnings.warn(f\"Failed to transfer '{filename}': {str(e)}\")\n\n    return transferred_files",
  "model": "llama-3.3-70b"
}