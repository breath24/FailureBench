{
  "task_id": "BigCodeBench/594",
  "instruct_prompt": "Generate weather data for the specified number of hours, save it in a CSV file with colomns 'Time' and 'Condition' and back up the file to a backup directory.\nThe function should output with:\n    str: The path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
  "llm_response": "import csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import choice\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\nBACKUP_DIR = './backup'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data for the specified number of hours, save it in a CSV file \n    with columns 'Time' and 'Condition' and back up the file to a backup directory.\n\n    Args:\n        hours (int): The number of hours to generate weather data for.\n        output_dir (str, optional): The directory to save the CSV file. Defaults to OUTPUT_DIR.\n\n    Returns:\n        str: The path of the generated CSV file.\n    \"\"\"\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Create backup directory if it doesn't exist\n    if not os.path.exists(BACKUP_DIR):\n        os.makedirs(BACKUP_DIR)\n\n    # Generate current time\n    current_time = datetime.now()\n\n    # Generate weather data\n    weather_data = []\n    for i in range(hours):\n        time = current_time + timedelta(hours=i)\n        condition = choice(WEATHER_CONDITIONS)\n        weather_data.append({\n            'Time': time.strftime('%Y-%m-%d %H:%M:%S'),\n            'Condition': condition\n        })\n\n    # Save weather data to CSV file\n    csv_file_path = os.path.join(output_dir, 'weather_data.csv')\n    with open(csv_file_path, 'w', newline='') as csvfile:\n        fieldnames = ['Time', 'Condition']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        for row in weather_data:\n            writer.writerow(row)\n\n    # Back up the CSV file\n    backup_file_path = os.path.join(BACKUP_DIR, 'weather_data.csv')\n    shutil.copy2(csv_file_path, backup_file_path)\n\n    return csv_file_path",
  "model": "llama-3.3-70b"
}