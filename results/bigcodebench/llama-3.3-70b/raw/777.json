{
  "task_id": "BigCodeBench/777",
  "instruct_prompt": "Unzip all zip files in a directory whose name matches a certain pattern by splitting the filename the last time \"-\" occurs and using the prefix part of the filename as the directory to extract.\nThe function should output with:\n    list: A list of directories where the files were extracted.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n```",
  "llm_response": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzip all zip files in a directory whose name matches a certain pattern.\n\n    The function splits the filename at the last occurrence of \"-\" and uses the prefix part of the filename as the directory to extract.\n\n    Args:\n        directory (str): The path to the directory containing the zip files.\n        pattern (str, optional): The regular expression pattern to match the zip file names. Defaults to r'^(.*?)-\\d+\\.zip$'.\n\n    Returns:\n        list: A list of directories where the files were extracted.\n    \"\"\"\n    # Compile the regular expression pattern\n    regex = re.compile(pattern)\n\n    # Initialize an empty list to store the extracted directories\n    extracted_dirs = []\n\n    # Iterate over all files in the directory\n    for filename in os.listdir(directory):\n        # Check if the file is a zip file and its name matches the pattern\n        if filename.endswith('.zip') and regex.match(filename):\n            # Extract the prefix part of the filename (before the last \"-\")\n            prefix = filename.rsplit('-', 1)[0]\n\n            # Create the extraction directory if it does not exist\n            extract_dir = os.path.join(directory, prefix)\n            os.makedirs(extract_dir, exist_ok=True)\n\n            # Extract the zip file to the extraction directory\n            zip_path = os.path.join(directory, filename)\n            with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(extract_dir)\n\n            # Add the extraction directory to the list\n            extracted_dirs.append(extract_dir)\n\n    return extracted_dirs",
  "model": "llama-3.3-70b"
}