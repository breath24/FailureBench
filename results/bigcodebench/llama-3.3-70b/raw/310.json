{
  "task_id": "BigCodeBench/310",
  "instruct_prompt": "Generates a CSV file containing simulated data for 100 people, including name, age, height, and weight. It also calculates and appends the average age, height, and weight at the end of the file.\nThe function should output with:\n    str: The path of the created CSV file.\nYou should write self-contained code starting with:\n```\nimport os\nimport csv\nimport random\nfrom statistics import mean\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n```",
  "llm_response": "import os\nimport csv\nimport random\nfrom statistics import mean\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n    \"\"\"\n    Generates a CSV file containing simulated data for 100 people, \n    including name, age, height, and weight. It also calculates and \n    appends the average age, height, and weight at the end of the file.\n\n    Args:\n        filename (str): The name of the output CSV file.\n\n    Returns:\n        str: The path of the created CSV file.\n    \"\"\"\n\n    # Create lists to store simulated data\n    names = [f'Person {i}' for i in range(1, PEOPLE_COUNT + 1)]\n    ages = [random.randint(18, 80) for _ in range(PEOPLE_COUNT)]\n    heights = [round(random.uniform(150, 200), 2) for _ in range(PEOPLE_COUNT)]\n    weights = [round(random.uniform(40, 100), 2) for _ in range(PEOPLE_COUNT)]\n\n    # Calculate averages\n    avg_age = mean(ages)\n    avg_height = mean(heights)\n    avg_weight = mean(weights)\n\n    # Create a list of rows\n    rows = list(zip(names, ages, heights, weights))\n\n    # Append averages as a separate row\n    rows.append(['Average', avg_age, avg_height, avg_weight])\n\n    # Write data to CSV file\n    with open(filename, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(COLUMNS)  # Header\n        writer.writerows(rows)\n\n    # Return the path of the created CSV file\n    return os.path.abspath(filename)",
  "model": "llama-3.3-70b"
}