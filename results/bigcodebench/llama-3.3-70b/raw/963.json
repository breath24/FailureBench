{
  "task_id": "BigCodeBench/963",
  "instruct_prompt": "Zip files with certain extensions from a source directory and save it as a zip file saved to a target directory.\nNote that: The valid extensions are: ['.txt', '.docx', '.xlsx', '.csv'].\nThe function should raise the exception for: OSError: If the source_directory does not exist.\nThe function should output with:\n    str: The full path to the created zip file in the format \"/path/to/target_directory/zip_name.zip\".\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n```",
  "llm_response": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    \"\"\"\n    Zip files with certain extensions from a source directory and save it as a zip file saved to a target directory.\n\n    Args:\n        source_directory (str): The path to the source directory.\n        target_directory (str): The path to the target directory.\n        zip_name (str): The name of the zip file.\n\n    Returns:\n        str: The full path to the created zip file.\n\n    Raises:\n        OSError: If the source_directory does not exist.\n    \"\"\"\n\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"The source directory does not exist.\")\n\n    # Create the target directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Define the valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Get the files with valid extensions from the source directory\n    files_to_zip = []\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            if os.path.splitext(file)[1].lower() in valid_extensions:\n                files_to_zip.append(os.path.join(root, file))\n\n    # Create the zip file\n    zip_file_path = os.path.join(target_directory, f\"{zip_name}.zip\")\n    with zipfile.ZipFile(zip_file_path, 'w') as zip_file:\n        for file in files_to_zip:\n            zip_file.write(file, os.path.relpath(file, source_directory))\n\n    return zip_file_path",
  "model": "llama-3.3-70b"
}