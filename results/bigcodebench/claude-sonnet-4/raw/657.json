{
  "task_id": "BigCodeBench/657",
  "instruct_prompt": "Generate word vectors from a list of texts using the gensim Word2Vec model and nltk.corpus.stopwords. The texts are first cleaned by removing all non-alphanumeric characters except space, lowercased, and stop words are removed.\nThe function should output with:\n    Word2Vec: A trained Word2Vec model.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n```",
  "llm_response": "import re\nimport nltk\nfrom gensim.models import Word2Vec\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n    \"\"\"\n    Generate word vectors from a list of texts using the gensim Word2Vec model.\n    \n    Args:\n        texts (list): List of text strings to process\n        stopwords (set, optional): Set of stopwords to remove. If None, uses nltk stopwords\n    \n    Returns:\n        Word2Vec: A trained Word2Vec model\n    \"\"\"\n    # Download required NLTK data if not already present\n    try:\n        nltk.data.find('corpora/stopwords')\n    except LookupError:\n        nltk.download('stopwords')\n    \n    # Use NLTK stopwords if none provided\n    if stopwords is None:\n        from nltk.corpus import stopwords\n        stopwords = set(stopwords.words('english'))\n    \n    # Process texts\n    processed_texts = []\n    \n    for text in texts:\n        # Remove non-alphanumeric characters except spaces\n        cleaned_text = ALPHANUMERIC.sub(' ', text)\n        \n        # Convert to lowercase\n        cleaned_text = cleaned_text.lower()\n        \n        # Split into words and remove stopwords\n        words = [word for word in cleaned_text.split() if word and word not in stopwords]\n        \n        # Only add non-empty word lists\n        if words:\n            processed_texts.append(words)\n    \n    # Train Word2Vec model\n    # Using common parameters: vector_size=100, window=5, min_count=1, workers=4\n    model = Word2Vec(\n        sentences=processed_texts,\n        vector_size=100,\n        window=5,\n        min_count=1,\n        workers=4,\n        sg=0  # Use CBOW algorithm\n    )\n    \n    return model",
  "model": "claude-sonnet-4"
}