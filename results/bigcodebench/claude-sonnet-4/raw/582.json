{
  "task_id": "BigCodeBench/582",
  "instruct_prompt": "Create a list of normally distributed random numbers and plot their histogram and probability density function (PDF).\nThe function should output with:\n    matplotlib.figure.Figure: A figure object containing the histogram and PDF plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n```",
  "llm_response": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n    \"\"\"\n    Create a list of normally distributed random numbers and plot their histogram and PDF.\n    \n    Parameters:\n    size (int): Number of random samples to generate (default: 1000)\n    \n    Returns:\n    matplotlib.figure.Figure: A figure object containing the histogram and PDF plot.\n    \"\"\"\n    # Generate normally distributed random numbers\n    # Using mean=0 and standard deviation=1 (standard normal distribution)\n    random_numbers = np.random.normal(loc=0, scale=1, size=size)\n    \n    # Create figure and axis\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot histogram\n    n, bins, patches = ax.hist(random_numbers, bins=30, density=True, alpha=0.7, \n                              color='skyblue', edgecolor='black', label='Histogram')\n    \n    # Generate x values for PDF curve\n    x = np.linspace(random_numbers.min(), random_numbers.max(), 100)\n    \n    # Calculate theoretical PDF (standard normal distribution)\n    pdf = stats.norm.pdf(x, loc=0, scale=1)\n    \n    # Plot PDF curve\n    ax.plot(x, pdf, 'r-', linewidth=2, label='Theoretical PDF')\n    \n    # Customize the plot\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    ax.set_title(f'Histogram and PDF of {size} Normally Distributed Random Numbers')\n    ax.legend()\n    ax.grid(True, alpha=0.3)\n    \n    # Adjust layout\n    plt.tight_layout()\n    \n    return fig",
  "model": "claude-sonnet-4"
}