{
  "task_id": "BigCodeBench/928",
  "instruct_prompt": "Create a dictionary containing all possible two-letter combinations of the lowercase English alphabets. The dictionary values represent the frequency of these two-letter combinations in the given word. If a combination does not appear in the word, its value will be 0.\nThe function should output with:\n    dict: A dictionary with keys as two-letter alphabet combinations and values as their counts in the word.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n```",
  "llm_response": "from collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n    \"\"\"\n    Create a dictionary containing all possible two-letter combinations of the lowercase English alphabets.\n    The dictionary values represent the frequency of these two-letter combinations in the given word.\n    If a combination does not appear in the word, its value will be 0.\n    \n    Args:\n        word (str): The input word to analyze\n        \n    Returns:\n        dict: A dictionary with keys as two-letter alphabet combinations and values as their counts in the word.\n    \"\"\"\n    # Generate all possible two-letter combinations of lowercase alphabets\n    all_combinations = [''.join(combo) for combo in itertools.product(string.ascii_lowercase, repeat=2)]\n    \n    # Initialize dictionary with all combinations set to 0\n    result_dict = {combo: 0 for combo in all_combinations}\n    \n    # Convert word to lowercase to ensure case-insensitive matching\n    word = word.lower()\n    \n    # Extract all two-letter combinations from the word\n    word_combinations = [word[i:i+2] for i in range(len(word) - 1)]\n    \n    # Count occurrences of each combination in the word\n    combination_counts = Counter(word_combinations)\n    \n    # Update the result dictionary with actual counts\n    for combo, count in combination_counts.items():\n        if combo in result_dict:  # Only update if it's a valid two-letter alphabet combination\n            result_dict[combo] = count\n    \n    return result_dict",
  "model": "claude-sonnet-4"
}