{
  "task_id": "BigCodeBench/93",
  "instruct_prompt": "Perform Principal Component Analysis (PCA) on a dataset and record the result. Also, generates a scatter plot of the transformed data.\nThe function should raise the exception for: ValueError: If n_components is not a positive integer.\nThe function should output with:\n    DataFrame: The transformed data with principal components.\n    Axes: The matplotlib Axes object containing the scatter plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n```",
  "llm_response": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on a dataset and generate a scatter plot.\n    \n    Parameters:\n    data (array-like): The input dataset for PCA\n    n_components (int): Number of principal components to keep (default: 2)\n    \n    Returns:\n    tuple: (DataFrame with transformed data, matplotlib Axes object)\n    \n    Raises:\n    ValueError: If n_components is not a positive integer\n    \"\"\"\n    # Validate n_components\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n    \n    # Convert data to numpy array if it's not already\n    if isinstance(data, pd.DataFrame):\n        data_array = data.values\n    else:\n        data_array = np.array(data)\n    \n    # Perform PCA\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data_array)\n    \n    # Create DataFrame with transformed data\n    column_names = [f'PC{i+1}' for i in range(n_components)]\n    df_transformed = pd.DataFrame(transformed_data, columns=column_names)\n    \n    # Create scatter plot\n    fig, ax = plt.subplots(figsize=(8, 6))\n    \n    if n_components >= 2:\n        # 2D scatter plot using first two components\n        ax.scatter(transformed_data[:, 0], transformed_data[:, 1], alpha=0.7)\n        ax.set_xlabel(f'PC1 (Explained Variance: {pca.explained_variance_ratio_[0]:.2%})')\n        ax.set_ylabel(f'PC2 (Explained Variance: {pca.explained_variance_ratio_[1]:.2%})')\n        ax.set_title('PCA - First Two Principal Components')\n    else:\n        # 1D scatter plot if only one component\n        ax.scatter(transformed_data[:, 0], np.zeros_like(transformed_data[:, 0]), alpha=0.7)\n        ax.set_xlabel(f'PC1 (Explained Variance: {pca.explained_variance_ratio_[0]:.2%})')\n        ax.set_ylabel('0')\n        ax.set_title('PCA - First Principal Component')\n    \n    ax.grid(True, alpha=0.3)\n    plt.tight_layout()\n    \n    return df_transformed, ax",
  "model": "claude-sonnet-4"
}