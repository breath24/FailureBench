{
  "task_id": "BigCodeBench/324",
  "instruct_prompt": "Run files from list of files as subprocesses at the same time.\nThe function should output with:\n    list: The exit codes of the subprocesses.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport time\nimport threading\ndef task_func(file_list):\n```",
  "llm_response": "import subprocess\nimport time\nimport threading\ndef task_func(file_list):\n    \"\"\"\n    Run files from list of files as subprocesses at the same time.\n    \n    Args:\n        file_list (list): List of file paths to execute as subprocesses\n        \n    Returns:\n        list: The exit codes of the subprocesses\n    \"\"\"\n    if not file_list:\n        return []\n    \n    processes = []\n    exit_codes = [None] * len(file_list)\n    \n    def run_process(index, file_path):\n        \"\"\"Helper function to run a single process and store its exit code\"\"\"\n        try:\n            # Start the subprocess\n            process = subprocess.Popen([file_path], \n                                     stdout=subprocess.PIPE, \n                                     stderr=subprocess.PIPE)\n            processes.append(process)\n            \n            # Wait for the process to complete and get exit code\n            exit_code = process.wait()\n            exit_codes[index] = exit_code\n            \n        except FileNotFoundError:\n            # If file doesn't exist or isn't executable, return exit code 1\n            exit_codes[index] = 1\n        except Exception:\n            # For any other exception, return exit code 1\n            exit_codes[index] = 1\n    \n    # Create and start threads for each file\n    threads = []\n    for i, file_path in enumerate(file_list):\n        thread = threading.Thread(target=run_process, args=(i, file_path))\n        thread.start()\n        threads.append(thread)\n    \n    # Wait for all threads to complete\n    for thread in threads:\n        thread.join()\n    \n    return exit_codes",
  "model": "claude-sonnet-4"
}