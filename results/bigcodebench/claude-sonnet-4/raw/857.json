{
  "task_id": "BigCodeBench/857",
  "instruct_prompt": "Transfer files from one directory (SOURCE_DIR) to another (DEST_DIR) based on the specified file extensions (EXTENSIONS). It also issues warnings for files that could not be transferred due to any issues.\nThe function should output with:\n    transferred_files (list): A list containing the names of files that were successfully transferred.\nYou should write self-contained code starting with:\n```\nimport warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n```",
  "llm_response": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from one directory to another based on specified file extensions.\n    \n    Args:\n        SOURCE_DIR (str): Path to the source directory\n        DEST_DIR (str): Path to the destination directory\n        EXTENSIONS (list): List of file extensions to transfer (e.g., ['.txt', '.pdf'])\n    \n    Returns:\n        list: A list containing the names of files that were successfully transferred\n    \"\"\"\n    transferred_files = []\n    \n    # Check if source directory exists\n    if not os.path.exists(SOURCE_DIR):\n        warnings.warn(f\"Source directory '{SOURCE_DIR}' does not exist\")\n        return transferred_files\n    \n    # Create destination directory if it doesn't exist\n    try:\n        os.makedirs(DEST_DIR, exist_ok=True)\n    except Exception as e:\n        warnings.warn(f\"Could not create destination directory '{DEST_DIR}': {str(e)}\")\n        return transferred_files\n    \n    # Process each extension\n    for extension in EXTENSIONS:\n        # Ensure extension starts with a dot\n        if not extension.startswith('.'):\n            extension = '.' + extension\n        \n        # Find all files with the current extension\n        pattern = os.path.join(SOURCE_DIR, f\"*{extension}\")\n        matching_files = glob.glob(pattern)\n        \n        for file_path in matching_files:\n            try:\n                # Get just the filename\n                filename = os.path.basename(file_path)\n                dest_path = os.path.join(DEST_DIR, filename)\n                \n                # Check if file already exists in destination\n                if os.path.exists(dest_path):\n                    warnings.warn(f\"File '{filename}' already exists in destination directory\")\n                    continue\n                \n                # Copy the file\n                shutil.copy2(file_path, dest_path)\n                transferred_files.append(filename)\n                \n            except PermissionError:\n                warnings.warn(f\"Permission denied when transferring file '{filename}'\")\n            except shutil.SameFileError:\n                warnings.warn(f\"Source and destination are the same file for '{filename}'\")\n            except OSError as e:\n                warnings.warn(f\"OS error when transferring file '{filename}': {str(e)}\")\n            except Exception as e:\n                warnings.warn(f\"Unexpected error when transferring file '{filename}': {str(e)}\")\n    \n    return transferred_files",
  "model": "claude-sonnet-4"
}