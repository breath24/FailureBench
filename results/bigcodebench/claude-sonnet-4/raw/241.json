{
  "task_id": "BigCodeBench/241",
  "instruct_prompt": "Create a numeric array from the \"original\" list, normalize the array, and draw the original and normalized arrays. The function will plot the original and normalized arrays with a title of 'Original vs. Normalized Data'.\nThe function should output with:\n    np.array: A numpy array for the original data.\n    np.array: Normalized array.\n    matplotlib.axes.Axes: Axes object with the plotted data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n```",
  "llm_response": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n    \"\"\"\n    Create a numeric array from the \"original\" list, normalize the array, and draw the original and normalized arrays.\n    \n    Args:\n        original (list): The original list of numeric values\n        \n    Returns:\n        tuple: A tuple containing:\n            - np.array: A numpy array for the original data\n            - np.array: Normalized array\n            - matplotlib.axes.Axes: Axes object with the plotted data\n    \"\"\"\n    # Convert the original list to a numpy array\n    original_array = np.array(original)\n    \n    # Normalize the array using sklearn's MinMaxScaler (scales to range [0, 1])\n    scaler = preprocessing.MinMaxScaler()\n    # Reshape to 2D array as required by sklearn, then flatten back to 1D\n    normalized_array = scaler.fit_transform(original_array.reshape(-1, 1)).flatten()\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot both arrays\n    x_indices = np.arange(len(original_array))\n    ax.plot(x_indices, original_array, 'b-o', label='Original Data', linewidth=2, markersize=6)\n    ax.plot(x_indices, normalized_array, 'r-s', label='Normalized Data', linewidth=2, markersize=6)\n    \n    # Set title and labels\n    ax.set_title('Original vs. Normalized Data', fontsize=14, fontweight='bold')\n    ax.set_xlabel('Index', fontsize=12)\n    ax.set_ylabel('Value', fontsize=12)\n    ax.legend()\n    ax.grid(True, alpha=0.3)\n    \n    # Show the plot\n    plt.tight_layout()\n    plt.show()\n    \n    return original_array, normalized_array, ax",
  "model": "claude-sonnet-4"
}