{
  "task_id": "BigCodeBench/914",
  "instruct_prompt": "Predicts the stock closing prices for the next 7 days using simple linear regression and plots the data. Constants: - The function uses a constant time step of 24*60*60 seconds to generate future timestamps.\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list with predicted prices for the next 7 days.\n    Axes: The matplotlib Axes object containing the plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    \"\"\"\n    Predicts the stock closing prices for the next 7 days using simple linear regression and plots the data.\n    \n    Args:\n        df (pandas.DataFrame): DataFrame with 'Date' and 'Close' columns\n        \n    Returns:\n        tuple: A tuple containing:\n            list: A list with predicted prices for the next 7 days.\n            Axes: The matplotlib Axes object containing the plot.\n    \"\"\"\n    # Convert Date column to datetime if it's not already\n    df['Date'] = pd.to_datetime(df['Date'])\n    \n    # Sort by date to ensure proper order\n    df = df.sort_values('Date').reset_index(drop=True)\n    \n    # Convert dates to numerical values (days since first date)\n    start_date = df['Date'].iloc[0]\n    df['Days'] = (df['Date'] - start_date).dt.days\n    \n    # Prepare data for linear regression\n    X = df['Days'].values.reshape(-1, 1)\n    y = df['Close'].values\n    \n    # Create and fit the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Generate future timestamps (next 7 days)\n    last_day = df['Days'].iloc[-1]\n    future_days = np.array([last_day + i + 1 for i in range(7)]).reshape(-1, 1)\n    \n    # Predict future prices\n    predicted_prices = model.predict(future_days)\n    predicted_prices_list = predicted_prices.tolist()\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(12, 6))\n    \n    # Plot historical data\n    ax.plot(df['Date'], df['Close'], 'b-', label='Historical Prices', linewidth=2)\n    ax.scatter(df['Date'], df['Close'], color='blue', alpha=0.6, s=30)\n    \n    # Generate future dates for plotting\n    future_dates = []\n    last_date = df['Date'].iloc[-1]\n    for i in range(7):\n        future_date = last_date + pd.Timedelta(seconds=24*60*60*(i+1))\n        future_dates.append(future_date)\n    \n    # Plot predicted data\n    ax.plot(future_dates, predicted_prices, 'r--', label='Predicted Prices', linewidth=2)\n    ax.scatter(future_dates, predicted_prices, color='red', alpha=0.8, s=50)\n    \n    # Customize the plot\n    ax.set_xlabel('Date', fontsize=12)\n    ax.set_ylabel('Closing Price', fontsize=12)\n    ax.set_title('Stock Price Prediction - Next 7 Days', fontsize=14, fontweight='bold')\n    ax.legend()\n    ax.grid(True, alpha=0.3)\n    \n    # Rotate x-axis labels for better readability\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return predicted_prices_list, ax",
  "model": "claude-sonnet-4"
}