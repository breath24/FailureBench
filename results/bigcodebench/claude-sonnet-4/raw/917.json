{
  "task_id": "BigCodeBench/917",
  "instruct_prompt": "Forecasts the share closing prices for the next 7 days using the ARIMA model and plots the forecast.\nThe function should output with:\n    Tuple[List[float], Axes]: A tuple containing:\n    A list with forecasted prices for the next 7 days.\n    A matplotlib Axes object containing the subplot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n```",
  "llm_response": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\nimport numpy as np\nimport warnings\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts the share closing prices for the next 7 days using the ARIMA model and plots the forecast.\n    \n    Args:\n        df: DataFrame with a 'Close' column containing historical closing prices\n        \n    Returns:\n        Tuple[List[float], Axes]: A tuple containing:\n        - A list with forecasted prices for the next 7 days\n        - A matplotlib Axes object containing the subplot\n    \"\"\"\n    # Extract closing prices\n    closing_prices = df['Close'].dropna()\n    \n    # Fit ARIMA model (using auto-selected parameters or default (1,1,1))\n    try:\n        # Try different ARIMA parameters and select the best one based on AIC\n        best_aic = float('inf')\n        best_model = None\n        \n        # Test different parameter combinations\n        for p in range(0, 3):\n            for d in range(0, 2):\n                for q in range(0, 3):\n                    try:\n                        model = ARIMA(closing_prices, order=(p, d, q))\n                        fitted_model = model.fit()\n                        if fitted_model.aic < best_aic:\n                            best_aic = fitted_model.aic\n                            best_model = fitted_model\n                    except:\n                        continue\n        \n        # If no model was successfully fitted, use default (1,1,1)\n        if best_model is None:\n            model = ARIMA(closing_prices, order=(1, 1, 1))\n            best_model = model.fit()\n            \n    except:\n        # Fallback to simple ARIMA(1,1,1)\n        model = ARIMA(closing_prices, order=(1, 1, 1))\n        best_model = model.fit()\n    \n    # Forecast next 7 days\n    forecast_result = best_model.forecast(steps=7)\n    forecasted_prices = forecast_result.tolist()\n    \n    # Get confidence intervals for the forecast\n    forecast_ci = best_model.get_forecast(steps=7).conf_int()\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(12, 6))\n    \n    # Plot historical data\n    historical_dates = range(len(closing_prices))\n    ax.plot(historical_dates, closing_prices, label='Historical Prices', color='blue', linewidth=2)\n    \n    # Plot forecasted data\n    forecast_dates = range(len(closing_prices), len(closing_prices) + 7)\n    ax.plot(forecast_dates, forecasted_prices, label='Forecasted Prices', \n            color='red', linewidth=2, linestyle='--', marker='o')\n    \n    # Plot confidence intervals\n    ax.fill_between(forecast_dates, \n                    forecast_ci.iloc[:, 0], \n                    forecast_ci.iloc[:, 1], \n                    color='red', alpha=0.2, label='Confidence Interval')\n    \n    # Customize the plot\n    ax.set_xlabel('Time Period')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Stock Price Forecast using ARIMA Model')\n    ax.legend()\n    ax.grid(True, alpha=0.3)\n    \n    # Add vertical line to separate historical and forecasted data\n    ax.axvline(x=len(closing_prices)-1, color='gray', linestyle=':', alpha=0.7)\n    \n    plt.tight_layout()\n    \n    return forecasted_prices, ax",
  "model": "claude-sonnet-4"
}