{
  "task_id": "BigCodeBench/17",
  "instruct_prompt": "Check if a particular process is running based on its name. If it is not running, start it using the process name as a command. If it is running, terminate the process and restart it by executing the process name as a command.\nThe function should output with:\n    str: A message indicating the action taken:\n    \"Process not found. Starting <process_name>.\"\n    \"Process found. Restarting <process_name>.\"\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n```",
  "llm_response": "import subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n    \"\"\"\n    Check if a particular process is running based on its name. If it is not running, \n    start it using the process name as a command. If it is running, terminate the \n    process and restart it by executing the process name as a command.\n    \n    Args:\n        process_name (str): The name of the process to check/manage\n        \n    Returns:\n        str: A message indicating the action taken\n    \"\"\"\n    # Check if process is currently running\n    process_found = False\n    processes_to_terminate = []\n    \n    # Iterate through all running processes\n    for proc in psutil.process_iter(['pid', 'name']):\n        try:\n            # Check if process name matches (case-insensitive)\n            if proc.info['name'] and process_name.lower() in proc.info['name'].lower():\n                process_found = True\n                processes_to_terminate.append(proc)\n        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):\n            # Process might have ended or we don't have permission to access it\n            continue\n    \n    if not process_found:\n        # Process not running, start it\n        try:\n            subprocess.Popen(process_name, shell=True)\n            return f\"Process not found. Starting {process_name}.\"\n        except Exception as e:\n            return f\"Process not found. Failed to start {process_name}: {str(e)}\"\n    else:\n        # Process is running, terminate and restart\n        try:\n            # Terminate all matching processes\n            for proc in processes_to_terminate:\n                try:\n                    proc.terminate()\n                except (psutil.NoSuchProcess, psutil.AccessDenied):\n                    continue\n            \n            # Wait a moment for processes to terminate gracefully\n            time.sleep(1)\n            \n            # Force kill any processes that didn't terminate\n            for proc in processes_to_terminate:\n                try:\n                    if proc.is_running():\n                        proc.kill()\n                except (psutil.NoSuchProcess, psutil.AccessDenied):\n                    continue\n            \n            # Wait a bit more to ensure cleanup\n            time.sleep(0.5)\n            \n            # Start the process again\n            subprocess.Popen(process_name, shell=True)\n            return f\"Process found. Restarting {process_name}.\"\n            \n        except Exception as e:\n            return f\"Process found. Failed to restart {process_name}: {str(e)}\"",
  "model": "claude-sonnet-4"
}