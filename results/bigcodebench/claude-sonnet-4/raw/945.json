{
  "task_id": "BigCodeBench/945",
  "instruct_prompt": "Generates a time series of sales data starting from a specified date, then use linear regression to forecast future sales based on the provided or generated sales data.\nThe function should output with:\n    A numpy array containing the forecasted future sales for the same number of periods as the input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates a time series of sales data starting from a specified date, then uses linear regression \n    to forecast future sales based on the provided or generated sales data.\n    \n    Parameters:\n    start_date (str): Starting date for the time series (default: '2016-01-01')\n    periods (int): Number of periods to generate (default: 13)\n    freq (str): Frequency of the time series (default: 'WOM-2FRI' - Week of Month 2nd Friday)\n    sales_data (array-like, optional): Pre-existing sales data. If None, random data is generated.\n    \n    Returns:\n    numpy.ndarray: Array containing the forecasted future sales for the same number of periods as input data\n    \"\"\"\n    \n    # Generate date range\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Generate or use provided sales data\n    if sales_data is None:\n        # Generate random sales data with some trend and seasonality\n        np.random.seed(42)  # For reproducible results\n        trend = np.linspace(100, 200, periods)\n        seasonal = 20 * np.sin(2 * np.pi * np.arange(periods) / 12)\n        noise = np.random.normal(0, 10, periods)\n        sales_data = trend + seasonal + noise\n    else:\n        sales_data = np.array(sales_data)\n        if len(sales_data) != periods:\n            periods = len(sales_data)\n    \n    # Create DataFrame\n    df = pd.DataFrame({\n        'date': date_range[:len(sales_data)],\n        'sales': sales_data\n    })\n    \n    # Prepare data for linear regression\n    # Use period index as feature (X) and sales as target (y)\n    X = np.arange(len(sales_data)).reshape(-1, 1)\n    y = sales_data\n    \n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Generate future time periods for forecasting\n    future_periods = np.arange(len(sales_data), 2 * len(sales_data)).reshape(-1, 1)\n    \n    # Make predictions for future periods\n    future_sales = model.predict(future_periods)\n    \n    return future_sales",
  "model": "claude-sonnet-4"
}