{
  "task_id": "BigCodeBench/777",
  "instruct_prompt": "Unzip all zip files in a directory whose name matches a certain pattern by splitting the filename the last time \"-\" occurs and using the prefix part of the filename as the directory to extract.\nThe function should output with:\n    list: A list of directories where the files were extracted.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n```",
  "llm_response": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzip all zip files in a directory whose name matches a certain pattern by splitting \n    the filename the last time \"-\" occurs and using the prefix part of the filename as \n    the directory to extract.\n    \n    Args:\n        directory (str): The directory containing zip files\n        pattern (str): Regex pattern to match zip files\n        \n    Returns:\n        list: A list of directories where the files were extracted\n    \"\"\"\n    extracted_dirs = []\n    \n    # Check if directory exists\n    if not os.path.exists(directory):\n        return extracted_dirs\n    \n    # Get all files in the directory\n    for filename in os.listdir(directory):\n        # Check if file matches the pattern\n        if re.match(pattern, filename):\n            file_path = os.path.join(directory, filename)\n            \n            # Check if it's actually a file and a zip file\n            if os.path.isfile(file_path) and zipfile.is_zipfile(file_path):\n                # Split filename at the last occurrence of \"-\"\n                name_without_ext = os.path.splitext(filename)[0]\n                last_dash_index = name_without_ext.rfind('-')\n                \n                if last_dash_index != -1:\n                    # Get the prefix part (everything before the last \"-\")\n                    prefix = name_without_ext[:last_dash_index]\n                    extract_dir = os.path.join(directory, prefix)\n                    \n                    # Create extraction directory if it doesn't exist\n                    os.makedirs(extract_dir, exist_ok=True)\n                    \n                    # Extract the zip file\n                    try:\n                        with zipfile.ZipFile(file_path, 'r') as zip_ref:\n                            zip_ref.extractall(extract_dir)\n                        \n                        # Add to extracted directories list if not already present\n                        if extract_dir not in extracted_dirs:\n                            extracted_dirs.append(extract_dir)\n                            \n                    except zipfile.BadZipFile:\n                        # Skip corrupted zip files\n                        continue\n    \n    return extracted_dirs",
  "model": "claude-sonnet-4"
}