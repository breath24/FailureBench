{
  "task_id": "BigCodeBench/865",
  "instruct_prompt": "This function takes a list of tuples containing elements and their respective counts and weights. It normalizes the counts using z-score normalization and the weights using min-max scaling. Finally, it returns a pandas DataFrame with the items, normalized counts, and normalized weights.\nThe function should output with:\n    DataFrame: A pandas DataFrame with three columns: 'Item', 'Normalized Count', and 'Normalized Weight'.\n    Each row corresponds to an entry from the input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n    \"\"\"\n    This function takes a list of tuples containing elements and their respective counts and weights.\n    It normalizes the counts using z-score normalization and the weights using min-max scaling.\n    Finally, it returns a pandas DataFrame with the items, normalized counts, and normalized weights.\n    \n    Args:\n        data: List of tuples in format (item, count, weight)\n    \n    Returns:\n        DataFrame: A pandas DataFrame with three columns: 'Item', 'Normalized Count', and 'Normalized Weight'.\n        Each row corresponds to an entry from the input data.\n    \"\"\"\n    if not data:\n        return pd.DataFrame(columns=['Item', 'Normalized Count', 'Normalized Weight'])\n    \n    # Extract items, counts, and weights from the input data\n    items = [item[0] for item in data]\n    counts = [item[1] for item in data]\n    weights = [item[2] for item in data]\n    \n    # Convert to numpy arrays for processing\n    counts_array = np.array(counts, dtype=float)\n    weights_array = np.array(weights, dtype=float)\n    \n    # Z-score normalization for counts\n    if len(counts_array) > 1 and np.std(counts_array) != 0:\n        normalized_counts = zscore(counts_array)\n    else:\n        # Handle case where all counts are the same or only one data point\n        normalized_counts = np.zeros_like(counts_array)\n    \n    # Min-max scaling for weights\n    if len(weights_array) > 1 and np.max(weights_array) != np.min(weights_array):\n        scaler = MinMaxScaler()\n        normalized_weights = scaler.fit_transform(weights_array.reshape(-1, 1)).flatten()\n    else:\n        # Handle case where all weights are the same or only one data point\n        normalized_weights = np.zeros_like(weights_array)\n    \n    # Create and return the DataFrame\n    result_df = pd.DataFrame({\n        'Item': items,\n        'Normalized Count': normalized_counts,\n        'Normalized Weight': normalized_weights\n    })\n    \n    return result_df",
  "model": "claude-sonnet-4"
}