{
  "task_id": "BigCodeBench/763",
  "instruct_prompt": "Read a list of dictionaries from a JSON file, calculate the mean and median for each key, and write the results to a CSV file.\nThe function should output with:\n    dict: A dictionary where each key is a field from the input JSON and each value is another dictionary with the mean and median of that field.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n# Constants\ndef task_func(input_file, output_file):\n```",
  "llm_response": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\ndef task_func(input_file, output_file):\n    \"\"\"\n    Read a list of dictionaries from a JSON file, calculate the mean and median \n    for each key, and write the results to a CSV file.\n    \n    Args:\n        input_file (str): Path to the input JSON file\n        output_file (str): Path to the output CSV file\n    \n    Returns:\n        dict: A dictionary where each key is a field from the input JSON and \n              each value is another dictionary with the mean and median of that field.\n    \"\"\"\n    # Read data from JSON file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    \n    # Collect values for each key\n    field_values = defaultdict(list)\n    \n    # Extract values for each field\n    for record in data:\n        for key, value in record.items():\n            if isinstance(value, (int, float)):  # Only process numeric values\n                field_values[key].append(value)\n    \n    # Calculate mean and median for each field\n    results = {}\n    for key, values in field_values.items():\n        results[key] = {\n            'mean': float(np.mean(values)),\n            'median': float(np.median(values))\n        }\n    \n    # Write results to CSV file\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        # Write header\n        writer.writerow(['field', 'mean', 'median'])\n        # Write data rows\n        for key in sorted(results.keys()):\n            writer.writerow([key, results[key]['mean'], results[key]['median']])\n    \n    return results",
  "model": "qwen3-coder"
}