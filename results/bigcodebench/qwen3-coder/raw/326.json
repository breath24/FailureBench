{
  "task_id": "BigCodeBench/326",
  "instruct_prompt": "Find and run all .bat files in a given directory, returning their file names and exit codes.\nThe function should output with:\n    list of tuples: A list where each tuple contains the file name and its exit code.\n    The exit code is None if the file could not be executed.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n```",
  "llm_response": "import subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n    \"\"\"\n    Find and run all .bat files in a given directory, returning their file names and exit codes.\n    \n    Args:\n        directory_path (str): Path to the directory containing .bat files\n        \n    Returns:\n        list of tuples: A list where each tuple contains the file name and its exit code.\n                        The exit code is None if the file could not be executed.\n    \"\"\"\n    results = []\n    \n    # Check if directory exists\n    if not os.path.exists(directory_path):\n        return results\n    \n    # Change to the target directory\n    original_directory = os.getcwd()\n    \n    try:\n        # Find all .bat files in the directory\n        os.chdir(directory_path)\n        bat_files = glob.glob(\"*.bat\")\n        \n        # Run each .bat file\n        for bat_file in bat_files:\n            try:\n                # Run the batch file and capture the exit code\n                result = subprocess.run([bat_file], shell=True, capture_output=True)\n                results.append((bat_file, result.returncode))\n            except Exception:\n                # If execution fails, append None as exit code\n                results.append((bat_file, None))\n    finally:\n        # Always return to the original directory\n        os.chdir(original_directory)\n    \n    return results",
  "model": "qwen3-coder"
}