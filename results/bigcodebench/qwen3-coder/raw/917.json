{
  "task_id": "BigCodeBench/917",
  "instruct_prompt": "Forecasts the share closing prices for the next 7 days using the ARIMA model and plots the forecast.\nThe function should output with:\n    Tuple[List[float], Axes]: A tuple containing:\n    A list with forecasted prices for the next 7 days.\n    A matplotlib Axes object containing the subplot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n```",
  "llm_response": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\nimport numpy as np\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts the share closing prices for the next 7 days using the ARIMA model and plots the forecast.\n    \n    Parameters:\n    df (pd.DataFrame): DataFrame containing stock data with a 'Close' column\n    \n    Returns:\n    Tuple[List[float], Axes]: A tuple containing:\n        - A list with forecasted prices for the next 7 days\n        - A matplotlib Axes object containing the subplot\n    \"\"\"\n    # Extract closing prices\n    closing_prices = df['Close'].values\n    \n    # Fit ARIMA model (using order (1,1,1) as a reasonable default for stock prices)\n    model = ARIMA(closing_prices, order=(1, 1, 1))\n    fitted_model = model.fit()\n    \n    # Forecast next 7 days\n    forecast_result = fitted_model.forecast(steps=7)\n    forecasted_prices = forecast_result.tolist()\n    \n    # Create plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot historical data (last 30 days for better visualization)\n    historical_data = closing_prices[-30:] if len(closing_prices) > 30 else closing_prices\n    historical_indices = range(len(historical_data))\n    ax.plot(historical_indices, historical_data, label='Historical Prices', color='blue')\n    \n    # Plot forecasted data\n    forecast_indices = range(len(historical_data), len(historical_data) + 7)\n    ax.plot(forecast_indices, forecasted_prices, label='Forecasted Prices', color='red', marker='o')\n    \n    # Connect the last historical point to the first forecast point\n    ax.plot([len(historical_data)-1, len(historical_data)], \n            [historical_data[-1], forecasted_prices[0]], \n            color='red', linestyle='--', alpha=0.7)\n    \n    # Formatting\n    ax.set_xlabel('Days')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Stock Price Forecast for Next 7 Days')\n    ax.legend()\n    ax.grid(True, alpha=0.3)\n    \n    return (forecasted_prices, ax)",
  "model": "qwen3-coder"
}