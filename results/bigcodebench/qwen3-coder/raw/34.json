{
  "task_id": "BigCodeBench/34",
  "instruct_prompt": "Create a word cloud from text after removing URLs and plot it.\nThe function should raise the exception for: ValueError(\"No words available to generate a word cloud after removing URLs.\"): If there are no words available to generate a word cloud after removing URLs.\nThe function should output with:\n    WordCloud object: The generated word cloud.\nYou should write self-contained code starting with:\n```\nimport re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n```",
  "llm_response": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Remove URLs using regex\n    # This pattern matches http://, https://, and www. URLs\n    url_pattern = r'https?://[^\\s]+|www\\.[^\\s]+'\n    text_without_urls = re.sub(url_pattern, '', text)\n    \n    # Remove any remaining URL-like patterns\n    url_pattern2 = r'[^\\s]+\\.com[^\\s]*|[^\\s]+\\.org[^\\s]*|[^\\s]+\\.net[^\\s]*'\n    text_without_urls = re.sub(url_pattern2, '', text_without_urls)\n    \n    # Remove extra whitespace and split into words\n    words = text_without_urls.split()\n    \n    # Filter out empty strings and whitespace-only strings\n    words = [word.strip() for word in words if word.strip()]\n    \n    # Check if there are words available\n    if not words:\n        raise ValueError(\"No words available to generate a word cloud after removing URLs.\")\n    \n    # Join words back into text for word cloud generation\n    cleaned_text = ' '.join(words)\n    \n    # Generate word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(cleaned_text)\n    \n    return wordcloud",
  "model": "qwen3-coder"
}