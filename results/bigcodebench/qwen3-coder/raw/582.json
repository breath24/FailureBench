{
  "task_id": "BigCodeBench/582",
  "instruct_prompt": "Create a list of normally distributed random numbers and plot their histogram and probability density function (PDF).\nThe function should output with:\n    matplotlib.figure.Figure: A figure object containing the histogram and PDF plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n```",
  "llm_response": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n    \"\"\"\n    Create a list of normally distributed random numbers and plot their histogram and PDF.\n    \n    Parameters:\n    size (int): Number of random samples to generate\n    \n    Returns:\n    matplotlib.figure.Figure: A figure object containing the histogram and PDF plot\n    \"\"\"\n    # Generate normally distributed random numbers\n    data = np.random.normal(loc=0, scale=1, size=size)\n    \n    # Create figure and axis\n    fig, ax = plt.subplots(figsize=(8, 6))\n    \n    # Plot histogram\n    n, bins, patches = ax.hist(data, bins=50, density=True, alpha=0.7, color='skyblue', edgecolor='black', linewidth=0.5)\n    \n    # Plot theoretical PDF\n    x = np.linspace(data.min(), data.max(), 1000)\n    pdf = stats.norm.pdf(x, loc=0, scale=1)\n    ax.plot(x, pdf, 'r-', linewidth=2, label='Theoretical PDF')\n    \n    # Add labels and title\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    ax.set_title(f'Histogram and PDF of {size} Normal Random Numbers')\n    ax.legend()\n    ax.grid(True, alpha=0.3)\n    \n    return fig",
  "model": "qwen3-coder"
}