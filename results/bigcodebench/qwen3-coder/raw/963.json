{
  "task_id": "BigCodeBench/963",
  "instruct_prompt": "Zip files with certain extensions from a source directory and save it as a zip file saved to a target directory.\nNote that: The valid extensions are: ['.txt', '.docx', '.xlsx', '.csv'].\nThe function should raise the exception for: OSError: If the source_directory does not exist.\nThe function should output with:\n    str: The full path to the created zip file in the format \"/path/to/target_directory/zip_name.zip\".\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n```",
  "llm_response": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    \"\"\"\n    Zip files with certain extensions from a source directory and save it as a zip file \n    saved to a target directory.\n    \n    Args:\n        source_directory (str): Path to the source directory\n        target_directory (str): Path to the target directory\n        zip_name (str): Name of the zip file (without .zip extension)\n        \n    Returns:\n        str: The full path to the created zip file\n        \n    Raises:\n        OSError: If the source_directory does not exist\n    \"\"\"\n    # Check if source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(f\"Source directory '{source_directory}' does not exist\")\n    \n    # Create target directory if it doesn't exist\n    os.makedirs(target_directory, exist_ok=True)\n    \n    # Define valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    \n    # Find all files with valid extensions in source directory\n    files_to_zip = []\n    for extension in valid_extensions:\n        pattern = os.path.join(source_directory, f\"*{extension}\")\n        files_to_zip.extend(glob.glob(pattern))\n    \n    # Create zip file path\n    zip_filename = f\"{zip_name}.zip\"\n    zip_filepath = os.path.join(target_directory, zip_filename)\n    \n    # Create zip file\n    with zipfile.ZipFile(zip_filepath, 'w') as zipf:\n        for file_path in files_to_zip:\n            # Add file to zip with just the filename (not full path)\n            arcname = os.path.basename(file_path)\n            zipf.write(file_path, arcname)\n    \n    return zip_filepath",
  "model": "qwen3-coder"
}