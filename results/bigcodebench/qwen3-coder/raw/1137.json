{
  "task_id": "BigCodeBench/1137",
  "instruct_prompt": "Extracts phone numbers from a given URL or local file and saves them to a specified file in JSON format.\nThe function should output with:\n    list: A list of strings, each representing a found phone number.\nYou should write self-contained code starting with:\n```\nimport bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n```",
  "llm_response": "import bs4\nimport requests\nimport re\nimport json\nimport os\ndef task_func(url: str, output_path: str) -> list:\n    \"\"\"\n    Extracts phone numbers from a given URL or local file and saves them to a specified file in JSON format.\n    \n    Args:\n        url (str): URL or local file path to extract phone numbers from\n        output_path (str): Path to save the extracted phone numbers in JSON format\n    \n    Returns:\n        list: A list of strings, each representing a found phone number\n    \"\"\"\n    # Check if the input is a local file\n    if os.path.exists(url):\n        with open(url, 'r', encoding='utf-8') as file:\n            content = file.read()\n    else:\n        # Assume it's a URL\n        response = requests.get(url)\n        response.raise_for_status()\n        content = response.text\n    \n    # Parse the content with BeautifulSoup to get text content\n    soup = bs4.BeautifulSoup(content, 'html.parser')\n    text = soup.get_text()\n    \n    # Define phone number patterns\n    patterns = [\n        r'\\b\\d{3}-\\d{3}-\\d{4}\\b',  # 123-456-7890\n        r'\\b\\(\\d{3}\\)\\s*\\d{3}-\\d{4}\\b',  # (123) 456-7890 or (123)456-7890\n        r'\\b\\d{3}\\.\\d{3}\\.\\d{4}\\b',  # 123.456.7890\n        r'\\b\\d{3}\\s+\\d{3}\\s+\\d{4}\\b',  # 123 456 7890\n        r'\\b\\d{10}\\b',  # 1234567890\n        r'\\+\\d{1,3}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}',  # +1 123 456 7890\n        r'\\b\\d{3}[-\\s]?\\d{3}[-\\s]?\\d{4}\\b'  # Various combinations\n    ]\n    \n    phone_numbers = set()  # Use set to avoid duplicates\n    \n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        for match in matches:\n            # Clean up the phone number\n            cleaned = re.sub(r'[^\\d\\+]', '', match)\n            if len(cleaned) >= 10:  # Basic validation\n                phone_numbers.add(match.strip())\n    \n    # Convert set to list\n    phone_list = list(phone_numbers)\n    \n    # Save to JSON file\n    with open(output_path, 'w') as f:\n        json.dump(phone_list, f, indent=2)\n    \n    return phone_list",
  "model": "qwen3-coder"
}