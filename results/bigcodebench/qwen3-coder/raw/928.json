{
  "task_id": "BigCodeBench/928",
  "instruct_prompt": "Create a dictionary containing all possible two-letter combinations of the lowercase English alphabets. The dictionary values represent the frequency of these two-letter combinations in the given word. If a combination does not appear in the word, its value will be 0.\nThe function should output with:\n    dict: A dictionary with keys as two-letter alphabet combinations and values as their counts in the word.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n```",
  "llm_response": "from collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n    # Generate all possible two-letter combinations\n    alphabet = string.ascii_lowercase\n    all_combinations = [''.join(pair) for pair in itertools.product(alphabet, repeat=2)]\n    \n    # Create a dictionary with all combinations initialized to 0\n    result = {combo: 0 for combo in all_combinations}\n    \n    # Extract all two-letter substrings from the word\n    if len(word) >= 2:\n        two_letter_substrings = [word[i:i+2] for i in range(len(word) - 1)]\n        # Count the frequency of each substring\n        substring_counts = Counter(two_letter_substrings)\n        \n        # Update the result dictionary with actual counts\n        for substring, count in substring_counts.items():\n            if substring in result:\n                result[substring] = count\n    \n    return result",
  "model": "qwen3-coder"
}