{
  "task_id": "BigCodeBench/530",
  "instruct_prompt": "Identify duplicate entries in a DataFrame and record the age distribution for the duplicate names. This function takes a DataFrame with 'name' and 'age' columns. If age is provided as floats, they will be rounded down to the nearest integer. Age must not be negative, otherwise the function raises ValueError. Then, the function identifies duplicate names and records the age distribution. It returns a Counter object with the age distribution and a histogram plot showing the distribution of ages for duplicate names, with age on the x-axis and count on the y-axis. Bins are calculated based on the minimum and maximum ages found among the duplicates, adjusted by .5 to ensure that integer ages fall squarely within bins.\nThe function should raise the exception for: ValueError: If the DataFrame is empty or if age is negative.\nThe function should output with:\n    Counter: Age distribution among duplicate names.\n    plt.Axes or None: Histogram plot displaying age distribution, or None if there are no duplicates.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    \"\"\"\n    Identify duplicate entries in a DataFrame and record the age distribution for the duplicate names.\n    \n    Args:\n        df: DataFrame with 'name' and 'age' columns\n        \n    Returns:\n        Counter: Age distribution among duplicate names\n        plt.Axes or None: Histogram plot displaying age distribution, or None if there are no duplicates\n        \n    Raises:\n        ValueError: If the DataFrame is empty or if age is negative\n    \"\"\"\n    # Check if DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    \n    # Check if required columns exist\n    if 'name' not in df.columns or 'age' not in df.columns:\n        raise ValueError(\"DataFrame must contain 'name' and 'age' columns\")\n    \n    # Check for negative ages\n    if (df['age'] < 0).any():\n        raise ValueError(\"Age must not be negative\")\n    \n    # Round down ages to nearest integer\n    df_copy = df.copy()\n    df_copy['age'] = np.floor(df_copy['age']).astype(int)\n    \n    # Identify duplicate names\n    duplicate_names = df_copy[df_copy.duplicated(subset=['name'], keep=False)]['name']\n    \n    # If no duplicates found, return empty Counter and None\n    if duplicate_names.empty:\n        return Counter(), None\n    \n    # Get rows with duplicate names\n    duplicate_rows = df_copy[df_copy['name'].isin(duplicate_names)]\n    \n    # Create age distribution counter\n    age_distribution = Counter(duplicate_rows['age'])\n    \n    # Create histogram\n    fig, ax = plt.subplots(figsize=(8, 6))\n    \n    # Get min and max ages for bin calculation\n    min_age = duplicate_rows['age'].min()\n    max_age = duplicate_rows['age'].max()\n    \n    # Calculate bins adjusted by 0.5\n    bins = np.arange(min_age - 0.5, max_age + 1.5, 1)\n    \n    # Plot histogram\n    ax.hist(duplicate_rows['age'], bins=bins, edgecolor='black', alpha=0.7)\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Count')\n    ax.set_title('Age Distribution for Duplicate Names')\n    ax.grid(True, alpha=0.3)\n    \n    return age_distribution, ax",
  "model": "qwen3-coder"
}