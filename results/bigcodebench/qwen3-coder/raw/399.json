{
  "task_id": "BigCodeBench/399",
  "instruct_prompt": "Create a diagram of a sine wave and cosine wave with a given frequency and return the plot.\nThe function should raise the exception for: ValueError: If the frequency is negative. ValueError: If the sample size is non-positive.\nThe function should output with:\n    matplotlib.figure.Figure: The figure object containing the plot.\n    matplotlib.axes.Axes: The axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n```",
  "llm_response": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create a diagram of a sine wave and cosine wave with a given frequency.\n    \n    Parameters:\n    frequency (float): Frequency of the waves. Must be non-negative.\n    sample_size (int): Number of samples to generate. Must be positive.\n    \n    Returns:\n    tuple: (matplotlib.figure.Figure, matplotlib.axes.Axes) The figure and axes objects.\n    \n    Raises:\n    ValueError: If frequency is negative or sample_size is non-positive.\n    \"\"\"\n    # Validate inputs\n    if frequency < 0:\n        raise ValueError(\"Frequency cannot be negative\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive\")\n    \n    # Create x values from 0 to 2\u03c0 (one full period)\n    x = np.linspace(0, 2*np.pi, sample_size)\n    \n    # Calculate y values for sine and cosine waves\n    sine_wave = np.sin(frequency * x)\n    cosine_wave = np.cos(frequency * x)\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot both waves\n    ax.plot(x, sine_wave, label=f'Sine wave (frequency={frequency})', color='blue')\n    ax.plot(x, cosine_wave, label=f'Cosine wave (frequency={frequency})', color='red')\n    \n    # Add labels and title\n    ax.set_xlabel('x (radians)')\n    ax.set_ylabel('y')\n    ax.set_title(f'Sine and Cosine Waves (frequency = {frequency})')\n    ax.legend()\n    ax.grid(True)\n    \n    return fig, ax",
  "model": "qwen3-coder"
}