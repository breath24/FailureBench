{
  "task_id": "BigCodeBench/147",
  "instruct_prompt": "Scans a specified IP address range and checks if a specified port is open on each IP. The function returns a dictionary with IP addresses as keys and a boolean indicating the port's status (True if open, False otherwise).\nThe function should output with:\n    dict: A dictionary mapping IP addresses to their port status (True if open).\nYou should write self-contained code starting with:\n```\nimport socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n```",
  "llm_response": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans a specified IP address range and checks if a specified port is open on each IP.\n    \n    Args:\n        ip_range (str): IP address range in CIDR notation (e.g., \"192.168.1.0/24\")\n        port (int): Port number to check\n        \n    Returns:\n        dict: A dictionary mapping IP addresses to their port status (True if open, False otherwise)\n    \"\"\"\n    \n    def check_port(ip, port, timeout=1):\n        \"\"\"Check if a port is open on a given IP address.\"\"\"\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(timeout)\n            result = sock.connect_ex((str(ip), port))\n            sock.close()\n            return result == 0\n        except:\n            return False\n    \n    # Parse the IP range\n    network = IPv4Network(ip_range, strict=False)\n    \n    # Dictionary to store results\n    results = {}\n    \n    # Use ThreadPoolExecutor for concurrent scanning\n    with ThreadPoolExecutor(max_workers=100) as executor:\n        # Submit all tasks\n        future_to_ip = {executor.submit(check_port, ip, port): ip for ip in network.hosts()}\n        \n        # Collect results as they complete\n        for future in as_completed(future_to_ip):\n            ip = future_to_ip[future]\n            try:\n                status = future.result()\n                results[str(ip)] = status\n            except Exception:\n                results[str(ip)] = False\n    \n    return results",
  "model": "qwen3-coder"
}