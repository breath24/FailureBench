{
  "task_id": "BigCodeBench/594",
  "instruct_prompt": "Generate weather data for the specified number of hours, save it in a CSV file with colomns 'Time' and 'Condition' and back up the file to a backup directory.\nThe function should output with:\n    str: The path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
  "llm_response": "import csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import randint\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data for the specified number of hours, save it in a CSV file \n    with columns 'Time' and 'Condition' and back up the file to a backup directory.\n    \n    Args:\n        hours (int): Number of hours to generate weather data for\n        output_dir (str): Directory to save the CSV file (default: './output')\n    \n    Returns:\n        str: The path of the generated CSV file\n    \"\"\"\n    # Create output directory if it doesn't exist\n    os.makedirs(output_dir, exist_ok=True)\n    \n    # Create backup directory\n    backup_dir = os.path.join(output_dir, 'backup')\n    os.makedirs(backup_dir, exist_ok=True)\n    \n    # Generate filename with timestamp\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = f\"weather_data_{timestamp}.csv\"\n    file_path = os.path.join(output_dir, filename)\n    \n    # Generate weather data\n    current_time = datetime.now()\n    weather_data = []\n    \n    for i in range(hours):\n        time_str = (current_time + timedelta(hours=i)).strftime(\"%Y-%m-%d %H:%M:%S\")\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        weather_data.append([time_str, condition])\n    \n    # Write data to CSV file\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', 'Condition'])  # Header\n        writer.writerows(weather_data)\n    \n    # Backup the file\n    backup_path = os.path.join(backup_dir, filename)\n    shutil.copy2(file_path, backup_path)\n    \n    return file_path",
  "model": "qwen3-coder"
}