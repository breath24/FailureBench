{
  "task_id": "BigCodeBench/945",
  "instruct_prompt": "Generates a time series of sales data starting from a specified date, then use linear regression to forecast future sales based on the provided or generated sales data.\nThe function should output with:\n    A numpy array containing the forecasted future sales for the same number of periods as the input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates a time series of sales data and uses linear regression to forecast future sales.\n    \n    Parameters:\n    start_date (str): Starting date for the time series\n    periods (int): Number of periods to generate or forecast\n    freq (str): Frequency string for date generation\n    sales_data (array-like): Optional sales data. If None, generate synthetic data.\n    \n    Returns:\n    numpy array: Forecasted future sales for the same number of periods as input data\n    \"\"\"\n    \n    # Generate date range\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Generate or use provided sales data\n    if sales_data is None:\n        # Generate synthetic sales data with trend and some noise\n        np.random.seed(42)  # For reproducibility\n        trend = np.linspace(100, 200, periods)\n        noise = np.random.normal(0, 10, periods)\n        sales_data = trend + noise\n    else:\n        sales_data = np.array(sales_data)\n        periods = len(sales_data)\n        dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Prepare data for linear regression\n    # Use indices as feature (0, 1, 2, ...)\n    X_train = np.arange(len(sales_data)).reshape(-1, 1)\n    y_train = sales_data\n    \n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    # Forecast future sales for the same number of periods\n    # Predict for next periods (len(sales_data) to 2*len(sales_data)-1)\n    X_future = np.arange(len(sales_data), 2 * len(sales_data)).reshape(-1, 1)\n    forecast = model.predict(X_future)\n    \n    return forecast",
  "model": "qwen3-coder"
}