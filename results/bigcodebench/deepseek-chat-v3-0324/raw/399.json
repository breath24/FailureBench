{
  "task_id": "BigCodeBench/399",
  "instruct_prompt": "Create a diagram of a sine wave and cosine wave with a given frequency and return the plot.\nThe function should raise the exception for: ValueError: If the frequency is negative. ValueError: If the sample size is non-positive.\nThe function should output with:\n    matplotlib.figure.Figure: The figure object containing the plot.\n    matplotlib.axes.Axes: The axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n```",
  "llm_response": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create a diagram of sine and cosine waves with a given frequency.\n    \n    Parameters:\n    - frequency (float): The frequency of the sine and cosine waves. Must be non-negative.\n    - sample_size (int, optional): The number of points to sample. Must be positive. Default is 10000.\n    \n    Returns:\n    - matplotlib.figure.Figure: The figure object containing the plot.\n    - matplotlib.axes.Axes: The axes object of the plot.\n    \n    Raises:\n    - ValueError: If the frequency is negative.\n    - ValueError: If the sample size is non-positive.\n    \"\"\"\n    if frequency < 0:\n        raise ValueError(\"Frequency must be non-negative.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive.\")\n    # Create time values from 0 to 1 second\n    t = np.linspace(0, 1, sample_size)\n    # Calculate sine and cosine values\n    sin_wave = np.sin(2 * np.pi * frequency * t)\n    cos_wave = np.cos(2 * np.pi * frequency * t)\n    # Create plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(t, sin_wave, label=f'Sine Wave (f={frequency} Hz)')\n    ax.plot(t, cos_wave, label=f'Cosine Wave (f={frequency} Hz)')\n    ax.set_xlabel('Time [s]')\n    ax.set_ylabel('Amplitude')\n    ax.set_title('Sine and Cosine Waves')\n    ax.legend()\n    ax.grid(True)\n    return fig, ax",
  "model": "deepseek-chat-v3-0324"
}