{
  "task_id": "BigCodeBench/241",
  "instruct_prompt": "Create a numeric array from the \"original\" list, normalize the array, and draw the original and normalized arrays. The function will plot the original and normalized arrays with a title of 'Original vs. Normalized Data'.\nThe function should output with:\n    np.array: A numpy array for the original data.\n    np.array: Normalized array.\n    matplotlib.axes.Axes: Axes object with the plotted data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n```",
  "llm_response": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n    \"\"\"\n    Create a numeric array from the \"original\" list, normalize the array, and plot both.\n    \n    Parameters:\n    original (list): A list of numeric values to be processed.\n    \n    Returns:\n    tuple: A tuple containing:\n        - np.array: The original data as a numpy array.\n        - np.array: The normalized data as a numpy array.\n        - matplotlib.axes.Axes: Axes object with the plotted data.\n    \"\"\"\n    # Convert the original list to a numpy array\n    original_array = np.array(original)\n    \n    # Reshape the data for normalization (sklearn expects 2D array)\n    data = original_array.reshape(-1, 1)\n    \n    # Normalize the data using MinMaxScaler\n    scaler = preprocessing.MinMaxScaler()\n    normalized_data = scaler.fit_transform(data)\n    normalized_array = normalized_data.flatten()\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(original_array, label='Original', marker='o')\n    ax.plot(normalized_array, label='Normalized', marker='x')\n    ax.set_title('Original vs. Normalized Data')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.legend()\n    ax.grid(True)\n    \n    return original_array, normalized_array, ax",
  "model": "deepseek-chat-v3-0324"
}