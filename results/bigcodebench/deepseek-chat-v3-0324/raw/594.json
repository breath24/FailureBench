{
  "task_id": "BigCodeBench/594",
  "instruct_prompt": "Generate weather data for the specified number of hours, save it in a CSV file with colomns 'Time' and 'Condition' and back up the file to a backup directory.\nThe function should output with:\n    str: The path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
  "llm_response": "import csv\nimport os\nimport shutil\nfrom datetime import datetime, timedelta\nfrom random import randint\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\nBACKUP_DIR = './backup'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data for the specified number of hours, save it in a CSV file with columns 'Time' and 'Condition',\n    and back up the file to a backup directory.\n\n    Parameters:\n    - hours (int): The number of hours of weather data to generate.\n    - output_dir (str): The directory where the CSV file will be saved. Default is './output'.\n\n    Returns:\n    - str: The path of the generated CSV file.\n    \"\"\"\n    # Create output and backup directories if they don't exist\n    os.makedirs(output_dir, exist_ok=True)\n    os.makedirs(BACKUP_DIR, exist_ok=True)\n    \n    # Generate filename based on current timestamp\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = f\"weather_data_{timestamp}.csv\"\n    filepath = os.path.join(output_dir, filename)\n    \n    # Generate weather data\n    start_time = datetime.now()\n    weather_data = []\n    for i in range(hours):\n        current_time = start_time + timedelta(hours=i)\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        weather_data.append({\n            'Time': current_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n            'Condition': condition\n        })\n    \n    # Write data to CSV file\n    with open(filepath, mode='w', newline='') as file:\n        writer = csv.DictWriter(file, fieldnames=['Time', 'Condition'])\n        writer.writeheader()\n        writer.writerows(weather_data)\n    \n    # Backup the file\n    backup_filepath = os.path.join(BACKUP_DIR, filename)\n    shutil.copy2(filepath, backup_filepath)\n    \n    return filepath",
  "model": "deepseek-chat-v3-0324"
}