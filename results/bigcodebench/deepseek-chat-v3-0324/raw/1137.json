{
  "task_id": "BigCodeBench/1137",
  "instruct_prompt": "Extracts phone numbers from a given URL or local file and saves them to a specified file in JSON format.\nThe function should output with:\n    list: A list of strings, each representing a found phone number.\nYou should write self-contained code starting with:\n```\nimport bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n```",
  "llm_response": "import bs4\nimport requests\nimport re\nimport json\nimport os\ndef task_func(url: str, output_path: str) -> list:\n    \"\"\"\n    Extracts phone numbers from a given URL or local file and saves them to a specified file in JSON format.\n    \n    Args:\n        url (str): The URL or local file path to extract phone numbers from.\n        output_path (str): The file path to save the extracted phone numbers in JSON format.\n        \n    Returns:\n        list: A list of strings, each representing a found phone number.\n    \n    Note:\n        The function handles both web URLs and local file paths.\n        Phone numbers are matched in various formats including:\n        (123) 456-7890, 123-456-7890, 123.456.7890, +1 123 456 7890, etc.\n    \"\"\"\n    # Unified phone number regex pattern\n    phone_regex = re.compile(\n        r\"\"\"(\n            (\\+\\d{1,3}[\\s\\-\\.]?)?               # international prefix\n            (\\(?\\d{3}\\)?[\\s\\-\\.]?)?             # area code\n            \\d{3}[\\s\\-\\.]?                      # first 3 digits\n            \\d{4}                               # last 4 digits\n        )\"\"\", \n        re.VERBOSE\n    )\n    \n    # Determine if the input is a URL or local file\n    if url.startswith(('http://', 'https://')):\n        # Fetch content from URL\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n            soup = bs4.BeautifulSoup(response.text, 'html.parser')\n            text = soup.get_text()\n        except Exception as e:\n            print(f\"Error fetching URL: {e}\")\n            return []\n    else:\n        # Read from local file\n        try:\n            if not os.path.exists(url):\n                print(f\"File not found: {url}\")\n                return []\n            with open(url, 'r', encoding='utf-8') as file:\n                text = file.read()\n        except Exception as e:\n            print(f\"Error reading file: {e}\")\n            return []\n    \n    # Find all matches in the text\n    matches = []\n    for groups in phone_regex.findall(text):\n        phone = groups[0].strip()\n        # Clean up phone number format\n        phone = re.sub(r'[\\s\\-\\.]', '', phone)\n        if len(phone) >= 10:  # Minimum 10 digits for US numbers\n            formatted_phone = f\"({phone[-10:-7]}) {phone[-7:-4]}-{phone[-4:]}\"\n            matches.append(formatted_phone)\n    \n    # Remove duplicates while preserving order\n    seen = set()\n    unique_matches = [x for x in matches if not (x in seen or seen.add(x))]\n    \n    # Save to JSON file\n    try:\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump(unique_matches, f, indent=2)\n    except Exception as e:\n        print(f\"Error writing output file: {e}\")\n        return []\n    \n    return unique_matches",
  "model": "deepseek-chat-v3-0324"
}