{
  "task_id": "BigCodeBench/211",
  "instruct_prompt": "Download and keep a zip file from a URL, extract its contents to the specified directory, and return the list of extracted files.\nThe function should output with:\n    list: A list of filenames of the extracted files.\nYou should write self-contained code starting with:\n```\nimport requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n```",
  "llm_response": "import requests\nimport os\nimport zipfile\nfrom io import BytesIO\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Downloads a zip file from the specified URL, extracts its contents to the specified directory,\n    and returns a list of the extracted files.\n\n    Parameters:\n    - url (str): The URL of the zip file to download.\n    - destination_directory (str): The directory where the contents of the zip file will be extracted.\n    - headers (dict, optional): Optional headers to include in the request to download the zip file.\n\n    Returns:\n    - list: A list of filenames of the extracted files.\n\n    Raises:\n    - requests.exceptions.RequestException: If the download fails.\n    - zipfile.BadZipFile: If the downloaded file is not a valid zip file.\n    - OSError: If there is an issue creating the destination directory or writing files.\n    \"\"\"\n    if headers is None:\n        headers = {}\n    # Ensure the destination directory exists\n    os.makedirs(destination_directory, exist_ok=True)\n    # Download the zip file\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n    # Extract the contents of the zip file\n    with zipfile.ZipFile(BytesIO(response.content)) as zip_ref:\n        zip_ref.extractall(destination_directory)\n        extracted_files = zip_ref.namelist()\n    # Return the list of extracted files\n    return extracted_files",
  "model": "deepseek-chat-v3-0324"
}