{
  "task_id": "BigCodeBench/590",
  "instruct_prompt": "Extracts the text and href attributes of all anchor tags from a given URL's HTML content, and returns this data in a pandas DataFrame along with the time of data extraction.\nNote that: The function requires internet connectivity to fetch HTML content.\nThe function should raise the exception for: ValueError: If the provided URL is invalid or empty. URLError: If there is an issue with network connectivity or the server.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'. Each row\n    corresponds to an anchor tag in the HTML, with 'text' and 'href' containing\n    the text and the hyperlink reference of the anchor tag, respectively.\n    'fetch_time' contains the timestamp of when the data was fetched in the format\n    'YYYY-MM-DD HH:MM:SS'.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n```",
  "llm_response": "import urllib.request\nfrom urllib.error import URLError, ValueError\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n    \"\"\"\n    Extracts the text and href attributes of all anchor tags from a given URL's HTML content,\n    and returns this data in a pandas DataFrame along with the time of data extraction.\n\n    Parameters:\n    url (str): The URL from which to extract anchor tags.\n\n    Returns:\n    pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'. Each row\n    corresponds to an anchor tag in the HTML, with 'text' and 'href' containing\n    the text and the hyperlink reference of the anchor tag, respectively.\n    'fetch_time' contains the timestamp of when the data was fetched in the format\n    'YYYY-MM-DD HH:MM:SS'.\n\n    Raises:\n    ValueError: If the provided URL is invalid or empty.\n    URLError: If there is an issue with network connectivity or the server.\n    \"\"\"\n    if not url or not isinstance(url, str):\n        raise ValueError(\"Invalid or empty URL provided.\")\n    try:\n        # Fetch the HTML content from the URL\n        with urllib.request.urlopen(url) as response:\n            html_content = response.read().decode('utf-8')\n    except ValueError as e:\n        raise ValueError(\"Invalid URL provided.\") from e\n    except URLError as e:\n        raise URLError(\"Network or server error occurred.\") from e\n    # Parse the HTML content using PyQuery\n    doc = pq(html_content)\n    anchor_tags = doc('a')\n    data = []\n    fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    for anchor in anchor_tags.items():\n        text = anchor.text()\n        href = anchor.attr('href')\n        data.append({'text': text, 'href': href, 'fetch_time': fetch_time})\n    # Create a DataFrame from the collected data\n    df = pd.DataFrame(data)\n    return df",
  "model": "deepseek-chat-v3-0324"
}