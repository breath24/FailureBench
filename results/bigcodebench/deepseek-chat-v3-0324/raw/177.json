{
  "task_id": "BigCodeBench/177",
  "instruct_prompt": "Extracts articles whose titles contain specific case-insensitive keywords (\"like\" or \"what\") from a DataFrame and analyzes the frequency of each word in the content of these articles, excluding punctuation.\nThe function should raise the exception for: ValueError: If the DataFrame is empty or does not contain the necessary columns 'Title' and 'Content'.\nThe function should output with:\n    dict: A dictionary with keys as words and values as their corresponding frequency, excluding any punctuation marks.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nfrom string import punctuation\ndef task_func(df):\n```",
  "llm_response": "import re\nimport nltk\nfrom string import punctuation\nimport pandas as pd\nfrom collections import Counter\ndef task_func(df):\n    \"\"\"\n    Extracts articles whose titles contain specific case-insensitive keywords (\"like\" or \"what\") from a DataFrame,\n    analyzes the frequency of each word in the content of these articles, excluding punctuation.\n\n    Parameters:\n    df (pd.DataFrame): The input DataFrame containing articles with 'Title' and 'Content' columns.\n\n    Returns:\n    dict: A dictionary with keys as words and values as their corresponding frequency, excluding any punctuation marks.\n\n    Raises:\n    ValueError: If the DataFrame is empty or does not contain the necessary columns 'Title' and 'Content'.\n    \"\"\"\n    # Check if DataFrame is empty or lacks required columns\n    if df.empty:\n        raise ValueError(\"The input DataFrame is empty.\")\n    if not all(col in df.columns for col in ['Title', 'Content']):\n        raise ValueError(\"The DataFrame must contain both 'Title' and 'Content' columns.\")\n    \n    # Filter articles with titles containing 'like' or 'what' (case-insensitive)\n    pattern = re.compile(r'like|what', re.IGNORECASE)\n    filtered_df = df[df['Title'].apply(lambda x: bool(pattern.search(x)))]\n    \n    # Combine all content text into one string\n    all_content = ' '.join(filtered_df['Content'].astype(str))\n    \n    # Remove punctuation and split into words\n    translator = str.maketrans('', '', punctuation)\n    words = re.sub(r'[^\\w\\s]', '', all_content).lower().split()\n    \n    # Count word frequencies\n    word_counts = Counter(words)\n    \n    return dict(word_counts)",
  "model": "deepseek-chat-v3-0324"
}