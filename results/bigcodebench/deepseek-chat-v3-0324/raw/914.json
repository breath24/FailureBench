{
  "task_id": "BigCodeBench/914",
  "instruct_prompt": "Predicts the stock closing prices for the next 7 days using simple linear regression and plots the data. Constants: - The function uses a constant time step of 24*60*60 seconds to generate future timestamps.\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list with predicted prices for the next 7 days.\n    Axes: The matplotlib Axes object containing the plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    \"\"\"\n    Predicts the stock closing prices for the next 7 days using simple linear regression and plots the data.\n    \n    Parameters:\n    df (pd.DataFrame): A DataFrame containing stock data with a 'Date' column and a 'Close' column.\n    \n    Returns:\n    tuple: A tuple containing:\n        list: A list with predicted prices for the next 7 days.\n        plt.Axes: The matplotlib Axes object containing the plot.\n    \"\"\"\n    # Ensure the DataFrame has the required columns\n    if not all(col in df.columns for col in ['Date', 'Close']):\n        raise ValueError(\"DataFrame must contain 'Date' and 'Close' columns.\")\n    \n    # Convert dates to numerical values (timestamps)\n    df['Date'] = pd.to_datetime(df['Date'])\n    df['Timestamp'] = df['Date'].astype(np.int64) // 10**9  # Convert to seconds\n    \n    # Prepare the data for linear regression\n    X = df['Timestamp'].values.reshape(-1, 1)\n    y = df['Close'].values\n    \n    # Train the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Generate timestamps for the next 7 days (24*60*60 seconds per day)\n    last_timestamp = df['Timestamp'].iloc[-1]\n    future_timestamps = [last_timestamp + i * 24 * 60 * 60 for i in range(1, 8)]\n    future_X = np.array(future_timestamps).reshape(-1, 1)\n    \n    # Predict the closing prices for the next 7 days\n    predicted_prices = model.predict(future_X)\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot historical data\n    ax.plot(df['Date'], df['Close'], label='Historical Data', color='blue')\n    \n    # Plot predicted data\n    future_dates = pd.to_datetime(future_timestamps, unit='s')\n    ax.plot(future_dates, predicted_prices, label='Predicted Prices', color='red', linestyle='--')\n    \n    # Add labels and title\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Stock Closing Price Prediction')\n    ax.legend()\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return (predicted_prices.tolist(), ax)",
  "model": "deepseek-chat-v3-0324"
}