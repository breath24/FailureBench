{
  "task_id": "BigCodeBench/785",
  "instruct_prompt": "Archive all files that match a particular pattern and then delete the original files.\nNote that: This function will return the archive file path.\nThe function should output with:\n    archive_file (str): The archive file path.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n```",
  "llm_response": "import subprocess\nimport os\nimport glob\nimport shutil\nfrom datetime import datetime\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    \"\"\"\n    Archives all files matching the given pattern and deletes the original files.\n    \n    Parameters:\n    pattern (str): The file pattern to match (e.g., '*.txt' or '/path/to/files/*.log')\n    \n    Returns:\n    str: The path to the created archive file.\n    \n    Raises:\n    ValueError: If no files match the given pattern.\n    \"\"\"\n    # Create archive directory if it doesn't exist\n    os.makedirs(ARCHIVE_DIR, exist_ok=True)\n    \n    # Find all files matching the pattern\n    matched_files = glob.glob(pattern)\n    if not matched_files:\n        raise ValueError(f\"No files found matching pattern: {pattern}\")\n    \n    # Create a timestamped archive filename\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    archive_name = f\"archive_{timestamp}.tar.gz\"\n    archive_path = os.path.join(ARCHIVE_DIR, archive_name)\n    \n    # Create the archive\n    with open(os.devnull, 'w') as devnull:\n        subprocess.run(\n            ['tar', '-czf', archive_path] + matched_files,\n            stdout=devnull,\n            stderr=devnull,\n            check=True\n        )\n    \n    # Delete the original files\n    for file_path in matched_files:\n        if os.path.isfile(file_path):\n            os.remove(file_path)\n    \n    return archive_path",
  "model": "deepseek-chat-v3-0324"
}