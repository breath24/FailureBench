{
  "task_id": "BigCodeBench/777",
  "instruct_prompt": "Unzip all zip files in a directory whose name matches a certain pattern by splitting the filename the last time \"-\" occurs and using the prefix part of the filename as the directory to extract.\nThe function should output with:\n    list: A list of directories where the files were extracted.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n```",
  "llm_response": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzips all zip files in the specified directory whose names match a certain pattern.\n    The files are extracted into directories named after the prefix part of the filename\n    (everything before the last '-' followed by numbers and .zip extension).\n\n    Parameters:\n    - directory (str): The directory to search for zip files.\n    - pattern (str): Regular expression pattern to match zip filenames. Default matches names like 'prefix-123.zip'.\n\n    Returns:\n    - list: A list of directories where the files were extracted.\n\n    Example:\n    >>> task_func('/path/to/zips')\n    ['/path/to/zips/prefix1', '/path/to/zips/prefix2']\n    \"\"\"\n    extracted_dirs = []\n    for filename in os.listdir(directory):\n        if not filename.endswith('.zip'):\n            continue\n        match = re.match(pattern, filename)\n        if not match:\n            continue\n        prefix = match.group(1)\n        zip_path = os.path.join(directory, filename)\n        extract_dir = os.path.join(directory, prefix)\n        os.makedirs(extract_dir, exist_ok=True)\n        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n            zip_ref.extractall(extract_dir)\n        extracted_dirs.append(extract_dir)\n    return extracted_dirs",
  "model": "deepseek-chat-v3-0324"
}