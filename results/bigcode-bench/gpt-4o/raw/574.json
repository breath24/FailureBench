{
  "task_id": "BigCodeBench/574",
  "instruct_prompt": "Create a noisy sine wave of a specified length and adjusts a curve using curve_fit from scipy.optimize to the data.\nThe function should output with:\n    Axes object: A plot showing the noisy sine wave and its adjusted curve.\nYou should write self-contained code starting with:\n```\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n```",
  "llm_response": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    # Define the true sine wave function\n    def true_sine_wave(x, amplitude, frequency, phase, offset):\n        return amplitude * np.sin(frequency * x + phase) + offset\n\n    # Generate x values\n    x_values = np.linspace(0, 2 * np.pi, array_length)\n\n    # Generate the true sine wave without noise\n    true_amplitude = 1.0\n    true_frequency = 1.0\n    true_phase = 0.0\n    true_offset = 0.0\n    true_y_values = true_sine_wave(x_values, true_amplitude, true_frequency, true_phase, true_offset)\n\n    # Add noise to the sine wave\n    noise = noise_level * np.random.normal(size=array_length)\n    noisy_y_values = true_y_values + noise\n\n    # Define the model function to fit\n    def model_sine_wave(x, amplitude, frequency, phase, offset):\n        return amplitude * np.sin(frequency * x + phase) + offset\n\n    # Use curve_fit to fit the model to the noisy data\n    initial_guess = [1.0, 1.0, 0.0, 0.0]\n    params, covariance = curve_fit(model_sine_wave, x_values, noisy_y_values, p0=initial_guess)\n\n    # Extract the fitted parameters\n    fitted_amplitude, fitted_frequency, fitted_phase, fitted_offset = params\n\n    # Generate the fitted curve\n    fitted_y_values = model_sine_wave(x_values, fitted_amplitude, fitted_frequency, fitted_phase, fitted_offset)\n\n    # Plot the noisy sine wave and the fitted curve\n    fig, ax = plt.subplots()\n    ax.plot(x_values, noisy_y_values, 'b.', label='Noisy Data')\n    ax.plot(x_values, fitted_y_values, 'r-', label='Fitted Curve')\n    ax.set_title('Noisy Sine Wave and Fitted Curve')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend()\n\n    # Show the plot\n    plt.show()\n\n    return ax",
  "model": "gpt-4o"
}