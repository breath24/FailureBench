{
  "task_id": "BigCodeBench/211",
  "instruct_prompt": "Download and keep a zip file from a URL, extract its contents to the specified directory, and return the list of extracted files.\nThe function should output with:\n    list: A list of filenames of the extracted files.\nYou should write self-contained code starting with:\n```\nimport requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n```",
  "llm_response": "import requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Download a zip file from a URL, extract its contents to the specified directory, \n    and return the list of extracted files.\n\n    Args:\n        url (str): The URL of the zip file to download.\n        destination_directory (str): The directory where the zip file will be extracted.\n        headers (dict, optional): The headers to use for the HTTP request. Defaults to None.\n\n    Returns:\n        list: A list of filenames of the extracted files.\n    \"\"\"\n\n    # Send a GET request to the URL to download the zip file\n    response = requests.get(url, headers=headers, stream=True)\n\n    # Check if the request was successful\n    if response.status_code != 200:\n        raise Exception(f\"Failed to download the zip file. Status code: {response.status_code}\")\n\n    # Get the filename of the zip file from the URL\n    filename = os.path.basename(url)\n\n    # Create the destination directory if it does not exist\n    if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n\n    # Save the zip file to the destination directory\n    zip_file_path = os.path.join(destination_directory, filename)\n    with open(zip_file_path, 'wb') as file:\n        for chunk in response.iter_content(chunk_size=1024): \n            if chunk:\n                file.write(chunk)\n\n    # Extract the zip file\n    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n        # Get the list of files in the zip file\n        files = zip_ref.namelist()\n        \n        # Extract the files to the destination directory\n        zip_ref.extractall(destination_directory)\n\n    # Remove the zip file\n    os.remove(zip_file_path)\n\n    # Return the list of extracted files\n    return [os.path.join(destination_directory, file) for file in files]\nurl = \"https://example.com/example.zip\"\ndestination_directory = \"extracted_files\"",
  "model": "llama-3.3-70b"
}