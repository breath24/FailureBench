{
  "task_id": "BigCodeBench/101",
  "instruct_prompt": "Draw the correlation heatmap of the Boston Housing dataset using Seaborn, with an option to save it to a specified file.\nThe function should raise the exception for: ValueError: If an error occurs in generating or saving the plot.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the heatmap plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n```",
  "llm_response": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom urllib.request import urlopen\nfrom io import StringIO\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", save_path=None, seed=42):\n    \"\"\"\n    Draws a correlation heatmap of the Boston Housing dataset using Seaborn and optionally saves it to a file.\n    \n    Parameters:\n    - data_url (str): URL to the Boston Housing dataset. Defaults to the CMU dataset.\n    - save_path (str, optional): Path to save the heatmap plot. If None, the plot is not saved. Defaults to None.\n    - seed (int): Seed for reproducibility when sampling data. Defaults to 42.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object containing the heatmap plot.\n    \n    Raises:\n    - ValueError: If an error occurs in generating or saving the plot.\n    \"\"\"\n    try:\n        # Load the Boston Housing dataset\n        raw_text = urlopen(data_url).read().decode('utf-8')\n        data = np.genfromtxt(StringIO(raw_text), skip_header=22, filling_values=0)\n        feature_names = np.array([\n            'CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', \n            'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV'\n        ])\n        df = pd.DataFrame(data[:, :14], columns=feature_names)\n        \n        # Calculate correlation matrix\n        corr = df.corr()\n        \n        # Generate a mask for the upper triangle\n        mask = np.triu(np.ones_like(corr, dtype=bool))\n        \n        # Set up the matplotlib figure\n        plt.figure(figsize=(12, 10))\n        \n        # Draw the heatmap with the mask and correct aspect ratio\n        ax = sns.heatmap(\n            corr, \n            mask=mask, \n            cmap='coolwarm', \n            vmax=1.0, \n            vmin=-1.0, \n            center=0,\n            annot=True, \n            fmt=\".2f\", \n            square=True, \n            linewidths=.5, \n            cbar_kws={\"shrink\": .5}\n        )\n        \n        plt.title('Correlation Heatmap of Boston Housing Dataset')\n        \n        # Save the plot if save_path is provided\n        if save_path is not None:\n            plt.savefig(save_path, bbox_inches='tight')\n        \n        return ax\n    \n    except Exception as e:\n        raise ValueError(f\"An error occurred in generating or saving the plot: {str(e)}\")",
  "model": "deepseek-chat-v3-0324"
}