{
  "task_id": "BigCodeBench/324",
  "instruct_prompt": "Run files from list of files as subprocesses at the same time.\nThe function should output with:\n    list: The exit codes of the subprocesses.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport time\nimport threading\ndef task_func(file_list):\n```",
  "llm_response": "import subprocess\nimport time\nimport threading\ndef task_func(file_list):\n    \"\"\"\n    Run files from a list as subprocesses simultaneously and return their exit codes.\n\n    Args:\n        file_list: List of file paths to execute as subprocesses\n\n    Returns:\n        List of exit codes corresponding to each subprocess\n    \"\"\"\n    processes = []\n    exit_codes = []\n\n    def run_process(file_path):\n        try:\n            process = subprocess.Popen([file_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            processes.append(process)\n            process.wait()\n            exit_codes.append(process.returncode)\n        except Exception as e:\n            exit_codes.append(-1)  # Indicate error if process couldn't be started\n\n    # Create and start a thread for each file\n    threads = []\n    for file_path in file_list:\n        thread = threading.Thread(target=run_process, args=(file_path,))\n        threads.append(thread)\n        thread.start()\n\n    # Wait for all threads to complete\n    for thread in threads:\n        thread.join()\n\n    return exit_codes",
  "model": "mistral-3.2-24b"
}