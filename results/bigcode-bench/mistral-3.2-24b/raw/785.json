{
  "task_id": "BigCodeBench/785",
  "instruct_prompt": "Archive all files that match a particular pattern and then delete the original files.\nNote that: This function will return the archive file path.\nThe function should output with:\n    archive_file (str): The archive file path.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n```",
  "llm_response": "import subprocess\nimport os\nimport glob\nimport tarfile\nfrom datetime import datetime\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    \"\"\"\n    Archives all files matching the given pattern and deletes the original files.\n    Returns the path to the created archive file.\n\n    Args:\n        pattern (str): File pattern to match (e.g., '*.txt')\n\n    Returns:\n        str: Path to the created archive file\n    \"\"\"\n    # Create archive directory if it doesn't exist\n    os.makedirs(ARCHIVE_DIR, exist_ok=True)\n\n    # Get current timestamp for archive filename\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    archive_name = f\"archive_{timestamp}.tar.gz\"\n    archive_path = os.path.join(ARCHIVE_DIR, archive_name)\n\n    # Find all files matching the pattern\n    files_to_archive = glob.glob(pattern)\n    if not files_to_archive:\n        raise ValueError(f\"No files found matching pattern: {pattern}\")\n\n    # Create the archive\n    with tarfile.open(archive_path, \"w:gz\") as tar:\n        for file_path in files_to_archive:\n            # Add file to archive\n            tar.add(file_path)\n            # Delete original file\n            os.remove(file_path)\n\n    return archive_path",
  "model": "mistral-3.2-24b"
}