{
  "task_id": "BigCodeBench/914",
  "instruct_prompt": "Predicts the stock closing prices for the next 7 days using simple linear regression and plots the data. Constants: - The function uses a constant time step of 24*60*60 seconds to generate future timestamps.\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list with predicted prices for the next 7 days.\n    Axes: The matplotlib Axes object containing the plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Prepare the data\n    df = df.copy()\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    df = df.sort_values('timestamp')\n    \n    # Convert timestamps to numeric values (seconds since epoch)\n    X = df['timestamp'].astype(np.int64) // 10**9  # Convert nanoseconds to seconds\n    X = X.values.reshape(-1, 1)\n    y = df['close'].values\n    \n    # Create and train the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Generate future timestamps for the next 7 days\n    last_timestamp = df['timestamp'].iloc[-1]\n    time_step = 24 * 60 * 60  # 24 hours in seconds\n    future_timestamps = []\n    \n    for i in range(1, 8):  # Next 7 days\n        future_timestamp = last_timestamp + pd.Timedelta(seconds=i * time_step)\n        future_timestamps.append(future_timestamp)\n    \n    # Convert future timestamps to numeric values for prediction\n    future_X = np.array([ts.astype(np.int64) // 10**9 for ts in future_timestamps]).reshape(-1, 1)\n    \n    # Predict future prices\n    predicted_prices = model.predict(future_X)\n    predicted_prices = predicted_prices.tolist()\n    \n    # Create plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot historical data\n    ax.plot(df['timestamp'], df['close'], 'b-', label='Historical Data', marker='o', markersize=3)\n    \n    # Plot predicted data\n    ax.plot(future_timestamps, predicted_prices, 'r-', label='Predicted Prices', marker='o', markersize=4)\n    \n    # Formatting\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Stock Price Prediction for Next 7 Days')\n    ax.legend()\n    ax.grid(True, alpha=0.3)\n    \n    # Rotate x-axis labels for better readability\n    plt.setp(ax.get_xticklabels(), rotation=45, ha='right')\n    plt.tight_layout()\n    \n    return (predicted_prices, ax)",
  "model": "qwen3-coder"
}