{
  "task_id": "BigCodeBench/324",
  "instruct_prompt": "Run files from list of files as subprocesses at the same time.\nThe function should output with:\n    list: The exit codes of the subprocesses.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport time\nimport threading\ndef task_func(file_list):\n```",
  "llm_response": "import subprocess\nimport time\nimport threading\ndef task_func(file_list):\n    \"\"\"\n    Run files from list of files as subprocesses at the same time.\n    \n    Args:\n        file_list: List of file paths to execute\n        \n    Returns:\n        list: The exit codes of the subprocesses\n    \"\"\"\n    # List to store the exit codes\n    exit_codes = []\n    # Lock for thread-safe operations\n    lock = threading.Lock()\n    \n    def run_file(file_path):\n        \"\"\"Run a single file and store its exit code\"\"\"\n        try:\n            # Run the file as a subprocess\n            result = subprocess.run(['python', file_path], \n                                  capture_output=True, \n                                  text=True)\n            # Store the exit code in a thread-safe manner\n            with lock:\n                exit_codes.append(result.returncode)\n        except Exception as e:\n            # If there's an error running the file, store -1 as error code\n            with lock:\n                exit_codes.append(-1)\n    \n    # Create and start threads for each file\n    threads = []\n    for file_path in file_list:\n        thread = threading.Thread(target=run_file, args=(file_path,))\n        threads.append(thread)\n        thread.start()\n    \n    # Wait for all threads to complete\n    for thread in threads:\n        thread.join()\n    \n    return exit_codes",
  "model": "qwen3-coder"
}