{
  "task_id": "BigCodeBench/906",
  "instruct_prompt": "Archives all processed files from a source directory to a target directory. The function identifies processed files by the '_processed' suffix in the filename.\nThe function should output with:\n    str: The path to the created archive.\nYou should write self-contained code starting with:\n```\nimport zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n```",
  "llm_response": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives all processed files from a source directory to a target directory.\n    Processed files are identified by the '_processed' suffix in the filename.\n    \n    Args:\n        source_dir (str): Path to the source directory containing files\n        target_dir (str): Path to the target directory for the archive\n        archive_name (str): Name of the archive file (default: 'archive.zip')\n    \n    Returns:\n        str: The path to the created archive\n    \"\"\"\n    # Create target directory if it doesn't exist\n    os.makedirs(target_dir, exist_ok=True)\n    \n    # Create the full path for the archive\n    archive_path = os.path.join(target_dir, archive_name)\n    \n    # Create a zip file\n    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        # Iterate through all files in the source directory\n        for filename in os.listdir(source_dir):\n            file_path = os.path.join(source_dir, filename)\n            \n            # Check if it's a file (not a directory)\n            if os.path.isfile(file_path):\n                # Check if the filename contains '_processed' suffix (before extension)\n                name, ext = os.path.splitext(filename)\n                if name.endswith('_processed'):\n                    # Add the file to the archive\n                    zipf.write(file_path, filename)\n    \n    return archive_path",
  "model": "qwen3-coder"
}