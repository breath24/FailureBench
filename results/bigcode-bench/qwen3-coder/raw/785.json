{
  "task_id": "BigCodeBench/785",
  "instruct_prompt": "Archive all files that match a particular pattern and then delete the original files.\nNote that: This function will return the archive file path.\nThe function should output with:\n    archive_file (str): The archive file path.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n```",
  "llm_response": "import subprocess\nimport os\nimport glob\nimport shutil\nfrom datetime import datetime\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Args:\n        pattern (str): The file pattern to match (e.g., \"*.txt\", \"data_*.csv\")\n        \n    Returns:\n        archive_file (str): The archive file path.\n    \"\"\"\n    # Create archive directory if it doesn't exist\n    os.makedirs(ARCHIVE_DIR, exist_ok=True)\n    \n    # Find all files matching the pattern\n    files = glob.glob(pattern)\n    \n    if not files:\n        # If no files found, create an empty archive with timestamp\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        archive_file = os.path.join(ARCHIVE_DIR, f\"archive_{timestamp}.tar.gz\")\n        # Create empty archive\n        subprocess.run(['tar', '-czf', archive_file, '--files-from', '/dev/null'], \n                      check=True, stderr=subprocess.DEVNULL)\n        return archive_file\n    \n    # Create archive filename with timestamp\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    archive_file = os.path.join(ARCHIVE_DIR, f\"archive_{timestamp}.tar.gz\")\n    \n    # Create the archive using tar\n    tar_command = ['tar', '-czf', archive_file] + files\n    subprocess.run(tar_command, check=True)\n    \n    # Delete original files\n    for file in files:\n        if os.path.isfile(file):\n            os.remove(file)\n    \n    return archive_file",
  "model": "qwen3-coder"
}