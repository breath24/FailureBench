{
  "task_id": "BigCodeBench/211",
  "instruct_prompt": "Download and keep a zip file from a URL, extract its contents to the specified directory, and return the list of extracted files.\nThe function should output with:\n    list: A list of filenames of the extracted files.\nYou should write self-contained code starting with:\n```\nimport requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n```",
  "llm_response": "import requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Download and keep a zip file from a URL, extract its contents to the specified directory,\n    and return the list of extracted files.\n    \n    Args:\n        url (str): The URL of the zip file to download\n        destination_directory (str): The directory to extract the files to\n        headers (dict, optional): HTTP headers to include in the request\n        \n    Returns:\n        list: A list of filenames of the extracted files\n    \"\"\"\n    # Create destination directory if it doesn't exist\n    os.makedirs(destination_directory, exist_ok=True)\n    \n    # Download the zip file\n    response = requests.get(url, headers=headers or {})\n    response.raise_for_status()  # Raise an exception for bad status codes\n    \n    # Save the zip file\n    zip_filename = os.path.join(destination_directory, \"downloaded_file.zip\")\n    with open(zip_filename, 'wb') as f:\n        f.write(response.content)\n    \n    # Extract the zip file\n    extracted_files = []\n    with zipfile.ZipFile(zip_filename, 'r') as zip_ref:\n        for member in zip_ref.infolist():\n            # Extract the file\n            zip_ref.extract(member, destination_directory)\n            # Add the extracted file path to our list\n            extracted_files.append(os.path.join(destination_directory, member.filename))\n    \n    return extracted_files",
  "model": "qwen3-coder"
}