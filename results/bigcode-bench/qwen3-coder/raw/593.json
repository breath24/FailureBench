{
  "task_id": "BigCodeBench/593",
  "instruct_prompt": "Generates traffic data for different vehicle types over a specified number of hours, saves the data to a CSV file with coloumns 'Time', 'Car', 'Bus', 'Truck', and 'Bike', and plots the data in a line chart with 'Time' on x-axis and 'Vehicle Count' on y-axis.\nThe function should output with:\n    tuple: Path to the CSV file and the matplotlib axes object of the line plot.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
  "llm_response": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generates traffic data for different vehicle types over a specified number of hours,\n    saves the data to a CSV file, and plots the data in a line chart.\n    \n    Args:\n        hours (int): Number of hours to generate data for\n        output_dir (str): Directory to save the CSV file\n    \n    Returns:\n        tuple: Path to the CSV file and the matplotlib axes object of the line plot\n    \"\"\"\n    # Create output directory if it doesn't exist\n    os.makedirs(output_dir, exist_ok=True)\n    \n    # Generate time series data\n    start_time = datetime.now().replace(minute=0, second=0, microsecond=0)\n    times = [start_time + timedelta(hours=i) for i in range(hours)]\n    \n    # Generate vehicle count data\n    data = []\n    for time in times:\n        row = {\n            'Time': time.strftime('%Y-%m-%d %H:%M:%S'),\n            'Car': randint(50, 200),\n            'Bus': randint(5, 30),\n            'Truck': randint(10, 50),\n            'Bike': randint(0, 30)\n        }\n        data.append(row)\n    \n    # Save data to CSV file\n    csv_filename = f\"traffic_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n    csv_path = os.path.join(output_dir, csv_filename)\n    \n    with open(csv_path, 'w', newline='') as csvfile:\n        fieldnames = ['Time', 'Car', 'Bus', 'Truck', 'Bike']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(data)\n    \n    # Create DataFrame for plotting\n    df = pd.DataFrame(data)\n    df['Time'] = pd.to_datetime(df['Time'])\n    \n    # Plot the data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    \n    for vehicle_type in VEHICLE_TYPES:\n        ax.plot(df['Time'], df[vehicle_type], marker='o', label=vehicle_type, linewidth=2)\n    \n    ax.set_xlabel('Time')\n    ax.set_ylabel('Vehicle Count')\n    ax.set_title('Traffic Data Over Time')\n    ax.legend()\n    ax.grid(True, alpha=0.3)\n    \n    # Rotate x-axis labels for better readability\n    plt.setp(ax.get_xticklabels(), rotation=45, ha='right')\n    plt.tight_layout()\n    \n    return (csv_path, ax)",
  "model": "qwen3-coder"
}