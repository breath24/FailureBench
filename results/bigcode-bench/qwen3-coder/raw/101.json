{
  "task_id": "BigCodeBench/101",
  "instruct_prompt": "Draw the correlation heatmap of the Boston Housing dataset using Seaborn, with an option to save it to a specified file.\nThe function should raise the exception for: ValueError: If an error occurs in generating or saving the plot.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the heatmap plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n```",
  "llm_response": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport requests\nfrom io import StringIO\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42, save_path=None):\n    \"\"\"\n    Draw the correlation heatmap of the Boston Housing dataset using Seaborn.\n    \n    Parameters:\n    data_url (str): URL to fetch the Boston Housing dataset\n    seed (int): Random seed for reproducibility\n    save_path (str): Path to save the plot image (optional)\n    \n    Returns:\n    matplotlib.axes.Axes: The Axes object containing the heatmap plot\n    \n    Raises:\n    ValueError: If an error occurs in generating or saving the plot\n    \"\"\"\n    try:\n        # Set random seed for reproducibility\n        np.random.seed(seed)\n        \n        # Fetch the data\n        response = requests.get(data_url)\n        if response.status_code != 200:\n            raise ValueError(f\"Failed to fetch data from URL: {data_url}\")\n        \n        # Parse the data\n        data_lines = response.text.splitlines()\n        \n        # Find where the actual data starts (skip header lines)\n        start_index = 0\n        for i, line in enumerate(data_lines):\n            if line.strip() and not line.startswith(' '):\n                try:\n                    float(line.split()[0])  # Try to parse first number\n                    start_index = i\n                    break\n                except (ValueError, IndexError):\n                    continue\n        \n        # Extract feature names from the header\n        feature_names = [\n            'CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', \n            'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV'\n        ]\n        \n        # Parse the data lines\n        data_rows = []\n        for line in data_lines[start_index:]:\n            if line.strip():\n                values = line.split()\n                if len(values) == 14:  # Should have 14 values\n                    try:\n                        data_rows.append([float(v) for v in values])\n                    except ValueError:\n                        continue\n        \n        if not data_rows:\n            raise ValueError(\"No valid data found in the dataset\")\n        \n        # Create DataFrame\n        df = pd.DataFrame(data_rows, columns=feature_names)\n        \n        # Calculate correlation matrix\n        corr_matrix = df.corr()\n        \n        # Create the heatmap\n        plt.figure(figsize=(12, 10))\n        heatmap = sns.heatmap(corr_matrix, \n                             annot=True,           # Show correlation values\n                             cmap='coolwarm',      # Color scheme\n                             center=0,             # Center colormap at 0\n                             square=True,          # Make cells square-shaped\n                             fmt='.2f',            # Format correlation values\n                             cbar_kws={\"shrink\": .8})\n        \n        plt.title('Correlation Heatmap - Boston Housing Dataset', fontsize=16, pad=20)\n        plt.xticks(rotation=45, ha='right')\n        plt.yticks(rotation=0)\n        plt.tight_layout()\n        \n        # Get the current axes\n        ax = plt.gca()\n        \n        # Save the plot if save_path is provided\n        if save_path:\n            try:\n                plt.savefig(save_path, dpi=300, bbox_inches='tight')\n            except Exception as e:\n                raise ValueError(f\"Error saving plot to {save_path}: {str(e)}\")\n        \n        return ax\n        \n    except Exception as e:\n        raise ValueError(f\"Error in generating or saving the plot: {str(e)}\")",
  "model": "qwen3-coder"
}