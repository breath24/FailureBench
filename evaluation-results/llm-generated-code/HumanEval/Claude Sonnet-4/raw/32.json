{
  "task_id": "HumanEval/32",
  "task_description": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
  "llm_response": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    def poly_derivative(xs):\n        return [i * xs[i] for i in range(1, len(xs))]\n    \n    x = 0.0\n    for _ in range(1000):\n        fx = poly(xs, x)\n        if abs(fx) < 1e-10:\n            return x\n        \n        dx = poly_derivative(xs)\n        if not dx:\n            break\n        dfx = poly(dx, x)\n        if abs(dfx) < 1e-10:\n            x += 0.1\n            continue\n        \n        x = x - fx / dfx\n    \n    return x",
  "model": "claude-sonnet-4"
}