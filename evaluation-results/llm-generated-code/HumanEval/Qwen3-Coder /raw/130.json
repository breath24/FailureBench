{
  "task_id": "HumanEval/130",
  "task_description": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
  "llm_response": "def tri(n):\n    if n < 0:\n        return []\n    \n    if n == 0:\n        return [1]\n    \n    # Initialize the sequence with known values\n    sequence = [1, 3]  # tri(0) = 1, tri(1) = 3\n    \n    # Calculate tri(2) explicitly\n    sequence.append(2)  # tri(2) = 1 + 2/2 = 2\n    \n    # For n >= 3, calculate remaining values\n    for i in range(3, n + 1):\n        if i % 2 == 0:  # even\n            sequence.append(1 + i // 2)\n        else:  # odd\n            # tri(n) = tri(n-1) + tri(n-2) + tri(n+1)\n            # We need to calculate tri(n+1) first if not already calculated\n            next_even = 1 + (i + 1) // 2\n            sequence.append(sequence[i-1] + sequence[i-2] + next_even)\n    \n    return sequence[:n+1]",
  "model": "qwen3-coder"
}