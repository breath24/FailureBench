{
  "task_id": "BigCodeBench/592",
  "instruct_prompt": "Create sensor data for the specified number of hours and save it in a CSV file with coloumns 'Time', 'Temperature', 'Humidity' and 'Pressure'.\nThe function should output with:\n    hours (int): Number of hours to generate data for.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
  "llm_response": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint, uniform\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data for the specified number of hours and save it in a CSV file.\n    \n    Args:\n        hours (int): Number of hours to generate data for.\n        output_dir (str): Directory to save the CSV file.\n    \n    Returns:\n        str: Path to the generated CSV file.\n    \"\"\"\n    # Create output directory if it doesn't exist\n    os.makedirs(output_dir, exist_ok=True)\n    \n    # Generate filename with timestamp\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = f\"sensor_data_{timestamp}.csv\"\n    filepath = os.path.join(output_dir, filename)\n    \n    # Generate sensor data\n    sensor_data = []\n    start_time = datetime.now()\n    \n    for hour in range(hours):\n        current_time = start_time + timedelta(hours=hour)\n        \n        # Generate realistic sensor values\n        temperature = round(uniform(18.0, 35.0), 2)  # Temperature in Celsius (18-35\u00b0C)\n        humidity = round(uniform(30.0, 90.0), 2)     # Humidity percentage (30-90%)\n        pressure = round(uniform(980.0, 1050.0), 2)  # Pressure in hPa (980-1050 hPa)\n        \n        sensor_data.append({\n            'Time': current_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n            'Temperature': temperature,\n            'Humidity': humidity,\n            'Pressure': pressure\n        })\n    \n    # Write data to CSV file\n    with open(filepath, 'w', newline='', encoding='utf-8') as csvfile:\n        fieldnames = ['Time', 'Temperature', 'Humidity', 'Pressure']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        \n        # Write header\n        writer.writeheader()\n        \n        # Write data rows\n        for row in sensor_data:\n            writer.writerow(row)\n    \n    print(f\"Sensor data for {hours} hours generated and saved to: {filepath}\")\n    return filepath",
  "model": "claude-sonnet-4"
}