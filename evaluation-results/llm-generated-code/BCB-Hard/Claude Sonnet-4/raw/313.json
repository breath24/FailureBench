{
  "task_id": "BigCodeBench/313",
  "instruct_prompt": "Organize files in a directory based on the first text that is not enclosed in square brackets. Move the files to subdirectories named after this text. If no matching text is found, the file is not moved.\nThe function should output with:\n    tuple:\n    str: The directory path with organized files.\n    dict: A dictionary where keys are the created subdirectories and values are lists of files moved to them.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n```",
  "llm_response": "import re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    \"\"\"\n    Organize files in a directory based on the first text that is not enclosed in square brackets.\n    Move the files to subdirectories named after this text. If no matching text is found, the file is not moved.\n    \n    Args:\n        directory (str): The directory path containing files to organize.\n    \n    Returns:\n        tuple:\n            str: The directory path with organized files.\n            dict: A dictionary where keys are the created subdirectories and values are lists of files moved to them.\n    \"\"\"\n    if not os.path.exists(directory):\n        raise ValueError(f\"Directory '{directory}' does not exist\")\n    \n    if not os.path.isdir(directory):\n        raise ValueError(f\"'{directory}' is not a directory\")\n    \n    organized_files = {}\n    \n    # Get all files in the directory (excluding subdirectories)\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    \n    for filename in files:\n        # Remove file extension to analyze the base name\n        base_name = os.path.splitext(filename)[0]\n        \n        # Pattern to find text not enclosed in square brackets\n        # This pattern matches any sequence of non-bracket characters that are not part of a bracketed section\n        pattern = r'(?:\\[[^\\]]*\\])*([^[\\]]+?)(?:\\[|$)'\n        \n        match = re.search(pattern, base_name)\n        \n        if match:\n            # Get the first non-bracketed text and clean it up\n            organizing_text = match.group(1).strip()\n            \n            # Skip if the organizing text is empty after stripping\n            if not organizing_text:\n                continue\n            \n            # Clean the organizing text to make it a valid directory name\n            # Remove or replace invalid characters for directory names\n            organizing_text = re.sub(r'[<>:\"/\\\\|?*]', '_', organizing_text)\n            organizing_text = organizing_text.strip('.')  # Remove leading/trailing dots\n            \n            if not organizing_text:  # Skip if nothing left after cleaning\n                continue\n            \n            # Create subdirectory path\n            subdirectory_path = os.path.join(directory, organizing_text)\n            \n            # Create subdirectory if it doesn't exist\n            if not os.path.exists(subdirectory_path):\n                os.makedirs(subdirectory_path)\n            \n            # Move file to subdirectory\n            source_path = os.path.join(directory, filename)\n            destination_path = os.path.join(subdirectory_path, filename)\n            \n            # Handle case where file with same name already exists in destination\n            counter = 1\n            original_destination = destination_path\n            while os.path.exists(destination_path):\n                name, ext = os.path.splitext(filename)\n                new_filename = f\"{name}_{counter}{ext}\"\n                destination_path = os.path.join(subdirectory_path, new_filename)\n                counter += 1\n            \n            shutil.move(source_path, destination_path)\n            \n            # Track organized files\n            if organizing_text not in organized_files:\n                organized_files[organizing_text] = []\n            organized_files[organizing_text].append(os.path.basename(destination_path))\n    \n    return directory, organized_files",
  "model": "claude-sonnet-4"
}