{
  "task_id": "BigCodeBench/906",
  "instruct_prompt": "Archives all processed files from a source directory to a target directory. The function identifies processed files by the '_processed' suffix in the filename.\nThe function should output with:\n    str: The path to the created archive.\nYou should write self-contained code starting with:\n```\nimport zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n```",
  "llm_response": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives all processed files from a source directory to a target directory.\n    The function identifies processed files by the '_processed' suffix in the filename.\n    \n    Args:\n        source_dir (str): Path to the source directory containing files\n        target_dir (str): Path to the target directory where archive will be created\n        archive_name (str): Name of the archive file (default: 'archive.zip')\n    \n    Returns:\n        str: The path to the created archive.\n    \"\"\"\n    # Create target directory if it doesn't exist\n    os.makedirs(target_dir, exist_ok=True)\n    \n    # Full path to the archive\n    archive_path = os.path.join(target_dir, archive_name)\n    \n    # Pattern to match files with '_processed' suffix (before file extension)\n    processed_pattern = re.compile(r'.*_processed\\.[^.]+$')\n    \n    # Create the zip archive\n    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        # Walk through the source directory\n        for root, dirs, files in os.walk(source_dir):\n            for file in files:\n                # Check if file has '_processed' suffix\n                if processed_pattern.match(file):\n                    file_path = os.path.join(root, file)\n                    # Add file to archive, preserving directory structure\n                    arcname = os.path.relpath(file_path, source_dir)\n                    zipf.write(file_path, arcname)\n    \n    return archive_path",
  "model": "claude-sonnet-4"
}