{
  "task_id": "BigCodeBench/326",
  "instruct_prompt": "Find and run all .bat files in a given directory, returning their file names and exit codes.\nThe function should output with:\n    list of tuples: A list where each tuple contains the file name and its exit code.\n    The exit code is None if the file could not be executed.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n```",
  "llm_response": "import subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n    \"\"\"\n    Find and run all .bat files in a given directory, returning their file names and exit codes.\n    \n    Args:\n        directory_path (str): Path to the directory containing .bat files\n        \n    Returns:\n        list of tuples: A list where each tuple contains the file name and its exit code.\n                       The exit code is None if the file could not be executed.\n    \"\"\"\n    results = []\n    \n    # Check if directory exists\n    if not os.path.exists(directory_path):\n        return results\n    \n    # Find all .bat files in the directory\n    bat_pattern = os.path.join(directory_path, \"*.bat\")\n    bat_files = glob.glob(bat_pattern)\n    \n    for bat_file in bat_files:\n        file_name = os.path.basename(bat_file)\n        exit_code = None\n        \n        try:\n            # Run the .bat file and capture the exit code\n            if sys.platform.startswith('win'):\n                # On Windows, run the .bat file directly\n                result = subprocess.run([bat_file], \n                                      capture_output=True, \n                                      text=True, \n                                      timeout=30)\n            else:\n                # On non-Windows systems, try to run with wine or skip\n                # For this implementation, we'll set exit_code to None for non-Windows\n                result = None\n                \n            if result is not None:\n                exit_code = result.returncode\n                \n        except subprocess.TimeoutExpired:\n            # If the process times out, set exit code to None\n            exit_code = None\n        except subprocess.SubprocessError:\n            # If there's any subprocess error, set exit code to None\n            exit_code = None\n        except FileNotFoundError:\n            # If the file is not found or cannot be executed, set exit code to None\n            exit_code = None\n        except Exception:\n            # For any other exception, set exit code to None\n            exit_code = None\n            \n        results.append((file_name, exit_code))\n    \n    return results",
  "model": "claude-sonnet-4"
}