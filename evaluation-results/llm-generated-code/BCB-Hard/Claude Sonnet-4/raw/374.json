{
  "task_id": "BigCodeBench/374",
  "instruct_prompt": "Protects all double quotes in all Excel (.xlsx) files in the specified directory by prefixing them with a double backslash.\nThe function should output with:\n    int: The number of Excel files processed.\nYou should write self-contained code starting with:\n```\nimport regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n```",
  "llm_response": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n    \"\"\"\n    Protects all double quotes in all Excel (.xlsx) files in the specified directory \n    by prefixing them with a double backslash.\n    \n    Args:\n        directory_path (str): Path to the directory containing Excel files\n        \n    Returns:\n        int: The number of Excel files processed\n    \"\"\"\n    # Get all .xlsx files in the directory\n    xlsx_pattern = os.path.join(directory_path, '*.xlsx')\n    xlsx_files = glob.glob(xlsx_pattern)\n    \n    files_processed = 0\n    \n    for file_path in xlsx_files:\n        try:\n            # Load the workbook\n            workbook = load_workbook(file_path)\n            file_modified = False\n            \n            # Process each worksheet\n            for worksheet in workbook.worksheets:\n                # Iterate through all cells in the worksheet\n                for row in worksheet.iter_rows():\n                    for cell in row:\n                        if cell.value is not None and isinstance(cell.value, str):\n                            # Check if the cell contains double quotes\n                            if '\"' in cell.value:\n                                # Replace double quotes with double backslash + double quote\n                                new_value = cell.value.replace('\"', '\\\\\\\\\"')\n                                cell.value = new_value\n                                file_modified = True\n            \n            # Save the workbook if any modifications were made\n            if file_modified:\n                workbook.save(file_path)\n            \n            files_processed += 1\n            \n        except Exception as e:\n            # Skip files that can't be processed (corrupted, password protected, etc.)\n            print(f\"Warning: Could not process file {file_path}: {str(e)}\")\n            continue\n    \n    return files_processed",
  "model": "claude-sonnet-4"
}