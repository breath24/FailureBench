{
  "task_id": "BigCodeBench/574",
  "instruct_prompt": "Create a noisy sine wave of a specified length and adjusts a curve using curve_fit from scipy.optimize to the data.\nThe function should output with:\n    Axes object: A plot showing the noisy sine wave and its adjusted curve.\nYou should write self-contained code starting with:\n```\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n```",
  "llm_response": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    # Create x values\n    x = np.linspace(0, 4*np.pi, array_length)\n    \n    # Create clean sine wave\n    y_clean = np.sin(x)\n    \n    # Add noise to create noisy sine wave\n    noise = np.random.normal(0, noise_level, array_length)\n    y_noisy = y_clean + noise\n    \n    # Define the function to fit (sine wave with parameters)\n    def sine_func(x, amplitude, frequency, phase, offset):\n        return amplitude * np.sin(frequency * x + phase) + offset\n    \n    # Initial guess for parameters [amplitude, frequency, phase, offset]\n    initial_guess = [1.0, 1.0, 0.0, 0.0]\n    \n    # Fit the curve to the noisy data\n    popt, pcov = curve_fit(sine_func, x, y_noisy, p0=initial_guess)\n    \n    # Generate fitted curve using optimized parameters\n    y_fitted = sine_func(x, *popt)\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.scatter(x, y_noisy, alpha=0.6, label='Noisy Data', s=10)\n    ax.plot(x, y_fitted, 'r-', linewidth=2, label=f'Fitted Curve: {popt[0]:.2f}*sin({popt[1]:.2f}*x + {popt[2]:.2f}) + {popt[3]:.2f}')\n    ax.plot(x, y_clean, 'g--', alpha=0.7, linewidth=1, label='Original Clean Sine')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Noisy Sine Wave and Curve Fitting')\n    ax.legend()\n    ax.grid(True, alpha=0.3)\n    \n    return ax",
  "model": "qwen3-coder"
}