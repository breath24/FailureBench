{
  "task_id": "BigCodeBench/374",
  "instruct_prompt": "Protects all double quotes in all Excel (.xlsx) files in the specified directory by prefixing them with a double backslash.\nThe function should output with:\n    int: The number of Excel files processed.\nYou should write self-contained code starting with:\n```\nimport regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n```",
  "llm_response": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n    \"\"\"\n    Protects all double quotes in all Excel (.xlsx) files in the specified directory\n    by prefixing them with a double backslash.\n    \n    Args:\n        directory_path (str): Path to the directory containing Excel files\n        \n    Returns:\n        int: The number of Excel files processed\n    \"\"\"\n    # Find all .xlsx files in the directory\n    pattern = os.path.join(directory_path, \"*.xlsx\")\n    files = glob.glob(pattern)\n    \n    processed_count = 0\n    \n    # Process each Excel file\n    for file_path in files:\n        try:\n            # Load the workbook\n            workbook = load_workbook(file_path)\n            \n            # Process each worksheet\n            for worksheet in workbook.worksheets:\n                # Process each row and cell\n                for row in worksheet.iter_rows():\n                    for cell in row:\n                        # Check if cell contains a string value\n                        if cell.value is not None and isinstance(cell.value, str):\n                            # Replace all double quotes with double backslash + double quote\n                            original_value = cell.value\n                            protected_value = original_value.replace('\"', '\\\\\"')\n                            \n                            # Only update if there was a change\n                            if original_value != protected_value:\n                                cell.value = protected_value\n            \n            # Save the modified workbook back to the same file\n            workbook.save(file_path)\n            processed_count += 1\n            \n        except Exception as e:\n            print(f\"Error processing file {file_path}: {e}\")\n            continue\n    \n    return processed_count",
  "model": "qwen3-coder"
}