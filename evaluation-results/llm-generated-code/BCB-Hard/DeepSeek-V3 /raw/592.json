{
  "task_id": "BigCodeBench/592",
  "instruct_prompt": "Create sensor data for the specified number of hours and save it in a CSV file with coloumns 'Time', 'Temperature', 'Humidity' and 'Pressure'.\nThe function should output with:\n    hours (int): Number of hours to generate data for.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
  "llm_response": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data for the specified number of hours and save it in a CSV file.\n    \n    The CSV file will have columns 'Time', 'Temperature', 'Humidity', and 'Pressure'.\n    The data is generated with random values within reasonable ranges for each sensor.\n    \n    Parameters:\n    - hours (int): Number of hours to generate data for.\n    - output_dir (str): Directory to save the CSV file. Default is './output'.\n    \n    Returns:\n    - str: Path to the generated CSV file.\n    \"\"\"\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    \n    # Generate filename with timestamp\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = f\"sensor_data_{timestamp}.csv\"\n    filepath = os.path.join(output_dir, filename)\n    \n    # Generate data for each hour\n    start_time = datetime.now()\n    data = []\n    for i in range(hours):\n        current_time = start_time + timedelta(hours=i)\n        temperature = randint(15, 35)  # Celsius\n        humidity = randint(30, 90)     # Percentage\n        pressure = randint(950, 1050)  # hPa\n        data.append({\n            'Time': current_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n            'Temperature': temperature,\n            'Humidity': humidity,\n            'Pressure': pressure\n        })\n    \n    # Write data to CSV\n    with open(filepath, 'w', newline='') as csvfile:\n        fieldnames = ['Time', 'Temperature', 'Humidity', 'Pressure']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(data)\n    \n    return filepath",
  "model": "deepseek-chat-v3-0324"
}