{
  "task_id": "BigCodeBench/945",
  "instruct_prompt": "Generates a time series of sales data starting from a specified date, then use linear regression to forecast future sales based on the provided or generated sales data.\nThe function should output with:\n    A numpy array containing the forecasted future sales for the same number of periods as the input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates a time series of sales data starting from a specified date, then uses linear regression to forecast future sales.\n    If sales_data is not provided, it generates random sales data. The function returns a numpy array of forecasted sales.\n\n    Parameters:\n    - start_date (str): The start date for the time series in 'YYYY-MM-DD' format. Default is '2016-01-01'.\n    - periods (int): The number of periods to generate. Default is 13.\n    - freq (str): The frequency of dates. Default is 'WOM-2FRI' (2nd Friday of each month).\n    - sales_data (array-like): Optional. The sales data to use for fitting the model. If None, random data is generated.\n\n    Returns:\n    - numpy.ndarray: A numpy array containing the forecasted future sales for the same number of periods as the input data.\n    \"\"\"\n    # Generate dates\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Generate or use provided sales data\n    if sales_data is None:\n        np.random.seed(42)  # For reproducibility\n        sales = np.random.randint(100, 500, size=periods)\n    else:\n        sales = np.array(sales_data)\n        if len(sales) != periods:\n            raise ValueError(\"Length of sales_data must match the number of periods.\")\n    \n    # Prepare data for linear regression\n    X = np.arange(len(dates)).reshape(-1, 1)  # Time as feature\n    y = sales  # Sales as target\n    \n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Forecast future sales\n    future_X = np.arange(len(dates), 2 * len(dates)).reshape(-1, 1)\n    forecasted_sales = model.predict(future_X)\n    \n    return forecasted_sales",
  "model": "deepseek-chat-v3-0324"
}