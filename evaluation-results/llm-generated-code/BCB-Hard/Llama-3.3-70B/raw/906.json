{
  "task_id": "BigCodeBench/906",
  "instruct_prompt": "Archives all processed files from a source directory to a target directory. The function identifies processed files by the '_processed' suffix in the filename.\nThe function should output with:\n    str: The path to the created archive.\nYou should write self-contained code starting with:\n```\nimport zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n```",
  "llm_response": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives all processed files from a source directory to a target directory.\n    \n    The function identifies processed files by the '_processed' suffix in the filename.\n    \n    Args:\n    source_dir (str): The path to the source directory.\n    target_dir (str): The path to the target directory.\n    archive_name (str): The name of the archive file. Defaults to 'archive.zip'.\n    \n    Returns:\n    str: The path to the created archive.\n    \"\"\"\n    \n    # Check if source and target directories exist\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    \n    # Initialize the list of processed files\n    processed_files = []\n    \n    # Iterate over all files in the source directory\n    for filename in os.listdir(source_dir):\n        # Check if the file has the '_processed' suffix\n        if re.search('_processed', filename):\n            # Add the file to the list of processed files\n            processed_files.append(os.path.join(source_dir, filename))\n    \n    # Create the archive file\n    archive_path = os.path.join(target_dir, archive_name)\n    with zipfile.ZipFile(archive_path, 'w') as zip_file:\n        # Add each processed file to the archive\n        for file in processed_files:\n            zip_file.write(file, os.path.basename(file))\n    \n    return archive_path",
  "model": "llama-3.3-70b"
}