{
  "task_id": "BigCodeBench/326",
  "instruct_prompt": "Find and run all .bat files in a given directory, returning their file names and exit codes.\nThe function should output with:\n    list of tuples: A list where each tuple contains the file name and its exit code.\n    The exit code is None if the file could not be executed.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n```",
  "llm_response": "import subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n    \"\"\"\n    Find and run all .bat files in the given directory, returning their file names and exit codes.\n\n    Args:\n        directory_path (str): Path to the directory containing .bat files\n\n    Returns:\n        list: A list of tuples where each tuple contains (filename, exit_code)\n              exit_code is None if the file could not be executed\n    \"\"\"\n    results = []\n\n    # Verify the directory exists\n    if not os.path.isdir(directory_path):\n        print(f\"Error: Directory '{directory_path}' does not exist\", file=sys.stderr)\n        return results\n\n    # Find all .bat files in the directory\n    bat_files = glob.glob(os.path.join(directory_path, '*.bat'))\n\n    for bat_file in bat_files:\n        try:\n            # Run the batch file and capture the exit code\n            result = subprocess.run(\n                [bat_file],\n                shell=True,\n                check=False,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                text=True\n            )\n            exit_code = result.returncode\n        except Exception as e:\n            print(f\"Error executing {bat_file}: {str(e)}\", file=sys.stderr)\n            exit_code = None\n\n        results.append((os.path.basename(bat_file), exit_code))\n\n    return results",
  "model": "mistral-3.2-24b"
}