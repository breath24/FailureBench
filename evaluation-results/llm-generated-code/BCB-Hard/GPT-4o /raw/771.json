{
  "task_id": "BigCodeBench/771",
  "instruct_prompt": "Processes CSV files in a directory based on a specified pattern and creates new files with altered names while preserving the content, you've laid out a solid foundation with your initial tests.\nThe function should output with:\n    new_files (list): A list of strings, where each string is the filename of a new CSV file created by the function.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n```",
  "llm_response": "import re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    \"\"\"\n    Processes CSV files in a directory based on a specified pattern and creates new files with altered names\n    while preserving the content.\n\n    Args:\n    - directory (str): The path to the directory containing the CSV files.\n    - pattern (str): The regex pattern to match the filenames.\n\n    Returns:\n    - new_files (list): A list of strings, where each string is the filename of a new CSV file created by the function.\n    \"\"\"\n    new_files = []\n    # Ensure the directory exists\n    if not os.path.isdir(directory):\n        print(f\"Directory {directory} does not exist.\")\n        return new_files\n\n    # Compile the regex pattern\n    regex = re.compile(pattern)\n\n    # Iterate over all files in the directory\n    for filename in os.listdir(directory):\n        # Check if the file matches the pattern\n        match = regex.match(filename)\n        if match:\n            # Extract the base name from the match\n            base_name = match.group(1)\n            # Construct the new filename\n            new_filename = f\"{base_name}_processed.csv\"\n            # Full paths for reading and writing\n            old_file_path = os.path.join(directory, filename)\n            new_file_path = os.path.join(directory, new_filename)\n\n            # Read the content of the old file and write it to the new file\n            with open(old_file_path, mode='r', newline='', encoding='utf-8') as old_file:\n                reader = csv.reader(old_file)\n                with open(new_file_path, mode='w', newline='', encoding='utf-8') as new_file:\n                    writer = csv.writer(new_file)\n                    for row in reader:\n                        writer.writerow(row)\n\n            # Add the new filename to the list\n            new_files.append(new_filename)\n\n    return new_files",
  "model": "gpt-4o"
}