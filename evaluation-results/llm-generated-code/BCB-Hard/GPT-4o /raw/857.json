{
  "task_id": "BigCodeBench/857",
  "instruct_prompt": "Transfer files from one directory (SOURCE_DIR) to another (DEST_DIR) based on the specified file extensions (EXTENSIONS). It also issues warnings for files that could not be transferred due to any issues.\nThe function should output with:\n    transferred_files (list): A list containing the names of files that were successfully transferred.\nYou should write self-contained code starting with:\n```\nimport warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n```",
  "llm_response": "import warnings\nimport os\nimport glob\nimport shutil\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfers files from SOURCE_DIR to DEST_DIR based on specified EXTENSIONS.\n    \n    Parameters:\n    - SOURCE_DIR (str): The directory to transfer files from.\n    - DEST_DIR (str): The directory to transfer files to.\n    - EXTENSIONS (list): A list of file extensions to filter files for transfer.\n    \n    Returns:\n    - transferred_files (list): A list containing the names of files that were successfully transferred.\n    \"\"\"\n    # Ensure the destination directory exists\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n\n    transferred_files = []\n\n    # Iterate over each specified extension\n    for ext in EXTENSIONS:\n        # Create a pattern for glob to find files with the current extension\n        pattern = os.path.join(SOURCE_DIR, f'*.{ext}')\n        files = glob.glob(pattern)\n\n        # Attempt to transfer each file\n        for file_path in files:\n            try:\n                # Extract the file name from the file path\n                file_name = os.path.basename(file_path)\n                # Define the destination path\n                dest_path = os.path.join(DEST_DIR, file_name)\n                # Move the file to the destination directory\n                shutil.move(file_path, dest_path)\n                # Add the file name to the list of transferred files\n                transferred_files.append(file_name)\n            except Exception as e:\n                # Issue a warning if the file could not be transferred\n                warnings.warn(f\"Could not transfer {file_path}: {e}\")\n\n    return transferred_files",
  "model": "gpt-4o"
}