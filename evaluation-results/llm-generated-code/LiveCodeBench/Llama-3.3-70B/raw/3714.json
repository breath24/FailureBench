{
  "task_id": "3714",
  "task_description": "You are given an integer array nums and a positive integer k. Return the sum of the maximum and minimum elements of all subsequences of nums with at most k elements.\nSince the answer may be very large, return it modulo 10^9 + 7.\n \nExample 1:\n\nInput: nums = [1,2,3], k = 2\nOutput: 24\nExplanation:\nThe subsequences of nums with at most 2 elements are:\n\n\n\nSubsequence \nMinimum\nMaximum\nSum\n\n\n[1]\n1\n1\n2\n\n\n[2]\n2\n2\n4\n\n\n[3]\n3\n3\n6\n\n\n[1, 2]\n1\n2\n3\n\n\n[1, 3]\n1\n3\n4\n\n\n[2, 3]\n2\n3\n5\n\n\nFinal Total\n \n \n24\n\n\n\nThe output would be 24.\n\nExample 2:\n\nInput: nums = [5,0,6], k = 1\nOutput: 22\nExplanation: \nFor subsequences with exactly 1 element, the minimum and maximum values are the element itself. Therefore, the total is 5 + 5 + 0 + 0 + 6 + 6 = 22.\n\nExample 3:\n\nInput: nums = [1,1,1], k = 2\nOutput: 12\nExplanation:\nThe subsequences [1, 1] and [1] each appear 3 times. For all of them, the minimum and maximum are both 1. Thus, the total is 12.\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 10^9\n1 <= k <= min(70, nums.length)",
  "llm_response": "from itertools import chain, combinations\n\ndef minMaxSums(nums, k):\n    mod = 10**9 + 7\n    total = 0\n    for r in range(1, k + 1):\n        for sub in combinations(nums, r):\n            total += min(sub) + max(sub)\n    return total % mod",
  "model": "llama-3.3-70b"
}