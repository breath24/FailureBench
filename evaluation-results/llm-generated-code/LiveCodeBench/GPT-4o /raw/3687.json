{
  "task_id": "3687",
  "task_description": "You are given an undirected tree rooted at node 0 with n nodes numbered from 0 to n - 1, represented by a 2D array edges of length n - 1, where edges[i] = [u_i, v_i, length_i] indicates an edge between nodes u_i and v_i with length length_i. You are also given an integer array nums, where nums[i] represents the value at node i.\nA special path is defined as a downward path from an ancestor node to a descendant node such that all the values of the nodes in that path are unique.\nNote that a path may start and end at the same node.\nReturn an array result of size 2, where result[0] is the length of the longest special path, and result[1] is the minimum number of nodes in all possible longest special paths.\n \nExample 1:\n\nInput: edges = [[0,1,2],[1,2,3],[1,3,5],[1,4,4],[2,5,6]], nums = [2,1,2,1,3,1]\nOutput: [6,2]\nExplanation:\nIn the image below, nodes are colored by their corresponding values in nums\n\nThe longest special paths are 2 -> 5 and 0 -> 1 -> 4, both having a length of 6. The minimum number of nodes across all longest special paths is 2.\n\nExample 2:\n\nInput: edges = [[1,0,8]], nums = [2,2]\nOutput: [0,1]\nExplanation:\n\nThe longest special paths are 0 and 1, both having a length of 0. The minimum number of nodes across all longest special paths is 1.\n\n \nConstraints:\n\n2 <= n <= 5 * 10^4\nedges.length == n - 1\nedges[i].length == 3\n0 <= u_i, v_i < n\n1 <= length_i <= 10^3\nnums.length == n\n0 <= nums[i] <= 5 * 10^4\nThe input is generated such that edges represents a valid tree.",
  "llm_response": "from collections import defaultdict\n\ndef longestSpecialPath(edges, nums):\n    def dfs(node, parent):\n        nonlocal max_length, min_nodes\n        path_length, path_nodes = 0, 1\n        unique_values = {nums[node]}\n        for neighbor, length in graph[node]:\n            if neighbor == parent:\n                continue\n            sub_length, sub_nodes, sub_values = dfs(neighbor, node)\n            if not unique_values.intersection(sub_values):\n                total_length = path_length + sub_length + length\n                total_nodes = path_nodes + sub_nodes\n                if total_length > max_length:\n                    max_length = total_length\n                    min_nodes = total_nodes\n                elif total_length == max_length:\n                    min_nodes = min(min_nodes, total_nodes)\n                if sub_length + length > path_length:\n                    path_length = sub_length + length\n                    path_nodes = sub_nodes + 1\n                unique_values.update(sub_values)\n        return path_length, path_nodes, unique_values\n\n    graph = defaultdict(list)\n    for u, v, length in edges:\n        graph[u].append((v, length))\n        graph[v].append((u, length))\n\n    max_length, min_nodes = 0, float('inf')\n    dfs(0, -1)\n    return [max_length, min_nodes]",
  "model": "gpt-4o"
}