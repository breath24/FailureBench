{
  "task_id": "3773",
  "task_description": "Given an array nums, you can perform the following operation any number of times:\n\nSelect the adjacent pair with the minimum sum in nums. If multiple such pairs exist, choose the leftmost one.\nReplace the pair with their sum.\n\nReturn the minimum number of operations needed to make the array non-decreasing.\nAn array is said to be non-decreasing if each element is greater than or equal to its previous element (if it exists).\n \nExample 1:\n\nInput: nums = [5,2,3,1]\nOutput: 2\nExplanation:\n\nThe pair (3,1) has the minimum sum of 4. After replacement, nums = [5,2,4].\nThe pair (2,4) has the minimum sum of 6. After replacement, nums = [5,6].\n\nThe array nums became non-decreasing in two operations.\n\nExample 2:\n\nInput: nums = [1,2,2]\nOutput: 0\nExplanation:\nThe array nums is already sorted.\n\n \nConstraints:\n\n1 <= nums.length <= 50\n-1000 <= nums[i] <= 1000",
  "llm_response": "import heapq\n\ndef minimumPairRemoval(nums):\n    count = 0\n    while True:\n        n = len(nums)\n        if n == 1:\n            break\n        non_decreasing = True\n        for i in range(n - 1):\n            if nums[i] > nums[i + 1]:\n                non_decreasing = False\n                break\n        if non_decreasing:\n            break\n        min_sum = float('inf')\n        min_index = 0\n        for i in range(n - 1):\n            current_sum = nums[i] + nums[i + 1]\n            if current_sum < min_sum:\n                min_sum = current_sum\n                min_index = i\n        nums = nums[:min_index] + [min_sum] + nums[min_index + 2:]\n        count += 1\n    return count",
  "model": "deepseek-chat-v3-0324"
}