{
  "task_id": "3781",
  "task_description": "You are given an integer side, representing the edge length of a square with corners at (0, 0), (0, side), (side, 0), and (side, side) on a Cartesian plane.\nYou are also given a positive integer k and a 2D integer array points, where points[i] = [x_i, y_i] represents the coordinate of a point lying on the boundary of the square.\nYou need to select k elements among points such that the minimum Manhattan distance between any two points is maximized.\nReturn the maximum possible minimum Manhattan distance between the selected k points.\nThe Manhattan Distance between two cells (x_i, y_i) and (x_j, y_j) is |x_i - x_j| + |y_i - y_j|.\n \nExample 1:\n\nInput: side = 2, points = [[0,2],[2,0],[2,2],[0,0]], k = 4\nOutput: 2\nExplanation:\n\nSelect all four points.\n\nExample 2:\n\nInput: side = 2, points = [[0,0],[1,2],[2,0],[2,2],[2,1]], k = 4\nOutput: 1\nExplanation:\n\nSelect the points (0, 0), (2, 0), (2, 2), and (2, 1).\n\nExample 3:\n\nInput: side = 2, points = [[0,0],[0,1],[0,2],[1,2],[2,0],[2,2],[2,1]], k = 5\nOutput: 1\nExplanation:\n\nSelect the points (0, 0), (0, 1), (0, 2), (1, 2), and (2, 2).\n\n \nConstraints:\n\n1 <= side <= 10^9\n4 <= points.length <= min(4 * side, 15 * 10^3)\npoints[i] == [xi, yi]\nThe input is generated such that:\n\t\npoints[i] lies on the boundary of the square.\nAll points[i] are unique.\n\n\n4 <= k <= min(25, points.length)",
  "llm_response": "from itertools import combinations\nimport math\n\ndef maxDistance(side, points, k):\n    def manhattan(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n    \n    def min_distance_in_selection(selected_points):\n        min_dist = float('inf')\n        for i in range(len(selected_points)):\n            for j in range(i + 1, len(selected_points)):\n                dist = manhattan(selected_points[i], selected_points[j])\n                if dist < min_dist:\n                    min_dist = dist\n        return min_dist if min_dist != float('inf') else 0\n\n    max_min_dist = 0\n    for combo in combinations(points, k):\n        min_dist = min_distance_in_selection(combo)\n        if min_dist > max_min_dist:\n            max_min_dist = min_dist\n    return max_min_dist",
  "model": "qwen3-coder"
}