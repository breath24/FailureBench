{
  "task_id": "arc195_b",
  "task_description": "There are two sequences A=(A_1,\\dots,A_N) and B=(B_1,\\dots,B_N). You can perform the following three types of operations any number of times in any order:\n\n- Choose an index i such that A_i = -1, and replace A_i with any non-negative integer.\n- Choose an index i such that B_i = -1, and replace B_i with any non-negative integer.\n- Rearrange the elements of sequence A in any order.\n\nDetermine whether it is possible, after these operations, for all elements of A and B to be non-negative and satisfy A_1 + B_1 = A_2 + B_2 = \\dots = A_N + B_N.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\nB_1 B_2 \\ldots B_N\n\nOutput\n\nIf it is possible, after the operations, for all elements of A and B to be non-negative and satisfy A_1 + B_1 = A_2 + B_2 = \\dots = A_N + B_N, print Yes. Otherwise, print No.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2000\n- -1 \\leq A_i \\leq 10^9\n- -1 \\leq B_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n4\n2 0 -1 3\n3 -1 4 2\n\nSample Output 1\n\nYes\n\nConsider the following operations:\n\n- Replace A_3 with 1.\n- Replace B_2 with 1.\n- Rearrange A to (1,3,0,2).\n\nAfter these operations, A = (1,3,0,2) and B = (3,1,4,2): all elements of A and B are non-negative, and A_1+B_1 = A_2+B_2 = A_3+B_3 = A_4+B_4 = 4 is satisfied.\n\nSample Input 2\n\n3\n1 2 3\n1 2 4\n\nSample Output 2\n\nNo\n\nNo matter how you perform the operations, it is impossible to satisfy A_1+B_1 = A_2+B_2 = A_3+B_3.\n\nSample Input 3\n\n3\n1 2 -1\n1 2 4\n\nSample Output 3\n\nNo",
  "llm_response": "def candidate_func(input_str):\n    lines = input_str.strip().split('\\n')\n    n = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    \n    A_fixed = [x for x in A if x != -1]\n    B_fixed = [x for x in B if x != -1]\n    A_free = A.count(-1)\n    B_free = B.count(-1)\n    \n    pairs = []\n    for i in range(n):\n        if A[i] != -1 and B[i] != -1:\n            pairs.append((A[i], B[i]))\n    \n    if len(pairs) == 0:\n        return \"Yes\"\n    \n    target_sums = set()\n    for a, b in pairs:\n        target_sums.add(a + b)\n    \n    if len(target_sums) > 1:\n        return \"No\"\n    \n    target_sum = list(target_sums)[0]\n    \n    A_only = []\n    B_only = []\n    \n    for i in range(n):\n        if A[i] != -1 and B[i] == -1:\n            A_only.append(A[i])\n        elif A[i] == -1 and B[i] != -1:\n            B_only.append(B[i])\n    \n    for a in A_only:\n        if target_sum - a < 0:\n            return \"No\"\n    \n    for b in B_only:\n        if target_sum - b < 0:\n            return \"No\"\n    \n    A_remaining = [x for x in A_fixed if x not in [A[i] for i in range(n) if A[i] != -1 and B[i] != -1] and x not in A_only]\n    B_remaining = [x for x in B_fixed if x not in [B[i] for i in range(n) if A[i] != -1 and B[i] != -1] and x not in B_only]\n    \n    A_remaining = []\n    B_remaining = []\n    \n    for i in range(n):\n        if A[i] != -1 and B[i] == -1:\n            A_only.append(A[i])\n        elif A[i] == -1 and B[i] != -1:\n            B_only.append(B[i])\n        elif A[i] != -1 and B[i] != -1:\n            continue\n        elif A[i] == -1 and B[i] == -1:\n            continue\n    \n    for i in range(n):\n        if A[i] != -1:\n            found = False\n            for j in range(n):\n                if B[j] != -1 and A[i] + B[j] == target_sum:\n                    found = True\n                    break\n            if not found and A[i] not in A_only:\n                A_remaining.append(A[i])\n        \n        if B[i] != -1:\n            found = False\n            for j in range(n):\n                if A[j] != -1 and A[j] + B[i] == target_sum:\n                    found = True\n                    break\n            if not found and B[i] not in B_only:\n                B_remaining.append(B[i])\n    \n    A_remaining = []\n    B_remaining = []\n    used_A = set()\n    used_B = set()\n    \n    for i in range(n):\n        if A[i] != -1 and B[i] != -1:\n            used_A.add(i)\n            used_B.add(i)\n    \n    for i in range(n):\n        if A[i] != -1 and B[i] == -1:\n            A_only.append(A[i])\n            used_A.add(i)\n        elif A[i] == -1 and B[i] != -1:\n            B_only.append(B[i])\n            used_B.add(i)\n    \n    for i in range(n):\n        if A[i] != -1 and i not in used_A:\n            A_remaining.append(A[i])\n        if B[i] != -1 and i not in used_B:\n            B_remaining.append(B[i])\n    \n    A_remaining.sort()\n    B_remaining.sort(reverse=True)\n    \n    for i in range(min(len(A_remaining), len(B_remaining))):\n        if A_remaining[i] + B_remaining[i] != target_sum:\n            return \"No\"\n    \n    return \"Yes\"",
  "model": "claude-sonnet-4"
}