{
  "task_id": "3754",
  "task_description": "You are given a string s consisting of the characters 'N', 'S', 'E', and 'W', where s[i] indicates movements in an infinite grid:\n\n'N' : Move north by 1 unit.\n'S' : Move south by 1 unit.\n'E' : Move east by 1 unit.\n'W' : Move west by 1 unit.\n\nInitially, you are at the origin (0, 0). You can change at most k characters to any of the four directions.\nFind the maximum Manhattan distance from the origin that can be achieved at any time while performing the movements in order.\nThe Manhattan Distance between two cells (x_i, y_i) and (x_j, y_j) is |x_i - x_j| + |y_i - y_j|.\n \nExample 1:\n\nInput: s = \"NWSE\", k = 1\nOutput: 3\nExplanation:\nChange s[2] from 'S' to 'N'. The string s becomes \"NWNE\".\n\n\n\nMovement\nPosition (x, y)\nManhattan Distance\nMaximum\n\n\n\n\ns[0] == 'N'\n(0, 1)\n0 + 1 = 1\n1\n\n\ns[1] == 'W'\n(-1, 1)\n1 + 1 = 2\n2\n\n\ns[2] == 'N'\n(-1, 2)\n1 + 2 = 3\n3\n\n\ns[3] == 'E'\n(0, 2)\n0 + 2 = 2\n3\n\n\n\nThe maximum Manhattan distance from the origin that can be achieved is 3. Hence, 3 is the output.\n\nExample 2:\n\nInput: s = \"NSWWEW\", k = 3\nOutput: 6\nExplanation:\nChange s[1] from 'S' to 'N', and s[4] from 'E' to 'W'. The string s becomes \"NNWWWW\".\nThe maximum Manhattan distance from the origin that can be achieved is 6. Hence, 6 is the output.\n\n \nConstraints:\n\n1 <= s.length <= 10^5\n0 <= k <= s.length\ns consists of only 'N', 'S', 'E', and 'W'.",
  "llm_response": "def maxDistance(s, k):\n    n = len(s)\n    moves = []\n    for c in s:\n        if c == 'N':\n            moves.append((0, 1))\n        elif c == 'S':\n            moves.append((0, -1))\n        elif c == 'E':\n            moves.append((1, 0))\n        else:\n            moves.append((-1, 0))\n    \n    max_dist = 0\n    \n    for target_x in range(-n-k, n+k+1):\n        for target_y in range(-n-k, n+k+1):\n            x, y = 0, 0\n            changes = 0\n            curr_max = 0\n            \n            for i in range(n):\n                dx, dy = moves[i]\n                new_x, new_y = x + dx, y + dy\n                \n                if changes < k:\n                    best_dx, best_dy = dx, dy\n                    best_dist = abs(new_x) + abs(new_y)\n                    \n                    for alt_dx, alt_dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        alt_x, alt_y = x + alt_dx, y + alt_dy\n                        alt_dist = abs(alt_x) + abs(alt_y)\n                        \n                        remaining_moves = n - i - 1\n                        remaining_changes = k - changes - (1 if (alt_dx, alt_dy) != (dx, dy) else 0)\n                        \n                        if remaining_changes >= 0:\n                            target_dx = target_x - alt_x\n                            target_dy = target_y - alt_y\n                            min_moves_needed = abs(target_dx) + abs(target_dy)\n                            \n                            if min_moves_needed <= remaining_moves + remaining_changes:\n                                potential_dist = alt_dist + min(remaining_moves, min_moves_needed)\n                                if potential_dist > best_dist:\n                                    best_dist = potential_dist\n                                    best_dx, best_dy = alt_dx, alt_dy\n                    \n                    if (best_dx, best_dy) != (dx, dy):\n                        changes += 1\n                    x += best_dx\n                    y += best_dy\n                else:\n                    x, y = new_x, new_y\n                \n                curr_max = max(curr_max, abs(x) + abs(y))\n            \n            max_dist = max(max_dist, curr_max)\n    \n    return max_dist",
  "model": "claude-sonnet-4"
}