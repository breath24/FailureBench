{
  "task_id": "Mbpp/239",
  "task_description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
  "llm_response": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    \n    # dp[i][j] represents number of sequences of length i ending with j\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: sequences of length 1\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    # Fill dp table for sequences of length 2 to n\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            # For each possible previous element k where 2*k <= j\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i-1][k]\n    \n    # Sum all sequences of length n\n    result = 0\n    for j in range(1, m + 1):\n        result += dp[n][j]\n    \n    return result",
  "model": "qwen3-coder"
}