{
  "task_id": "BigCodeBench/211",
  "instruct_prompt": "Download and keep a zip file from a URL, extract its contents to the specified directory, and return the list of extracted files.\nThe function should output with:\n    list: A list of filenames of the extracted files.\nYou should write self-contained code starting with:\n```\nimport requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n```",
  "llm_response": "import requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Downloads a zip file from a URL, extracts its contents to the specified directory,\n    and returns a list of the extracted filenames.\n\n    Args:\n        url (str): URL of the zip file to download\n        destination_directory (str): Directory to extract the zip contents to\n        headers (dict, optional): Optional headers to include in the request\n\n    Returns:\n        list: A list of filenames of the extracted files\n    \"\"\"\n    # Create the destination directory if it doesn't exist\n    os.makedirs(destination_directory, exist_ok=True)\n\n    # Download the zip file\n    response = requests.get(url, headers=headers, stream=True)\n    response.raise_for_status()  # Raise an exception for HTTP errors\n\n    # Create a temporary file to store the downloaded zip\n    temp_zip_path = os.path.join(destination_directory, \"temp_download.zip\")\n\n    with open(temp_zip_path, 'wb') as f:\n        for chunk in response.iter_content(chunk_size=8192):\n            f.write(chunk)\n\n    # Extract the zip file\n    extracted_files = []\n    with zipfile.ZipFile(temp_zip_path, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n        extracted_files = zip_ref.namelist()\n\n    # Remove the temporary zip file\n    os.remove(temp_zip_path)\n\n    return extracted_files",
  "model": "mistral-3.2-24b"
}