{
  "task_id": "BigCodeBench/914",
  "instruct_prompt": "Predicts the stock closing prices for the next 7 days using simple linear regression and plots the data. Constants: - The function uses a constant time step of 24*60*60 seconds to generate future timestamps.\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list with predicted prices for the next 7 days.\n    Axes: The matplotlib Axes object containing the plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n```",
  "llm_response": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    \"\"\"\n    Predicts stock closing prices for the next 7 days using simple linear regression.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing stock data with 'Date' and 'Close' columns.\n\n    Returns:\n        tuple: A tuple containing:\n            - list: Predicted prices for the next 7 days\n            - Axes: matplotlib Axes object with the plot\n    \"\"\"\n    # Ensure the DataFrame has the required columns\n    if 'Date' not in df.columns or 'Close' not in df.columns:\n        raise ValueError(\"DataFrame must contain 'Date' and 'Close' columns\")\n\n    # Convert Date to datetime and set as index\n    df['Date'] = pd.to_datetime(df['Date'])\n    df.set_index('Date', inplace=True)\n\n    # Prepare data for regression\n    X = np.arange(len(df)).reshape(-1, 1)  # Using index as time feature\n    y = df['Close'].values\n\n    # Create and fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Generate future timestamps (next 7 days)\n    last_date = df.index[-1]\n    future_dates = pd.date_range(start=last_date, periods=8, freq='D')[1:]  # Next 7 days\n    future_X = np.arange(len(df), len(df)+7).reshape(-1, 1)\n\n    # Predict future prices\n    predicted_prices = model.predict(future_X)\n\n    # Create plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n\n    # Plot historical data\n    ax.plot(df.index, y, 'b-', label='Historical Prices')\n\n    # Plot predicted data\n    ax.plot(future_dates, predicted_prices, 'r--', label='Predicted Prices')\n\n    # Formatting\n    ax.set_title('Stock Price Prediction with Linear Regression')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Price')\n    ax.legend()\n    ax.grid(True)\n\n    return (predicted_prices.tolist(), ax)",
  "model": "mistral-3.2-24b"
}