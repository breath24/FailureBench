{
  "task_id": "BigCodeBench/654",
  "instruct_prompt": "Fit an exponential decay function to the indices in the array where the first column matches the target value.\nThe function should output with:\n    tuple: Containing the optimized parameters of the fitting function (popt) and the matplotlib Axes object.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n```",
  "llm_response": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n    \"\"\"\n    Fit an exponential decay function to the indices in the array where the first column matches the target value.\n    \n    Parameters:\n    array: 2D numpy array where first column contains values to match against target_value\n    target_value: value to match in the first column of the array\n    \n    Returns:\n    tuple: Containing the optimized parameters of the fitting function (popt) and the matplotlib Axes object\n    \"\"\"\n    \n    # Find indices where first column matches target value\n    matching_indices = np.where(array[:, 0] == target_value)[0]\n    \n    if len(matching_indices) == 0:\n        raise ValueError(\"No matching values found for target_value\")\n    \n    # Create x and y data for fitting\n    x_data = np.arange(len(matching_indices))\n    y_data = matching_indices\n    \n    # Define exponential decay function: y = a * exp(-b * x) + c\n    def exp_decay(x, a, b, c):\n        return a * np.exp(-b * x) + c\n    \n    # Initial parameter guesses\n    a_guess = y_data[0] - y_data[-1]\n    b_guess = 0.1\n    c_guess = y_data[-1]\n    p0 = [a_guess, b_guess, c_guess]\n    \n    # Fit the exponential decay function\n    popt, pcov = optimize.curve_fit(exp_decay, x_data, y_data, p0=p0)\n    \n    # Create plot\n    fig, ax = plt.subplots(figsize=(8, 6))",
  "model": "qwen3-coder"
}