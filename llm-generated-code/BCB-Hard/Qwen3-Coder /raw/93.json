{
  "task_id": "BigCodeBench/93",
  "instruct_prompt": "Perform Principal Component Analysis (PCA) on a dataset and record the result. Also, generates a scatter plot of the transformed data.\nThe function should raise the exception for: ValueError: If n_components is not a positive integer.\nThe function should output with:\n    DataFrame: The transformed data with principal components.\n    Axes: The matplotlib Axes object containing the scatter plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n```",
  "llm_response": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on a dataset and record the result.\n    Also generates a scatter plot of the transformed data.\n    \n    Parameters:\n    data (array-like): The input dataset\n    n_components (int): Number of principal components to keep\n    \n    Returns:\n    tuple: (DataFrame, Axes) - The transformed data and scatter plot axes\n    \n    Raises:\n    ValueError: If n_components is not a positive integer\n    \"\"\"\n    # Validate n_components\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n    \n    # Convert data to DataFrame if it isn't already\n    if not isinstance(data, pd.DataFrame):\n        data = pd.DataFrame(data)\n    \n    # Perform PCA\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    \n    # Create DataFrame with principal components\n    pc_columns = [f'PC{i+1}' for i in range(n_components)]\n    transformed_df = pd.DataFrame(transformed_data, columns=pc_columns)\n    \n    # Create scatter plot\n    fig, ax = plt.subplots(figsize=(8, 6))\n    \n    if n_components >= 2:\n        # Scatter plot with first two principal components\n        ax.scatter(transformed_df['PC1'], transformed_df['PC2'], alpha=0.7)\n        ax.set_xlabel('PC1')\n        ax.set_ylabel('PC2')\n        ax.set_title('PCA Scatter Plot')\n    elif n_components == 1:\n        # Scatter plot with PC1 vs zeros (since we only have one component)\n        ax.scatter(transformed_df['PC1'], np.zeros(len(transformed_df)), alpha=0.7)\n        ax.set_xlabel('PC1')\n        ax.set_ylabel('Zero')\n        ax.set_title('PCA Scatter Plot (1D)')\n    \n    plt.tight_layout()\n    \n    return transformed_df, ax",
  "model": "qwen3-coder"
}