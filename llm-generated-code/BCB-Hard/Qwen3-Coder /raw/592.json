{
  "task_id": "BigCodeBench/592",
  "instruct_prompt": "Create sensor data for the specified number of hours and save it in a CSV file with coloumns 'Time', 'Temperature', 'Humidity' and 'Pressure'.\nThe function should output with:\n    hours (int): Number of hours to generate data for.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
  "llm_response": "import csv\nimport os\nfrom datetime import datetime, timedelta\nfrom random import randint, uniform\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data for the specified number of hours and save it in a CSV file.\n    \n    Args:\n        hours (int): Number of hours to generate data for.\n        output_dir (str): Directory to save the CSV file.\n        \n    Returns:\n        str: Path to the generated CSV file.\n    \"\"\"\n    # Create output directory if it doesn't exist\n    os.makedirs(output_dir, exist_ok=True)\n    \n    # Generate filename with timestamp\n    filename = f\"sensor_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n    filepath = os.path.join(output_dir, filename)\n    \n    # Generate data for specified number of hours\n    # Assuming one reading per minute, so 60 readings per hour\n    num_readings = hours * 60\n    \n    # Start from current time\n    start_time = datetime.now()\n    \n    # Generate sensor data\n    data = []\n    for i in range(num_readings):\n        # Calculate current time\n        current_time = start_time + timedelta(minutes=i)\n        \n        # Generate realistic sensor values\n        # Temperature: 15-35\u00b0C\n        temperature = round(uniform(15, 35), 2)\n        \n        # Humidity: 30-80%\n        humidity = round(uniform(30, 80), 2)\n        \n        # Pressure: 980-1030 hPa\n        pressure = round(uniform(980, 1030), 2)\n        \n        data.append({\n            'Time': current_time.strftime('%Y-%m-%d %H:%M:%S'),\n            'Temperature': temperature,\n            'Humidity': humidity,\n            'Pressure': pressure\n        })\n    \n    # Write data to CSV file\n    with open(filepath, 'w', newline='') as csvfile:\n        fieldnames = ['Time', 'Temperature', 'Humidity', 'Pressure']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        \n        writer.writeheader()\n        for row in data:\n            writer.writerow(row)\n    \n    return filepath",
  "model": "qwen3-coder"
}