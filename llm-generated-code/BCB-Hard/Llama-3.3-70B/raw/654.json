{
  "task_id": "BigCodeBench/654",
  "instruct_prompt": "Fit an exponential decay function to the indices in the array where the first column matches the target value.\nThe function should output with:\n    tuple: Containing the optimized parameters of the fitting function (popt) and the matplotlib Axes object.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n```",
  "llm_response": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n    \"\"\"\n    Fits an exponential decay function to the indices in the array where the first column matches the target value.\n\n    Args:\n        array (numpy.ndarray): Input array with shape (n, 2) where the first column is the value to match and the second column is the corresponding data.\n        target_value: The value to match in the first column of the array.\n\n    Returns:\n        tuple: Containing the optimized parameters of the fitting function (popt) and the matplotlib Axes object.\n    \"\"\"\n\n    # Filter the array to get the indices where the first column matches the target value\n    filtered_array = array[array[:, 0] == target_value]\n\n    # Check if there are any matches\n    if len(filtered_array) == 0:\n        raise ValueError(\"No matches found for the target value\")\n\n    # Define the exponential decay function\n    def exponential_decay(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Define the initial guess for the parameters\n    initial_guess = [1, 1, 1]\n\n    # Perform the curve fit\n    x_data = np.arange(len(filtered_array))\n    y_data = filtered_array[:, 1]\n    popt, _ = optimize.curve_fit(exponential_decay, x_data, y_data, p0=initial_guess)\n\n    # Create a plot of the data and the fitted curve\n    fig, ax = plt.subplots()\n    ax.plot(x_data, y_data, 'ko', label=\"Original data\")\n    ax.plot(x_data, exponential_decay(x_data, *popt), 'r-', label=\"Fitted curve\")\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.legend()\n\n    return popt, ax\narray = np.array([[1, 10], [1, 8], [1, 6], [1, 4], [2, 20], [2, 18], [2, 16], [2, 14]])\ntarget_value = 1",
  "model": "llama-3.3-70b"
}