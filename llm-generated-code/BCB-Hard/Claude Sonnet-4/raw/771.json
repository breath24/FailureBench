{
  "task_id": "BigCodeBench/771",
  "instruct_prompt": "Processes CSV files in a directory based on a specified pattern and creates new files with altered names while preserving the content, you've laid out a solid foundation with your initial tests.\nThe function should output with:\n    new_files (list): A list of strings, where each string is the filename of a new CSV file created by the function.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n```",
  "llm_response": "import re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    \"\"\"\n    Processes CSV files in a directory based on a specified pattern and creates new files \n    with altered names while preserving the content.\n    \n    Args:\n        directory (str): Path to the directory containing CSV files\n        pattern (str): Regex pattern to match files. Default matches files like 'name-123.csv'\n    \n    Returns:\n        list: A list of strings, where each string is the filename of a new CSV file created\n    \"\"\"\n    new_files = []\n    directory_path = Path(directory)\n    \n    # Check if directory exists\n    if not directory_path.exists() or not directory_path.is_dir():\n        return new_files\n    \n    # Get all CSV files in the directory\n    csv_files = [f for f in directory_path.iterdir() if f.is_file() and f.suffix.lower() == '.csv']\n    \n    for csv_file in csv_files:\n        filename = csv_file.name\n        \n        # Check if filename matches the pattern\n        match = re.match(pattern, filename)\n        if match:\n            # Extract the base name (everything before the dash and number)\n            base_name = match.group(1)\n            new_filename = f\"{base_name}_processed.csv\"\n            new_file_path = directory_path / new_filename\n            \n            # Read the original file and write to new file\n            try:\n                with open(csv_file, 'r', newline='', encoding='utf-8') as source_file:\n                    with open(new_file_path, 'w', newline='', encoding='utf-8') as target_file:\n                        # Copy content while preserving CSV structure\n                        csv_reader = csv.reader(source_file)\n                        csv_writer = csv.writer(target_file)\n                        \n                        for row in csv_reader:\n                            csv_writer.writerow(row)\n                \n                new_files.append(new_filename)\n                \n            except (IOError, OSError, UnicodeDecodeError) as e:\n                # Skip files that can't be read/written\n                continue\n    \n    return sorted(new_files)",
  "model": "claude-sonnet-4"
}