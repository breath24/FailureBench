{
  "task_id": "BigCodeBench/574",
  "instruct_prompt": "Create a noisy sine wave of a specified length and adjusts a curve using curve_fit from scipy.optimize to the data.\nThe function should output with:\n    Axes object: A plot showing the noisy sine wave and its adjusted curve.\nYou should write self-contained code starting with:\n```\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n```",
  "llm_response": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    \"\"\"\n    Create a noisy sine wave and fit a curve to it using scipy's curve_fit.\n    \n    Parameters:\n    array_length (int): Length of the data array\n    noise_level (float): Standard deviation of the noise to add\n    \n    Returns:\n    matplotlib.axes.Axes: Plot showing noisy sine wave and fitted curve\n    \"\"\"\n    \n    # Generate x values\n    x = np.linspace(0, 4*np.pi, array_length)\n    \n    # Generate clean sine wave\n    true_amplitude = 1.0\n    true_frequency = 1.0\n    true_phase = 0.0\n    true_offset = 0.0\n    \n    clean_sine = true_amplitude * np.sin(true_frequency * x + true_phase) + true_offset\n    \n    # Add noise to create noisy sine wave\n    noise = np.random.normal(0, noise_level, array_length)\n    noisy_sine = clean_sine + noise\n    \n    # Define the sine function to fit\n    def sine_function(x, amplitude, frequency, phase, offset):\n        return amplitude * np.sin(frequency * x + phase) + offset\n    \n    # Initial guess for parameters [amplitude, frequency, phase, offset]\n    initial_guess = [1.0, 1.0, 0.0, 0.0]\n    \n    # Fit the curve\n    try:\n        popt, pcov = curve_fit(sine_function, x, noisy_sine, p0=initial_guess)\n        fitted_amplitude, fitted_frequency, fitted_phase, fitted_offset = popt\n        \n        # Generate fitted curve\n        fitted_curve = sine_function(x, *popt)\n        \n        # Create the plot\n        fig, ax = plt.subplots(figsize=(10, 6))\n        \n        # Plot noisy data\n        ax.scatter(x, noisy_sine, alpha=0.6, s=20, color='blue', label='Noisy Data')\n        \n        # Plot fitted curve\n        ax.plot(x, fitted_curve, 'r-', linewidth=2, label='Fitted Curve')\n        \n        # Plot original clean sine for comparison\n        ax.plot(x, clean_sine, 'g--', linewidth=1, alpha=0.7, label='True Sine Wave')\n        \n        # Formatting\n        ax.set_xlabel('x')\n        ax.set_ylabel('y')\n        ax.set_title(f'Noisy Sine Wave Curve Fitting\\n'\n                    f'Fitted: A={fitted_amplitude:.3f}, f={fitted_frequency:.3f}, '\n                    f'\u03c6={fitted_phase:.3f}, offset={fitted_offset:.3f}')\n        ax.legend()\n        ax.grid(True, alpha=0.3)\n        \n        plt.tight_layout()\n        \n        return ax\n        \n    except Exception as e:\n        print(f\"Curve fitting failed: {e}\")\n        # Still create a plot showing the noisy data\n        fig, ax = plt.subplots(figsize=(10, 6))\n        ax.scatter(x, noisy_sine, alpha=0.6, s=20, color='blue', label='Noisy Data')\n        ax.plot(x, clean_sine, 'g--', linewidth=1, alpha=0.7, label='True Sine Wave')\n        ax.set_xlabel('x')\n        ax.set_ylabel('y')\n        ax.set_title('Noisy Sine Wave (Curve Fitting Failed)')\n        ax.legend()\n        ax.grid(True, alpha=0.3)\n        plt.tight_layout()\n        return ax",
  "model": "claude-sonnet-4"
}