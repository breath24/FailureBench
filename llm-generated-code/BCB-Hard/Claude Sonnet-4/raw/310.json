{
  "task_id": "BigCodeBench/310",
  "instruct_prompt": "Generates a CSV file containing simulated data for 100 people, including name, age, height, and weight. It also calculates and appends the average age, height, and weight at the end of the file.\nThe function should output with:\n    str: The path of the created CSV file.\nYou should write self-contained code starting with:\n```\nimport os\nimport csv\nimport random\nfrom statistics import mean\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n```",
  "llm_response": "import os\nimport csv\nimport random\nfrom statistics import mean\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n    \"\"\"\n    Generates a CSV file containing simulated data for 100 people, including name, age, height, and weight.\n    It also calculates and appends the average age, height, and weight at the end of the file.\n    \n    Args:\n        filename (str): The name of the CSV file to create\n        \n    Returns:\n        str: The path of the created CSV file\n    \"\"\"\n    # Sample first and last names for generating random names\n    first_names = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Emily', 'Robert', 'Jessica', \n                   'William', 'Ashley', 'James', 'Amanda', 'Christopher', 'Stephanie', 'Daniel',\n                   'Jennifer', 'Matthew', 'Elizabeth', 'Anthony', 'Heather', 'Mark', 'Nicole',\n                   'Donald', 'Amy', 'Steven', 'Angela', 'Paul', 'Brenda', 'Andrew', 'Emma']\n    \n    last_names = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis',\n                  'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson',\n                  'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson',\n                  'White', 'Harris', 'Sanchez', 'Clark', 'Ramirez', 'Lewis', 'Robinson']\n    \n    # Generate data for 100 people\n    people_data = []\n    ages = []\n    heights = []\n    weights = []\n    \n    for i in range(PEOPLE_COUNT):\n        # Generate random name\n        first_name = random.choice(first_names)\n        last_name = random.choice(last_names)\n        name = f\"{first_name} {last_name}\"\n        \n        # Generate random age (18-80 years)\n        age = random.randint(18, 80)\n        \n        # Generate random height (150-200 cm)\n        height = round(random.uniform(150.0, 200.0), 1)\n        \n        # Generate random weight (45-120 kg)\n        weight = round(random.uniform(45.0, 120.0), 1)\n        \n        people_data.append([name, age, height, weight])\n        ages.append(age)\n        heights.append(height)\n        weights.append(weight)\n    \n    # Calculate averages\n    avg_age = round(mean(ages), 1)\n    avg_height = round(mean(heights), 1)\n    avg_weight = round(mean(weights), 1)\n    \n    # Get the full path of the file\n    file_path = os.path.abspath(filename)\n    \n    # Write data to CSV file\n    with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:\n        writer = csv.writer(csvfile)\n        \n        # Write header\n        writer.writerow(COLUMNS)\n        \n        # Write people data\n        for person in people_data:\n            writer.writerow(person)\n        \n        # Write empty row for separation\n        writer.writerow([])\n        \n        # Write averages\n        writer.writerow(['Average', avg_age, avg_height, avg_weight])\n    \n    return file_path",
  "model": "claude-sonnet-4"
}