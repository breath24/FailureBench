{
  "task_id": "BigCodeBench/583",
  "instruct_prompt": "Generates an RSA public and private key pair and saves the private key in a file after encrypting it with a password using AES encryption. Returns the public key and the filename of the encrypted private key, along with encryption details for testing. The name of the output file is a in the format of \"private_key_<number>.txt\", where <number> is a the hex representation of the 8 randomly generated bytes.\nThe function should output with:\n    rsa.PublicKey: The RSA public key.\n    str: The filename where the encrypted private key is stored.\n    bytes: The encryption password, for testing decryption.\n    bytes: The encryption nonce, for testing decryption.\nYou should write self-contained code starting with:\n```\nimport rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n```",
  "llm_response": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n    # Generate RSA key pair\n    public_key, private_key = rsa.newkeys(2048)\n    \n    # Generate random bytes for filename\n    random_bytes = get_random_bytes(8)\n    hex_string = random_bytes.hex()\n    filename = f\"private_key_{hex_string}.txt\"\n    \n    # Generate encryption password and nonce\n    password = get_random_bytes(32)  # 256-bit key for AES\n    nonce = get_random_bytes(16)     # 128-bit nonce for AES\n    \n    # Convert private key to PEM format\n    private_key_pem = private_key.save_pkcs1(format='PEM')\n    \n    # Encrypt the private key using AES\n    cipher = AES.new(password, AES.MODE_EAX, nonce=nonce)\n    ciphertext, tag = cipher.encrypt_and_digest(private_key_pem)\n    \n    # Combine nonce, tag, and ciphertext for storage\n    encrypted_data = nonce + tag + ciphertext\n    \n    # Encode to base64 for safe text storage\n    encrypted_data_b64 = b64encode(encrypted_data)\n    \n    # Save encrypted private key to file\n    with open(filename, 'wb') as f:\n        f.write(encrypted_data_b64)\n    \n    return public_key, filename, password, nonce",
  "model": "claude-sonnet-4"
}