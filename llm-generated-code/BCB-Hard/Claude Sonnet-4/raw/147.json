{
  "task_id": "BigCodeBench/147",
  "instruct_prompt": "Scans a specified IP address range and checks if a specified port is open on each IP. The function returns a dictionary with IP addresses as keys and a boolean indicating the port's status (True if open, False otherwise).\nThe function should output with:\n    dict: A dictionary mapping IP addresses to their port status (True if open).\nYou should write self-contained code starting with:\n```\nimport socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n```",
  "llm_response": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\nimport time\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans a specified IP address range and checks if a specified port is open on each IP.\n    \n    Args:\n        ip_range (str): IP range in CIDR notation (e.g., \"192.168.1.0/24\")\n        port (int): Port number to check\n    \n    Returns:\n        dict: A dictionary mapping IP addresses to their port status (True if open, False otherwise)\n    \"\"\"\n    \n    def check_port(ip, port, results):\n        \"\"\"Helper function to check if a port is open on a specific IP\"\"\"\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(3)  # 3 second timeout\n            result = sock.connect_ex((str(ip), port))\n            sock.close()\n            results[str(ip)] = result == 0\n        except Exception:\n            results[str(ip)] = False\n    \n    # Parse the IP range\n    network = IPv4Network(ip_range, strict=False)\n    results = {}\n    threads = []\n    \n    # Create threads for each IP to scan concurrently\n    for ip in network.hosts():\n        thread = Thread(target=check_port, args=(ip, port, results))\n        threads.append(thread)\n        thread.start()\n    \n    # Wait for all threads to complete\n    for thread in threads:\n        thread.join()\n    \n    return results",
  "model": "claude-sonnet-4"
}