{
  "task_id": "BigCodeBench/147",
  "instruct_prompt": "Scans a specified IP address range and checks if a specified port is open on each IP. The function returns a dictionary with IP addresses as keys and a boolean indicating the port's status (True if open, False otherwise).\nThe function should output with:\n    dict: A dictionary mapping IP addresses to their port status (True if open).\nYou should write self-contained code starting with:\n```\nimport socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n```",
  "llm_response": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef check_port(ip, port, results):\n    \"\"\"Check if a specific port is open on a given IP address.\"\"\"\n    try:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n            sock.settimeout(1)  # Set a timeout for the connection attempt\n            result = sock.connect_ex((ip, port))\n            results[ip] = (result == 0)\n    except Exception as e:\n        results[ip] = False\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans a specified IP address range and checks if a specified port is open on each IP.\n    \n    Args:\n    ip_range (str): The IP address range in CIDR notation (e.g., '192.168.1.0/24').\n    port (int): The port number to check.\n    \n    Returns:\n    dict: A dictionary mapping IP addresses to their port status (True if open).\n    \"\"\"\n    results = {}\n    threads = []\n    \n    # Create a network object from the given IP range\n    network = IPv4Network(ip_range)\n    \n    # Iterate over all IP addresses in the network\n    for ip in network:\n        # Create a new thread for each IP address to check the port\n        thread = Thread(target=check_port, args=(str(ip), port, results))\n        threads.append(thread)\n        thread.start()\n    \n    # Wait for all threads to complete\n    for thread in threads:\n        thread.join()\n    \n    return results",
  "model": "gpt-4o"
}