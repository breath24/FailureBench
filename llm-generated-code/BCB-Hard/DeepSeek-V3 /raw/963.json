{
  "task_id": "BigCodeBench/963",
  "instruct_prompt": "Zip files with certain extensions from a source directory and save it as a zip file saved to a target directory.\nNote that: The valid extensions are: ['.txt', '.docx', '.xlsx', '.csv'].\nThe function should raise the exception for: OSError: If the source_directory does not exist.\nThe function should output with:\n    str: The full path to the created zip file in the format \"/path/to/target_directory/zip_name.zip\".\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n```",
  "llm_response": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    \"\"\"\n    Zips files with specific extensions from a source directory and saves the zip file to a target directory.\n    \n    Valid file extensions: ['.txt', '.docx', '.xlsx', '.csv'].\n    \n    Parameters:\n    - source_directory (str): The directory containing files to be zipped.\n    - target_directory (str): The directory where the zip file will be saved.\n    - zip_name (str): The name of the zip file (without .zip extension).\n    \n    Returns:\n    - str: The full path to the created zip file in the format \"/path/to/target_directory/zip_name.zip\".\n    \n    Raises:\n    - OSError: If the source_directory does not exist.\n    \"\"\"\n    # Check if source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(f\"Source directory does not exist: {source_directory}\")\n    \n    # Create target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n    \n    # Define valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    \n    # Get all files in source directory with valid extensions\n    files_to_zip = []\n    for ext in valid_extensions:\n        files_to_zip.extend(glob.glob(os.path.join(source_directory, f'*{ext}')))\n    \n    # Create full path for zip file\n    zip_path = os.path.join(target_directory, f\"{zip_name}.zip\")\n    \n    # Create zip file and add all matching files\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files_to_zip:\n            zipf.write(file, os.path.basename(file))\n    \n    return zip_path",
  "model": "deepseek-chat-v3-0324"
}