{
  "task_id": "BigCodeBench/93",
  "instruct_prompt": "Perform Principal Component Analysis (PCA) on a dataset and record the result. Also, generates a scatter plot of the transformed data.\nThe function should raise the exception for: ValueError: If n_components is not a positive integer.\nThe function should output with:\n    DataFrame: The transformed data with principal components.\n    Axes: The matplotlib Axes object containing the scatter plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n```",
  "llm_response": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on the input data and generate a scatter plot of the transformed data.\n\n    Parameters:\n    - data (np.ndarray or pd.DataFrame): The input data to perform PCA on. Should be a 2D array or DataFrame.\n    - n_components (int, optional): The number of principal components to keep. Defaults to 2.\n\n    Returns:\n    - tuple: A tuple containing:\n        - pd.DataFrame: The transformed data with principal components as columns.\n        - plt.Axes: The matplotlib Axes object containing the scatter plot.\n\n    Raises:\n    - ValueError: If n_components is not a positive integer or exceeds the number of features in the data.\n    \"\"\"\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer.\")\n    if isinstance(data, pd.DataFrame):\n        data_values = data.values\n    else:\n        data_values = np.array(data)\n    if n_components > data_values.shape[1]:\n        raise ValueError(\"n_components cannot be greater than the number of features in the data.\")\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data_values)\n    columns = [f'PC{i+1}' for i in range(n_components)]\n    transformed_df = pd.DataFrame(transformed_data, columns=columns)\n    fig, ax = plt.subplots()\n    if n_components >= 2:\n        ax.scatter(transformed_data[:, 0], transformed_data[:, 1])\n        ax.set_xlabel('Principal Component 1')\n        ax.set_ylabel('Principal Component 2')\n        ax.set_title('PCA Scatter Plot')\n    else:\n        ax.scatter(transformed_data[:, 0], np.zeros_like(transformed_data[:, 0]))\n        ax.set_xlabel('Principal Component 1')\n        ax.set_title('PCA Scatter Plot (1D)')\n    plt.close(fig)  # Prevents duplicate display if function is called in a notebook\n    return transformed_df, ax",
  "model": "deepseek-chat-v3-0324"
}