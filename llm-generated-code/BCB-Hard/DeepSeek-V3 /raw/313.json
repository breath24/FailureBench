{
  "task_id": "BigCodeBench/313",
  "instruct_prompt": "Organize files in a directory based on the first text that is not enclosed in square brackets. Move the files to subdirectories named after this text. If no matching text is found, the file is not moved.\nThe function should output with:\n    tuple:\n    str: The directory path with organized files.\n    dict: A dictionary where keys are the created subdirectories and values are lists of files moved to them.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n```",
  "llm_response": "import re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    \"\"\"\n    Organizes files in a directory based on the first text that is not enclosed in square brackets.\n    Files are moved to subdirectories named after this text. If no matching text is found, the file is not moved.\n    \n    Parameters:\n    directory (str): The path to the directory containing files to be organized.\n    \n    Returns:\n    tuple: \n        str: The directory path with organized files.\n        dict: A dictionary where keys are the created subdirectories and values are lists of files moved to them.\n    \"\"\"\n    # Initialize the result dictionary\n    moved_files = {}\n    \n    # Compile regex pattern to find text not in square brackets\n    pattern = re.compile(r'(?<!\\[)[^\\[\\]\\s]+(?!\\])')\n    \n    # Process each file in the directory\n    for filename in os.listdir(directory):\n        filepath = os.path.join(directory, filename)\n        \n        # Skip directories\n        if os.path.isdir(filepath):\n            continue\n            \n        # Find the first match of non-bracketed text\n        match = pattern.search(filename)\n        if not match:\n            continue\n            \n        # Get the category name from the match\n        category = match.group()\n        \n        # Create subdirectory if it doesn't exist\n        subdir = os.path.join(directory, category)\n        if not os.path.exists(subdir):\n            os.makedirs(subdir)\n            \n        # Move the file to the subdirectory\n        new_path = os.path.join(subdir, filename)\n        shutil.move(filepath, new_path)\n        \n        # Update the moved_files dictionary\n        if category not in moved_files:\n            moved_files[category] = []\n        moved_files[category].append(filename)\n    \n    return (directory, moved_files)",
  "model": "deepseek-chat-v3-0324"
}