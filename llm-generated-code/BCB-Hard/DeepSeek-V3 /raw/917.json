{
  "task_id": "BigCodeBench/917",
  "instruct_prompt": "Forecasts the share closing prices for the next 7 days using the ARIMA model and plots the forecast.\nThe function should output with:\n    Tuple[List[float], Axes]: A tuple containing:\n    A list with forecasted prices for the next 7 days.\n    A matplotlib Axes object containing the subplot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n```",
  "llm_response": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts the share closing prices for the next 7 days using the ARIMA model and plots the forecast.\n    \n    Parameters:\n    df (pd.DataFrame): DataFrame with a 'Date' column and a 'Close' column containing historical closing prices.\n    \n    Returns:\n    Tuple[List[float], Axes]: A tuple containing:\n        - A list with forecasted prices for the next 7 days.\n        - A matplotlib Axes object containing the subplot.\n    \"\"\"\n    # Ensure the DataFrame has the required columns\n    if not all(col in df.columns for col in ['Date', 'Close']):\n        raise ValueError(\"DataFrame must contain 'Date' and 'Close' columns.\")\n    \n    # Convert Date column to datetime and set as index\n    df['Date'] = pd.to_datetime(df['Date'])\n    df.set_index('Date', inplace=True)\n    \n    # Fit ARIMA model (using auto-selected order for simplicity)\n    model = ARIMA(df['Close'], order=(5,1,0))  # Example order, in practice should be optimized\n    model_fit = model.fit()\n    \n    # Forecast the next 7 days\n    forecast = model_fit.forecast(steps=7)\n    forecast_values = forecast.tolist()\n    \n    # Plot the historical data and forecast\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(df.index, df['Close'], label='Historical Prices')\n    forecast_dates = pd.date_range(start=df.index[-1], periods=8, closed='right')  # Next 7 days after last date\n    ax.plot(forecast_dates, forecast_values, 'r--', label='Forecast')\n    ax.set_title('Share Price Forecast')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.legend()\n    ax.grid(True)\n    \n    return forecast_values, ax",
  "model": "deepseek-chat-v3-0324"
}