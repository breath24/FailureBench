{
  "task_id": "Mbpp/286",
  "task_description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
  "llm_response": "def max_sub_array_sum_repeated(arr, n, k):\n    if k == 1:\n        max_ending_here = max_so_far = arr[0]\n        for i in range(1, n):\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    \n    # Calculate prefix sum, suffix sum, total sum, and max subarray sum for single array\n    prefix_sum = [0] * n\n    suffix_sum = [0] * n\n    prefix_sum[0] = arr[0]\n    suffix_sum[n-1] = arr[n-1]\n    \n    for i in range(1, n):\n        prefix_sum[i] = max(prefix_sum[i-1] + arr[i], arr[i])\n    \n    for i in range(n-2, -1, -1):\n        suffix_sum[i] = max(suffix_sum[i+1] + arr[i], arr[i])\n    \n    max_prefix = max(prefix_sum)\n    max_suffix = max(suffix_sum)\n    \n    total_sum = sum(arr)\n    \n    # Max subarray sum in single array\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    single_max = max_so_far\n    \n    if total_sum > 0:\n        # If total sum is positive, we can benefit from middle arrays\n        result = max(single_max, max_suffix + max_prefix + (k-2) * total_sum)\n    else:\n        # If total sum is non-positive, best is either single array max or suffix + prefix\n        result = max(single_max, max_suffix + max_prefix)\n    \n    return result",
  "model": "claude-sonnet-4"
}