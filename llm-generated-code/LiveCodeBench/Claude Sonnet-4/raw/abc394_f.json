{
  "task_id": "abc394_f",
  "task_description": "You are given an undirected tree T with N vertices, numbered 1, 2, \\ldots, N. The i-th edge is an undirected edge connecting vertices A_i and B_i.\nA graph is defined to be an alkane if and only if it satisfies the following conditions:\n\n- The graph is an undirected tree.\n- Every vertex has degree 1 or 4, and there is at least one vertex of degree 4.\n\nDetermine whether there exists a subgraph of T that is an alkane, and if so, find the maximum number of vertices in such a subgraph.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 B_1\r\nA_2 B_2\r\n\\vdots\r\nA_{N - 1} B_{N - 1}\n\nOutput\n\nIf there exists a subgraph of T that is an alkane, print the maximum number of vertices in such a subgraph. Otherwise, print -1.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq A_i, B_i \\leq N\n- The given graph is an undirected tree.\n- All input values are integers.\n\nSample Input 1\n\n9\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n2 6\r\n2 7\r\n3 8\r\n3 9\n\nSample Output 1\n\n8\r\n\nLet (u, v) denote an undirected edge between vertices u and v.\nA subgraph consisting of vertices 1,2,3,4,6,7,8,9 and edges (1,2),(2,3),(3,4),(2,6),(2,7),(3,8),(3,9) is an alkane.\n\nSample Input 2\n\n7\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\n\nSample Output 2\n\n-1\n\nSample Input 3\n\n15\r\n8 5\r\n2 9\r\n1 12\r\n6 11\r\n9 3\r\n15 1\r\n7 12\r\n7 13\r\n10 5\r\n6 9\r\n5 1\r\n1 9\r\n4 5\r\n6 14\n\nSample Output 3\n\n11",
  "llm_response": "from collections import defaultdict, deque\n\ndef candidate_func(input_str):\n    lines = input_str.strip().split('\\n')\n    n = int(lines[0])\n    \n    if n == 1:\n        return \"-1\"\n    \n    graph = defaultdict(list)\n    for i in range(1, n):\n        a, b = map(int, lines[i].split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def dfs(node, parent, selected_nodes, selected_edges):\n        max_size = 0\n        best_config = (set(), set())\n        \n        children = [child for child in graph[node] if child != parent]\n        \n        if len(children) == 0:\n            if parent is not None:\n                return 1, ({node}, set())\n            else:\n                return 0, (set(), set())\n        \n        child_results = []\n        for child in children:\n            size, (nodes, edges) = dfs(child, node, set(), set())\n            child_results.append((size, nodes, edges, child))\n        \n        for mask in range(1 << len(children)):\n            current_nodes = {node}\n            current_edges = set()\n            current_degree = 0\n            valid = True\n            \n            selected_children = []\n            for i in range(len(children)):\n                if mask & (1 << i):\n                    child = children[i]\n                    size, nodes, edges, _ = child_results[i]\n                    if size == 0:\n                        valid = False\n                        break\n                    current_nodes.update(nodes)\n                    current_edges.update(edges)\n                    current_edges.add((min(node, child), max(node, child)))\n                    current_degree += 1\n                    selected_children.append(child)\n            \n            if not valid:\n                continue\n            \n            if parent is not None:\n                current_degree += 1\n            \n            if current_degree != 1 and current_degree != 4:\n                continue\n            \n            has_degree_4 = current_degree == 4\n            for child_node in current_nodes:\n                if child_node == node:\n                    continue\n                child_degree = 0\n                for edge in current_edges:\n                    if child_node in edge:\n                        child_degree += 1\n                if child_degree == 4:\n                    has_degree_4 = True\n                elif child_degree != 1:\n                    valid = False\n                    break\n            \n            if not valid:\n                continue\n            \n            if parent is None and not has_degree_4:\n                continue\n            \n            if len(current_nodes) > max_size:\n                max_size = len(current_nodes)\n                best_config = (current_nodes, current_edges)\n        \n        return max_size, best_config\n    \n    max_alkane_size = 0\n    \n    for root in range(1, n + 1):\n        size, _ = dfs(root, None, set(), set())\n        max_alkane_size = max(max_alkane_size, size)\n    \n    return str(max_alkane_size) if max_alkane_size > 0 else \"-1\"",
  "model": "claude-sonnet-4"
}