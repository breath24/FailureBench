{
  "task_id": "abc397_e",
  "task_description": "You are given a tree with NK vertices. The vertices are numbered 1,2,\\dots,NK, and the i-th edge (i=1,2,\\dots,NK-1) connects vertices u_i and v_i bidirectionally.\nDetermine whether this tree can be decomposed into N paths, each of length K. More precisely, determine whether there exists an N \\times K matrix P satisfying the following:\n\n- P_{1,1}, \\dots, P_{1,K}, P_{2,1}, \\dots, P_{N,K} is a permutation of 1,2,\\dots,NK.\n- For each i=1,2,\\dots,N and j=1,2,\\dots,K-1, there is an edge connecting vertices P_{i,j} and P_{i,j+1}.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN K\r\nu_1 v_1\r\nu_2 v_2\r\n\\vdots\r\nu_{NK-1} v_{NK-1}\n\nOutput\n\nIf it is possible to decompose the tree into N paths each of length K, print Yes. Otherwise, print No.\n\nConstraints\n\n\n- 1 \\leq N\n- 1 \\leq K\n- NK \\leq 2 \\times 10^5\n- 1 \\leq u_i < v_i \\leq NK\n- The given graph is a tree.\n- All input values are integers.\n\nSample Input 1\n\n3 2\r\n1 2\r\n2 3\r\n3 4\r\n2 5\r\n5 6\n\nSample Output 1\n\nYes\r\n\nIt can be decomposed into a path with vertices 1,2, a path with vertices 3,4, and a path with vertices 5,6.\n\nSample Input 2\n\n3 2\r\n1 2\r\n2 3\r\n3 4\r\n2 5\r\n3 6\n\nSample Output 2\n\nNo",
  "llm_response": "import sys\nfrom collections import defaultdict, deque\n\ndef candidate_func(input_data):\n    lines = input_data.strip().split('\\n')\n    N, K = map(int, lines[0].split())\n    NK = N * K\n    \n    if K == 1:\n        return \"Yes\"\n    \n    adj = defaultdict(list)\n    degree = [0] * (NK + 1)\n    \n    for i in range(1, NK):\n        u, v = map(int, lines[i].split())\n        adj[u].append(v)\n        adj[v].append(u)\n        degree[u] += 1\n        degree[v] += 1\n    \n    if K == 1:\n        return \"Yes\"\n    \n    leaves = deque()\n    for i in range(1, NK + 1):\n        if degree[i] == 1:\n            leaves.append(i)\n    \n    used = [False] * (NK + 1)\n    path_count = 0\n    \n    while leaves:\n        leaf = leaves.popleft()\n        if used[leaf]:\n            continue\n            \n        current = leaf\n        path = [current]\n        used[current] = True\n        \n        for _ in range(K - 1):\n            found_next = False\n            for neighbor in adj[current]:\n                if not used[neighbor]:\n                    current = neighbor\n                    path.append(current)\n                    used[current] = True\n                    found_next = True\n                    break\n            if not found_next:\n                return \"No\"\n        \n        if len(path) == K:\n            path_count += 1\n            if path_count > N:\n                return \"No\"\n        else:\n            return \"No\"\n    \n    if path_count == N:\n        return \"Yes\"\n    else:\n        return \"No\"",
  "model": "qwen3-coder"
}