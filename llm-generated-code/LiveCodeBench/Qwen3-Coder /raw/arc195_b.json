{
  "task_id": "arc195_b",
  "task_description": "There are two sequences A=(A_1,\\dots,A_N) and B=(B_1,\\dots,B_N). You can perform the following three types of operations any number of times in any order:\n\n- Choose an index i such that A_i = -1, and replace A_i with any non-negative integer.\n- Choose an index i such that B_i = -1, and replace B_i with any non-negative integer.\n- Rearrange the elements of sequence A in any order.\n\nDetermine whether it is possible, after these operations, for all elements of A and B to be non-negative and satisfy A_1 + B_1 = A_2 + B_2 = \\dots = A_N + B_N.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\nB_1 B_2 \\ldots B_N\n\nOutput\n\nIf it is possible, after the operations, for all elements of A and B to be non-negative and satisfy A_1 + B_1 = A_2 + B_2 = \\dots = A_N + B_N, print Yes. Otherwise, print No.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2000\n- -1 \\leq A_i \\leq 10^9\n- -1 \\leq B_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n4\n2 0 -1 3\n3 -1 4 2\n\nSample Output 1\n\nYes\n\nConsider the following operations:\n\n- Replace A_3 with 1.\n- Replace B_2 with 1.\n- Rearrange A to (1,3,0,2).\n\nAfter these operations, A = (1,3,0,2) and B = (3,1,4,2): all elements of A and B are non-negative, and A_1+B_1 = A_2+B_2 = A_3+B_3 = A_4+B_4 = 4 is satisfied.\n\nSample Input 2\n\n3\n1 2 3\n1 2 4\n\nSample Output 2\n\nNo\n\nNo matter how you perform the operations, it is impossible to satisfy A_1+B_1 = A_2+B_2 = A_3+B_3.\n\nSample Input 3\n\n3\n1 2 -1\n1 2 4\n\nSample Output 3\n\nNo",
  "llm_response": "def candidate_func(input_str):\n    lines = input_str.strip().split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    \n    fixed_pairs = []\n    sum_val = None\n    for i in range(N):\n        if A[i] != -1 and B[i] != -1:\n            current_sum = A[i] + B[i]\n            if sum_val is None:\n                sum_val = current_sum\n            elif sum_val != current_sum:\n                return \"No\"\n            fixed_pairs.append((A[i], B[i]))\n    \n    if sum_val is None:\n        return \"Yes\"\n    \n    a_neg1 = []\n    b_neg1 = []\n    for i in range(N):\n        if A[i] == -1:\n            a_neg1.append(i)\n        if B[i] == -1:\n            b_neg1.append(i)\n    \n    needed_a = []\n    needed_b = []\n    for i in range(N):\n        if A[i] == -1 and B[i] == -1:\n            needed_a.append(i)\n        elif A[i] == -1:\n            required = sum_val - B[i]\n            if required < 0:\n                return \"No\"\n        elif B[i] == -1:\n            required = sum_val - A[i]\n            if required < 0:\n                return \"No\"\n    \n    count_a_neg1 = len(a_neg1)\n    count_b_neg1 = len(b_neg1)\n    count_both_neg1 = len(needed_a)\n    \n    free_a = count_both_neg1\n    free_b = count_both_neg1\n    \n    required_for_a = []\n    required_for_b = []\n    \n    for i in range(N):\n        if A[i] == -1 and B[i] != -1:\n            required = sum_val - B[i]\n            if required < 0:\n                return \"No\"\n            required_for_a.append(required)\n        elif A[i] != -1 and B[i] == -1:\n            required = sum_val - A[i]\n            if required < 0:\n                return \"No\"\n            required_for_b.append(required)\n    \n    available_a = []\n    available_b = []\n    \n    for i in range(N):\n        if A[i] == -1 and B[i] == -1:\n            available_a.append(i)\n            available_b.append(i)\n    \n    import collections\n    \n    def can_assign(required_list, available_count):\n        return len(required_list) <= available_count\n    \n    if not can_assign(required_for_a, free_a) or not can_assign(required_for_b, free_b):\n        return \"No\"\n    \n    return \"Yes\"",
  "model": "qwen3-coder"
}