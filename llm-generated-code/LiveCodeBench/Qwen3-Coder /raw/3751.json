{
  "task_id": "3751",
  "task_description": "You are given an array nums of length n. You are also given an integer k.\nYou perform the following operation on nums once:\n\nSelect a subarray nums[i..j] where 0 <= i <= j <= n - 1.\nSelect an integer x and add x to all the elements in nums[i..j].\n\nFind the maximum frequency of the value k after the operation.\n \nExample 1:\n\nInput: nums = [1,2,3,4,5,6], k = 1\nOutput: 2\nExplanation:\nAfter adding -5 to nums[2..5], 1 has a frequency of 2 in [1, 2, -2, -1, 0, 1].\n\nExample 2:\n\nInput: nums = [10,2,3,4,5,5,4,3,2,2], k = 10\nOutput: 4\nExplanation:\nAfter adding 8 to nums[1..9], 10 has a frequency of 4 in [10, 10, 11, 12, 13, 13, 12, 11, 10, 10].\n\n \nConstraints:\n\n1 <= n == nums.length <= 10^5\n1 <= nums[i] <= 50\n1 <= k <= 50",
  "llm_response": "def maxFrequency(nums, k):\n    n = len(nums)\n    max_freq = 1\n    \n    for i in range(n):\n        for j in range(i, n):\n            # Calculate the cost to make all elements in subarray [i..j] equal to k\n            cost = 0\n            for idx in range(i, j + 1):\n                cost += abs(nums[idx] - k)\n            \n            # If we can afford this operation, calculate the frequency\n            if cost >= 0:  # We can always perform the operation\n                freq = 0\n                # Count how many elements will be equal to k after the operation\n                for idx in range(n):\n                    if idx >= i and idx <= j:\n                        # Elements in the subarray will become k\n                        if k == k:\n                            freq += 1\n                    else:\n                        # Elements outside the subarray remain unchanged\n                        if nums[idx] == k:\n                            freq += 1\n                max_freq = max(max_freq, freq)\n    \n    return max_freq",
  "model": "qwen3-coder"
}