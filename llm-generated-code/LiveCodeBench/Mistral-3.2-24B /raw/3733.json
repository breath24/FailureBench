{
  "task_id": "3733",
  "task_description": "You are given a 2D integer matrix grid of size n x m, where each element is either 0, 1, or 2.\nA V-shaped diagonal segment is defined as:\n\nThe segment starts with 1.\nThe subsequent elements follow this infinite sequence: 2, 0, 2, 0, ....\nThe segment:\n\t\nStarts along a diagonal direction (top-left to bottom-right, bottom-right to top-left, top-right to bottom-left, or bottom-left to top-right).\nContinues the sequence in the same diagonal direction.\nMakes at most one clockwise 90-degree turn to another diagonal direction while maintaining the sequence.\n\n\n\n\nReturn the length of the longest V-shaped diagonal segment. If no valid segment exists, return 0.\n \nExample 1:\n\nInput: grid = [[2,2,1,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]\nOutput: 5\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,2) → (1,3) → (2,4), takes a 90-degree clockwise turn at (2,4), and continues as (3,3) → (4,2).\n\nExample 2:\n\nInput: grid = [[2,2,2,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]\nOutput: 4\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 4 and follows these coordinates: (2,3) → (3,2), takes a 90-degree clockwise turn at (3,2), and continues as (2,1) → (1,0).\n\nExample 3:\n\nInput: grid = [[1,2,2,2,2],[2,2,2,2,0],[2,0,0,0,0],[0,0,2,2,2],[2,0,0,2,0]]\nOutput: 5\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,0) → (1,1) → (2,2) → (3,3) → (4,4).\n\nExample 4:\n\nInput: grid = [[1]]\nOutput: 1\nExplanation:\nThe longest V-shaped diagonal segment has a length of 1 and follows these coordinates: (0,0).\n\n \nConstraints:\n\nn == grid.length\nm == grid[i].length\n1 <= n, m <= 500\ngrid[i][j] is either 0, 1 or 2.",
  "llm_response": "def lenOfVDiagonal(grid):\n    if not grid or not grid[0]:\n        return 0\n    n, m = len(grid), len(grid[0])\n    max_len = 0\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                for di, dj in [(1, 1), (1, -1), (-1, 1), (-1, -1)]:\n                    len1 = 1\n                    x, y = i + di, j + dj\n                    while 0 <= x < n and 0 <= y < m and grid[x][y] in {2, 0}:\n                        if grid[x][y] == 2:\n                            len1 += 1\n                            x += di\n                            y += dj\n                        else:\n                            break\n                    if len1 > 1:\n                        for ni, nj in [(dj, -di), (-dj, di), (dj, di), (-dj, -di)]:\n                            nx, ny = x + ni, y + nj\n                            len2 = 0\n                            while 0 <= nx < n and 0 <= ny < m and grid[nx][ny] in {2, 0}:\n                                if len2 == 0 and grid[nx][ny] == 2:\n                                    len2 = 1\n                                    nx += ni\n                                    ny += nj\n                                elif len2 > 0 and grid[nx][ny] == 0:\n                                    len2 += 1\n                                    nx += ni\n                                    ny += nj\n                                else:\n                                    break\n                            total_len = len1 + len2\n                            if total_len > max_len:\n                                max_len = total_len\n                len_straight = 1\n                x, y = i, j\n                while 0 <= x < n and 0 <= y < m and grid[x][y] in {2, 0}:\n                    if grid[x][y] == 2:\n                        len_straight += 1\n                        x += di\n                        y += dj\n                    else:\n                        break\n                if len_straight > max_len:\n                    max_len = len_straight\n    return max_len",
  "model": "mistral-3.2-24b"
}