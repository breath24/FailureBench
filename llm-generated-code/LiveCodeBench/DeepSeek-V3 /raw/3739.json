{
  "task_id": "3739",
  "task_description": "You are given three integers m, n, and k.\nThere is a rectangular grid of size m Ã— n containing k identical pieces. Return the sum of Manhattan distances between every pair of pieces over all valid arrangements of pieces.\nA valid arrangement is a placement of all k pieces on the grid with at most one piece per cell.\nSince the answer may be very large, return it modulo 10^9 + 7.\nThe Manhattan Distance between two cells (x_i, y_i) and (x_j, y_j) is |x_i - x_j| + |y_i - y_j|.\n \nExample 1:\n\nInput: m = 2, n = 2, k = 2\nOutput: 8\nExplanation:\nThe valid arrangements of pieces on the board are:\n\n\nIn the first 4 arrangements, the Manhattan distance between the two pieces is 1.\nIn the last 2 arrangements, the Manhattan distance between the two pieces is 2.\n\nThus, the total Manhattan distance across all valid arrangements is 1 + 1 + 1 + 1 + 2 + 2 = 8.\n\nExample 2:\n\nInput: m = 1, n = 4, k = 3\nOutput: 20\nExplanation:\nThe valid arrangements of pieces on the board are:\n\n\nThe first and last arrangements have a total Manhattan distance of 1 + 1 + 2 = 4.\nThe middle two arrangements have a total Manhattan distance of 1 + 2 + 3 = 6.\n\nThe total Manhattan distance between all pairs of pieces across all arrangements is 4 + 6 + 6 + 4 = 20.\n\n \nConstraints:\n\n1 <= m, n <= 10^5\n2 <= m * n <= 10^5\n2 <= k <= m * n",
  "llm_response": "import math\n\ndef distanceSum(m, n, k):\n    MOD = 10**9 + 7\n    \n    def comb(a, b):\n        if a < b:\n            return 0\n        return math.comb(a, b)\n    \n    total_cells = m * n\n    if k == 0 or k == 1:\n        return 0\n    \n    total_arrangements = comb(total_cells, k)\n    \n    x_sum = 0\n    for x in range(1, m + 1):\n        cnt = (x - 1) * x // 2 * n * n\n        cnt += (m - x) * x * n * n\n        x_sum += cnt\n    \n    y_sum = 0\n    for y in range(1, n + 1):\n        cnt = (y - 1) * y // 2 * m * m\n        cnt += (n - y) * y * m * m\n        y_sum += cnt\n    \n    total_pairs = comb(total_cells - 2, k - 2)\n    total_distance = (x_sum + y_sum) * total_pairs\n    return total_distance % MOD",
  "model": "deepseek-chat-v3-0324"
}