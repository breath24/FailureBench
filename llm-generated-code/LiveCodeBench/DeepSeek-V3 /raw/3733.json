{
  "task_id": "3733",
  "task_description": "You are given a 2D integer matrix grid of size n x m, where each element is either 0, 1, or 2.\nA V-shaped diagonal segment is defined as:\n\nThe segment starts with 1.\nThe subsequent elements follow this infinite sequence: 2, 0, 2, 0, ....\nThe segment:\n\t\nStarts along a diagonal direction (top-left to bottom-right, bottom-right to top-left, top-right to bottom-left, or bottom-left to top-right).\nContinues the sequence in the same diagonal direction.\nMakes at most one clockwise 90-degree turn to another diagonal direction while maintaining the sequence.\n\n\n\n\nReturn the length of the longest V-shaped diagonal segment. If no valid segment exists, return 0.\n \nExample 1:\n\nInput: grid = [[2,2,1,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]\nOutput: 5\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,2) → (1,3) → (2,4), takes a 90-degree clockwise turn at (2,4), and continues as (3,3) → (4,2).\n\nExample 2:\n\nInput: grid = [[2,2,2,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]\nOutput: 4\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 4 and follows these coordinates: (2,3) → (3,2), takes a 90-degree clockwise turn at (3,2), and continues as (2,1) → (1,0).\n\nExample 3:\n\nInput: grid = [[1,2,2,2,2],[2,2,2,2,0],[2,0,0,0,0],[0,0,2,2,2],[2,0,0,2,0]]\nOutput: 5\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,0) → (1,1) → (2,2) → (3,3) → (4,4).\n\nExample 4:\n\nInput: grid = [[1]]\nOutput: 1\nExplanation:\nThe longest V-shaped diagonal segment has a length of 1 and follows these coordinates: (0,0).\n\n \nConstraints:\n\nn == grid.length\nm == grid[i].length\n1 <= n, m <= 500\ngrid[i][j] is either 0, 1 or 2.",
  "llm_response": "import itertools\n\ndef lenOfVDiagonal(grid):\n    n = len(grid)\n    m = len(grid[0]) if n > 0 else 0\n    max_len = 0\n    directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                for di, dj in directions:\n                    x, y = i, j\n                    length = 1\n                    expected = 2\n                    while True:\n                        ni, nj = x + di, y + dj\n                        if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == expected:\n                            length += 1\n                            x, y = ni, nj\n                            expected = 0 if expected == 2 else 2\n                        else:\n                            break\n                    if length > 1:\n                        for ndi, ndj in directions:\n                            if (ndi, ndj) != (di, dj) and (ndi, ndj) != (-di, -dj):\n                                ni, nj = x + ndi, y + ndj\n                                if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == expected:\n                                    temp_len = length + 1\n                                    tx, ty = ni, nj\n                                    texpected = 0 if expected == 2 else 2\n                                    while True:\n                                        ni, nj = tx + ndi, ty + ndj\n                                        if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == texpected:\n                                            temp_len += 1\n                                            tx, ty = ni, nj\n                                            texpected = 0 if texpected == 2 else 2\n                                        else:\n                                            break\n                                    if temp_len > max_len:\n                                        max_len = temp_len\n                    if length > max_len:\n                        max_len = length\n    return max_len",
  "model": "deepseek-chat-v3-0324"
}