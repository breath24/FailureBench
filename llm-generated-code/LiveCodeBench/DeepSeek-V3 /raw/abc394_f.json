{
  "task_id": "abc394_f",
  "task_description": "You are given an undirected tree T with N vertices, numbered 1, 2, \\ldots, N. The i-th edge is an undirected edge connecting vertices A_i and B_i.\nA graph is defined to be an alkane if and only if it satisfies the following conditions:\n\n- The graph is an undirected tree.\n- Every vertex has degree 1 or 4, and there is at least one vertex of degree 4.\n\nDetermine whether there exists a subgraph of T that is an alkane, and if so, find the maximum number of vertices in such a subgraph.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 B_1\r\nA_2 B_2\r\n\\vdots\r\nA_{N - 1} B_{N - 1}\n\nOutput\n\nIf there exists a subgraph of T that is an alkane, print the maximum number of vertices in such a subgraph. Otherwise, print -1.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq A_i, B_i \\leq N\n- The given graph is an undirected tree.\n- All input values are integers.\n\nSample Input 1\n\n9\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n2 6\r\n2 7\r\n3 8\r\n3 9\n\nSample Output 1\n\n8\r\n\nLet (u, v) denote an undirected edge between vertices u and v.\nA subgraph consisting of vertices 1,2,3,4,6,7,8,9 and edges (1,2),(2,3),(3,4),(2,6),(2,7),(3,8),(3,9) is an alkane.\n\nSample Input 2\n\n7\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\n\nSample Output 2\n\n-1\n\nSample Input 3\n\n15\r\n8 5\r\n2 9\r\n1 12\r\n6 11\r\n9 3\r\n15 1\r\n7 12\r\n7 13\r\n10 5\r\n6 9\r\n5 1\r\n1 9\r\n4 5\r\n6 14\n\nSample Output 3\n\n11",
  "llm_response": "import sys\nfrom collections import deque\n\ndef candidate_func(input_str):\n    lines = input_str.split('\\n')\n    N = int(lines[0])\n    adj = [[] for _ in range(N + 1)]\n    for line in lines[1:N]:\n        a, b = map(int, line.split())\n        adj[a].append(b)\n        adj[b].append(a)\n    \n    def bfs(start):\n        visited = [-1] * (N + 1)\n        q = deque()\n        visited[start] = 0\n        q.append(start)\n        farthest_node = start\n        max_dist = 0\n        while q:\n            u = q.popleft()\n            for v in adj[u]:\n                if visited[v] == -1:\n                    visited[v] = visited[u] + 1\n                    q.append(v)\n                    if visited[v] > max_dist:\n                        max_dist = visited[v]\n                        farthest_node = v\n        return farthest_node, max_dist\n    \n    u, _ = bfs(1)\n    v, _ = bfs(u)\n    \n    path = []\n    parent = [0] * (N + 1)\n    visited = [False] * (N + 1)\n    q = deque([u])\n    visited[u] = True\n    found = False\n    while q and not found:\n        current = q.popleft()\n        for neighbor in adj[current]:\n            if not visited[neighbor]:\n                parent[neighbor] = current\n                visited[neighbor] = True\n                if neighbor == v:\n                    found = True\n                    break\n                q.append(neighbor)\n    \n    path = []\n    node = v\n    while node != u:\n        path.append(node)\n        node = parent[node]\n    path.append(u)\n    path = path[::-1]\n    \n    diameter = len(path) - 1\n    \n    if diameter < 3:\n        return '-1'\n    \n    def check_center(center):\n        deg = len(adj[center])\n        if deg < 4:\n            return False\n        branches = []\n        visited = [False] * (N + 1)\n        visited[center] = True\n        for neighbor in adj[center]:\n            if visited[neighbor]:\n                continue\n            q = deque([neighbor])\n            visited[neighbor] = True\n            cnt = 1\n            while q:\n                u = q.popleft()\n                for v in adj[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        q.append(v)\n                        cnt += 1\n            branches.append(cnt)\n        branches.sort(reverse=True)\n        if len(branches) < 4:\n            return False\n        total = 1 + sum(branches[:4])\n        return total\n    \n    max_total = -1\n    for center in range(1, N + 1):\n        res = check_center(center)\n        if res:\n            if res > max_total:\n                max_total = res\n    return str(max_total) if max_total != -1 else '-1'",
  "model": "deepseek-chat-v3-0324"
}