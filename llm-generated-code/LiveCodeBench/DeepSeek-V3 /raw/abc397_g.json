{
  "task_id": "abc397_g",
  "task_description": "You are given a directed graph with N vertices and M edges. The vertices are numbered 1,2,\\dots,N. Edge j (j=1,2,\\dots,M) goes from vertex u_j to vertex v_j. It is guaranteed that vertex N is reachable from vertex 1.\nInitially, all edges have weight 0. We choose exactly K out of the M edges and change their weights to 1. Find the maximum possible value of the shortest distance from vertex 1 to vertex N in the resulting graph.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M K\r\nu_1 v_1\r\nu_2 v_2\r\n\\vdots\r\nu_M v_M\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 30\n- 1 \\leq K \\leq M \\leq 100\n- 1 \\leq u_j, v_j \\leq N\n- u_j \\neq v_j\n- In the given graph, vertex N is reachable from vertex 1.\n- All input values are integers.\n\nSample Input 1\n\n3 3 2\r\n1 2\r\n2 3\r\n1 3\n\nSample Output 1\n\n1\r\n\nBy choosing edges 1,3, the shortest distance from vertex 1 to vertex 3 becomes 1. There is no way to make the shortest distance 2 or greater, so the answer is 1.\n\nSample Input 2\n\n4 4 3\r\n1 2\r\n1 3\r\n3 2\r\n2 4\n\nSample Output 2\n\n2\r\n\nBy choosing edges 1,2,4, the shortest distance from vertex 1 to vertex 4 becomes 2. There is no way to make the shortest distance 3 or greater, so the answer is 2.\n\nSample Input 3\n\n2 2 1\r\n1 2\r\n1 2\n\nSample Output 3\n\n0\r\n\nNote that there may be multi-edges.",
  "llm_response": "import sys\nfrom collections import deque\nimport itertools\n\ndef candidate_func(input_str):\n    lines = input_str.split('\\n')\n    N, M, K = map(int, lines[0].split())\n    edges = []\n    for line in lines[1:M+1]:\n        u, v = map(int, line.split())\n        edges.append((u, v))\n    max_dist = 0\n    for selected in itertools.combinations(range(M), K):\n        adj = [[] for _ in range(N+1)]\n        for idx in selected:\n            u, v = edges[idx]\n            adj[u].append((v, 1))\n        for i in range(M):\n            if i not in selected:\n                u, v = edges[i]\n                adj[u].append((v, 0))\n        dist = [float('inf')] * (N+1)\n        dist[1] = 0\n        q = deque()\n        q.append(1)\n        while q:\n            u = q.popleft()\n            for (v, w) in adj[u]:\n                if dist[v] > dist[u] + w:\n                    dist[v] = dist[u] + w\n                    q.append(v)\n        if dist[N] > max_dist:\n            max_dist = dist[N]\n    return str(max_dist)",
  "model": "deepseek-chat-v3-0324"
}