{
  "task_id": "abc387_c",
  "task_description": "A positive integer not less than 10 whose top digit (the most significant digit) in decimal representation is strictly larger than every other digit in that number is called a Snake number.\nFor example, 31 and 201 are Snake numbers, but 35 and 202 are not.\nFind how many Snake numbers exist between L and R, inclusive.\n\nInput\n\nThe input is given from Standard Input in the following format:\nL R\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 10 \\leq L \\leq R \\leq 10^{18}\n- All input values are integers.\n\nSample Input 1\n\n97 210\n\nSample Output 1\n\n6\n\nThe Snake numbers between 97 and 210, inclusive, are 97, 98, 100, 200, 201, and 210: there are six.\n\nSample Input 2\n\n1000 9999\n\nSample Output 2\n\n2025\n\nSample Input 3\n\n252509054433933519 760713016476190692\n\nSample Output 3\n\n221852052834757",
  "llm_response": "import sys\n\ndef candidate_func(input_str):\n    L, R = map(int, input_str.split())\n    count = 0\n    for d in range(1, 19):\n        for first in range(1, 10):\n            min_num = first * (10 ** (d - 1))\n            max_num = (first + 1) * (10 ** (d - 1)) - 1\n            lower = max(L, min_num)\n            upper = min(R, max_num)\n            if lower > upper:\n                continue\n            count += upper - lower + 1\n            for pos in range(1, d):\n                for digit in range(0, first):\n                    min_num = first * (10 ** (d - 1)) + digit * (10 ** (d - 1 - pos))\n                    max_num = first * (10 ** (d - 1)) + (digit + 1) * (10 ** (d - 1 - pos)) - 1\n                    lower = max(L, min_num)\n                    upper = min(R, max_num)\n                    if lower > upper:\n                        continue\n                    count += upper - lower + 1\n    return str(count)",
  "model": "deepseek-chat-v3-0324"
}