{
  "task_id": "abc392_d",
  "task_description": "There are N dice.\r\nThe i-th die has K_i faces, with the numbers A_{i,1}, A_{i,2}, \\ldots, A_{i,K_i} written on them.\r\nWhen you roll this die, each face appears with probability \\frac{1}{K_i}.\nYou choose two dice from the N dice and roll them.\r\nDetermine the maximum probability that the two dice show the same number, when the dice are chosen optimally.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nK_1 A_{1,1} A_{1,2} \\dots A_{1,K_1}\r\n\\vdots\r\nK_N A_{N,1} A_{N,2} \\dots A_{N,K_N}\n\nOutput\n\nPrint the answer.\r\nYour answer is considered correct if the absolute or relative error from the true solution does not exceed 10^{-8}.\n\nConstraints\n\n\n- 2 \\leq N \\leq 100\n- 1 \\leq K_i\n- K_1 + K_2 + \\dots + K_N \\leq 10^5\n- 1 \\leq A_{i,j} \\leq 10^5\n- All input values are integers.\n\nSample Input 1\n\n3\r\n3 1 2 3\r\n4 1 2 2 1\r\n6 1 2 3 4 5 6\n\nSample Output 1\n\n0.333333333333333\r\n\n\n- When choosing the 1st and 2nd dice, the probability that the outcomes are the same is \\frac{1}{3}.\n- When choosing the 1st and 3rd dice, the probability is \\frac{1}{6}.\n- When choosing the 2nd and 3rd dice, the probability is \\frac{1}{6}.\n\nTherefore, the maximum probability is \\frac{1}{3} = 0.3333333333\\ldots.\n\nSample Input 2\n\n3\r\n5 1 1 1 1 1\r\n4 2 2 2 2\r\n3 1 1 2\n\nSample Output 2\n\n0.666666666666667",
  "llm_response": "def candidate_func(input_str):\n    from collections import Counter\n    data = input_str.strip().split('\\n')\n    N = int(data[0])\n    dice = []\n    for i in range(1, N + 1):\n        line = list(map(int, data[i].split()))\n        K = line[0]\n        faces = line[1:]\n        dice.append((K, faces))\n    \n    max_prob = 0.0\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            K1, faces1 = dice[i]\n            K2, faces2 = dice[j]\n            count1 = Counter(faces1)\n            count2 = Counter(faces2)\n            common_faces = set(faces1) & set(faces2)\n            prob = sum(count1[face] * count2[face] for face in common_faces) / (K1 * K2)\n            max_prob = max(max_prob, prob)\n    \n    return f\"{max_prob:.12f}\"",
  "model": "gpt-4o"
}