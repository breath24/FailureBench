{
  "task_id": "abc399_c",
  "task_description": "You are given a simple undirected graph with N vertices and M edges, where the vertices are labeled 1 to N. The i-th edge connects vertices u_i and v_i.\r\nWhat is the minimum number of edges that need to be deleted from this graph so that the graph becomes a forest?\n\nWhat is a forest?\r\n\r\nA simple undirected graph F is called a forest if and only if F does not contain any cycle.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\r\nu_1 v_1\r\nu_2 v_2\r\n\\vdots\r\nu_M v_M\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- 0 \\leq M \\leq \\min \\left( \\frac{N(N-1)}{2}, 2 \\times 10^5\\right)\n- 1 \\leq u_i < v_i \\leq N\n- The given graph is simple.\n- All input values are integers.\n\nSample Input 1\n\n4 4\r\n1 2\r\n1 3\r\n2 4\r\n3 4\n\nSample Output 1\n\n1\r\n\nFor example, if you delete the first edge, the graph becomes a forest.\n\nSample Input 2\n\n5 0\n\nSample Output 2\n\n0\n\nSample Input 3\n\n10 10\r\n7 9\r\n4 6\r\n6 10\r\n2 5\r\n5 6\r\n5 9\r\n6 8\r\n4 8\r\n1 5\r\n1 4\n\nSample Output 3\n\n2",
  "llm_response": "def candidate_func(input_str):\n    from sys import setrecursionlimit\n    from collections import defaultdict\n\n    setrecursionlimit(10**6)\n    \n    data = input_str.split()\n    N = int(data[0])\n    M = int(data[1])\n    \n    edges = []\n    index = 2\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        edges.append((u, v))\n        index += 2\n    \n    parent = list(range(N))\n    rank = [0] * N\n    \n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n    \n    def union(x, y):\n        rootX = find(x)\n        rootY = find(y)\n        if rootX != rootY:\n            if rank[rootX] > rank[rootY]:\n                parent[rootY] = rootX\n            elif rank[rootX] < rank[rootY]:\n                parent[rootX] = rootY\n            else:\n                parent[rootY] = rootX\n                rank[rootX] += 1\n            return True\n        return False\n    \n    extra_edges = 0\n    for u, v in edges:\n        if not union(u, v):\n            extra_edges += 1\n    \n    return str(extra_edges)",
  "model": "gpt-4o"
}