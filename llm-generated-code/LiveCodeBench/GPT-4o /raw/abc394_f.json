{
  "task_id": "abc394_f",
  "task_description": "You are given an undirected tree T with N vertices, numbered 1, 2, \\ldots, N. The i-th edge is an undirected edge connecting vertices A_i and B_i.\nA graph is defined to be an alkane if and only if it satisfies the following conditions:\n\n- The graph is an undirected tree.\n- Every vertex has degree 1 or 4, and there is at least one vertex of degree 4.\n\nDetermine whether there exists a subgraph of T that is an alkane, and if so, find the maximum number of vertices in such a subgraph.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 B_1\r\nA_2 B_2\r\n\\vdots\r\nA_{N - 1} B_{N - 1}\n\nOutput\n\nIf there exists a subgraph of T that is an alkane, print the maximum number of vertices in such a subgraph. Otherwise, print -1.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq A_i, B_i \\leq N\n- The given graph is an undirected tree.\n- All input values are integers.\n\nSample Input 1\n\n9\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n2 6\r\n2 7\r\n3 8\r\n3 9\n\nSample Output 1\n\n8\r\n\nLet (u, v) denote an undirected edge between vertices u and v.\nA subgraph consisting of vertices 1,2,3,4,6,7,8,9 and edges (1,2),(2,3),(3,4),(2,6),(2,7),(3,8),(3,9) is an alkane.\n\nSample Input 2\n\n7\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\n\nSample Output 2\n\n-1\n\nSample Input 3\n\n15\r\n8 5\r\n2 9\r\n1 12\r\n6 11\r\n9 3\r\n15 1\r\n7 12\r\n7 13\r\n10 5\r\n6 9\r\n5 1\r\n1 9\r\n4 5\r\n6 14\n\nSample Output 3\n\n11",
  "llm_response": "from collections import defaultdict, deque\n\ndef candidate_func(input_str):\n    data = input_str.splitlines()\n    N = int(data[0])\n    edges = [tuple(map(int, line.split())) for line in data[1:]]\n    \n    if N < 5:\n        return \"-1\"\n    \n    graph = defaultdict(list)\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    degree = {i: len(graph[i]) for i in range(1, N + 1)}\n    \n    if all(d == 1 for d in degree.values()):\n        return \"-1\"\n    \n    def bfs(start):\n        visited = set()\n        queue = deque([start])\n        visited.add(start)\n        subgraph_size = 0\n        has_degree_4 = False\n        \n        while queue:\n            node = queue.popleft()\n            subgraph_size += 1\n            if degree[node] == 4:\n                has_degree_4 = True\n            for neighbor in graph[node]:\n                if neighbor not in visited and (degree[neighbor] == 1 or degree[neighbor] == 4):\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n        \n        return subgraph_size if has_degree_4 else -1\n    \n    max_subgraph_size = -1\n    for node in range(1, N + 1):\n        if degree[node] == 4:\n            max_subgraph_size = max(max_subgraph_size, bfs(node))\n    \n    return str(max_subgraph_size)",
  "model": "gpt-4o"
}