{
  "task_id": "3725",
  "task_description": "You are given an integer array nums and a positive integer k. Return the sum of the maximum and minimum elements of all subarrays with at most k elements.\n \nExample 1:\n\nInput: nums = [1,2,3], k = 2\nOutput: 20\nExplanation:\nThe subarrays of nums with at most 2 elements are:\n\n\n\nSubarray\nMinimum\nMaximum\nSum\n\n\n[1]\n1\n1\n2\n\n\n[2]\n2\n2\n4\n\n\n[3]\n3\n3\n6\n\n\n[1, 2]\n1\n2\n3\n\n\n[2, 3]\n2\n3\n5\n\n\nFinal Total\n \n \n20\n\n\n\nThe output would be 20.\n\nExample 2:\n\nInput: nums = [1,-3,1], k = 2\nOutput: -6\nExplanation:\nThe subarrays of nums with at most 2 elements are:\n\n\n\nSubarray\nMinimum\nMaximum\nSum\n\n\n[1]\n1\n1\n2\n\n\n[-3]\n-3\n-3\n-6\n\n\n[1]\n1\n1\n2\n\n\n[1, -3]\n-3\n1\n-2\n\n\n[-3, 1]\n-3\n1\n-2\n\n\nFinal Total\n \n \n-6\n\n\n\nThe output would be -6.\n\n \nConstraints:\n\n1 <= nums.length <= 80000\n1 <= k <= nums.length\n-10^6 <= nums[i] <= 10^6",
  "llm_response": "from collections import deque\n\ndef minMaxSubarraySum(nums, k):\n    def sumMinMaxSubarrays(nums, k):\n        n = len(nums)\n        min_deque, max_deque = deque(), deque()\n        total_sum = 0\n        for i in range(n):\n            while min_deque and nums[min_deque[-1]] >= nums[i]:\n                min_deque.pop()\n            while max_deque and nums[max_deque[-1]] <= nums[i]:\n                max_deque.pop()\n            min_deque.append(i)\n            max_deque.append(i)\n            if i >= k:\n                if min_deque[0] == i - k:\n                    min_deque.popleft()\n                if max_deque[0] == i - k:\n                    max_deque.popleft()\n            total_sum += nums[min_deque[0]] + nums[max_deque[0]]\n        return total_sum\n\n    total = 0\n    for size in range(1, k + 1):\n        total += sumMinMaxSubarrays(nums, size)\n    return total",
  "model": "gpt-4o"
}