{
  "task_id": "abc399_f",
  "task_description": "You are given positive integers N, K, and an integer sequence of length N: A = (A_1, A_2, \\dots, A_N).\nFind \\displaystyle \\sum_{1\\leq l\\leq r\\leq N} \\Bigg(\\sum_{l\\leq i\\leq r} A_i\\Bigg)^K, modulo 998244353.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN K\r\nA_1 A_2 \\dots A_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 1\\leq N \\leq 2\\times 10^5\n- 1\\leq K \\leq 10\n- 0 \\leq A_i < 998244353\n- All input values are integers.\n\nSample Input 1\n\n3 2\r\n3 1 2\n\nSample Output 1\n\n75\r\n\nThe value is A_1^2+A_2^2+A_3^2+(A_1+A_2)^2+(A_2+A_3)^2+(A_1+A_2+A_3)^2=3^2+1^2+2^2+4^2+3^2+6^2=75.\n\nSample Input 2\n\n1 10\r\n0\n\nSample Output 2\n\n0\n\nSample Input 3\n\n10 5\r\n91 59 85 60 57 72 12 3 27 16\n\nSample Output 3\n\n428633385\r\n\nBe sure to find the sum modulo 998244353.",
  "llm_response": "def candidate_func(input_str):\n    MOD = 998244353\n    \n    lines = input_str.strip().split('\\n')\n    N, K = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n    \n    # Precompute prefix sums\n    prefix = [0] * (N + 1)\n    for i in range(N):\n        prefix[i + 1] = (prefix[i] + A[i]) % MOD\n    \n    # Function to compute x^K mod MOD\n    def power(x, k):\n        if k == 0:\n            return 1\n        result = 1\n        base = x % MOD\n        while k > 0:\n            if k % 2 == 1:\n                result = (result * base) % MOD\n            base = (base * base) % MOD\n            k //= 2\n        return result\n    \n    total = 0\n    for l in range(1, N + 1):\n        for r in range(l, N + 1):\n            subarray_sum = (prefix[r] - prefix[l - 1]) % MOD\n            total = (total + power(subarray_sum, K)) % MOD\n    \n    return str(total)",
  "model": "qwen3-coder"
}