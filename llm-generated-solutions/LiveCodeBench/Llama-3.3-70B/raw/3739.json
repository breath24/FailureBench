{
  "task_id": "3739",
  "task_description": "You are given three integers m, n, and k.\nThere is a rectangular grid of size m Ã— n containing k identical pieces. Return the sum of Manhattan distances between every pair of pieces over all valid arrangements of pieces.\nA valid arrangement is a placement of all k pieces on the grid with at most one piece per cell.\nSince the answer may be very large, return it modulo 10^9 + 7.\nThe Manhattan Distance between two cells (x_i, y_i) and (x_j, y_j) is |x_i - x_j| + |y_i - y_j|.\n \nExample 1:\n\nInput: m = 2, n = 2, k = 2\nOutput: 8\nExplanation:\nThe valid arrangements of pieces on the board are:\n\n\nIn the first 4 arrangements, the Manhattan distance between the two pieces is 1.\nIn the last 2 arrangements, the Manhattan distance between the two pieces is 2.\n\nThus, the total Manhattan distance across all valid arrangements is 1 + 1 + 1 + 1 + 2 + 2 = 8.\n\nExample 2:\n\nInput: m = 1, n = 4, k = 3\nOutput: 20\nExplanation:\nThe valid arrangements of pieces on the board are:\n\n\nThe first and last arrangements have a total Manhattan distance of 1 + 1 + 2 = 4.\nThe middle two arrangements have a total Manhattan distance of 1 + 2 + 3 = 6.\n\nThe total Manhattan distance between all pairs of pieces across all arrangements is 4 + 6 + 6 + 4 = 20.\n\n \nConstraints:\n\n1 <= m, n <= 10^5\n2 <= m * n <= 10^5\n2 <= k <= m * n",
  "llm_response": "import itertools\nimport math\n\ndef distanceSum(m, n, k):\n    mod = 10**9 + 7\n    total_distance = 0\n    cells = [(i, j) for i in range(m) for j in range(n)]\n    arrangements = list(itertools.combinations(cells, k))\n    for arrangement in arrangements:\n        arrangement_distance = 0\n        for i in range(k):\n            for j in range(i+1, k):\n                distance = abs(arrangement[i][0] - arrangement[j][0]) + abs(arrangement[i][1] - arrangement[j][1])\n                arrangement_distance += distance\n        total_distance += arrangement_distance\n    return total_distance % mod",
  "model": "llama-3.3-70b"
}