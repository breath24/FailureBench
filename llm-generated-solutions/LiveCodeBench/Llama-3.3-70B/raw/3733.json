{
  "task_id": "3733",
  "task_description": "You are given a 2D integer matrix grid of size n x m, where each element is either 0, 1, or 2.\nA V-shaped diagonal segment is defined as:\n\nThe segment starts with 1.\nThe subsequent elements follow this infinite sequence: 2, 0, 2, 0, ....\nThe segment:\n\t\nStarts along a diagonal direction (top-left to bottom-right, bottom-right to top-left, top-right to bottom-left, or bottom-left to top-right).\nContinues the sequence in the same diagonal direction.\nMakes at most one clockwise 90-degree turn to another diagonal direction while maintaining the sequence.\n\n\n\n\nReturn the length of the longest V-shaped diagonal segment. If no valid segment exists, return 0.\n \nExample 1:\n\nInput: grid = [[2,2,1,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]\nOutput: 5\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,2) → (1,3) → (2,4), takes a 90-degree clockwise turn at (2,4), and continues as (3,3) → (4,2).\n\nExample 2:\n\nInput: grid = [[2,2,2,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]\nOutput: 4\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 4 and follows these coordinates: (2,3) → (3,2), takes a 90-degree clockwise turn at (3,2), and continues as (2,1) → (1,0).\n\nExample 3:\n\nInput: grid = [[1,2,2,2,2],[2,2,2,2,0],[2,0,0,0,0],[0,0,2,2,2],[2,0,0,2,0]]\nOutput: 5\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,0) → (1,1) → (2,2) → (3,3) → (4,4).\n\nExample 4:\n\nInput: grid = [[1]]\nOutput: 1\nExplanation:\nThe longest V-shaped diagonal segment has a length of 1 and follows these coordinates: (0,0).\n\n \nConstraints:\n\nn == grid.length\nm == grid[i].length\n1 <= n, m <= 500\ngrid[i][j] is either 0, 1 or 2.",
  "llm_response": "def lenOfVDiagonal(grid):\n    n, m = len(grid), len(grid[0])\n    directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]\n    sequence = [1, 2, 0, 2, 0]\n    max_length = 0\n\n    def dfs(i, j, direction, index, turned):\n        if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] != sequence[index % 5]:\n            return 0\n        length = 1\n        for d in directions:\n            if d == direction and not turned:\n                length = max(length, 1 + dfs(i + d[0], j + d[1], direction, index + 1, turned))\n            elif d != direction and turned:\n                continue\n            elif d != direction and not turned:\n                length = max(length, 1 + dfs(i + d[0], j + d[1], d, index + 1, True))\n        return length\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                for direction in directions:\n                    max_length = max(max_length, dfs(i, j, direction, 0, False))\n    return max_length",
  "model": "llama-3.3-70b"
}