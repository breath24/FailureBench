{
  "task_id": "3737",
  "task_description": "You are given an even integer n representing the number of houses arranged in a straight line, and a 2D array cost of size n x 3, where cost[i][j] represents the cost of painting house i with color j + 1.\nThe houses will look beautiful if they satisfy the following conditions:\n\nNo two adjacent houses are painted the same color.\nHouses equidistant from the ends of the row are not painted the same color. For example, if n = 6, houses at positions (0, 5), (1, 4), and (2, 3) are considered equidistant.\n\nReturn the minimum cost to paint the houses such that they look beautiful.\n \nExample 1:\n\nInput: n = 4, cost = [[3,5,7],[6,2,9],[4,8,1],[7,3,5]]\nOutput: 9\nExplanation:\nThe optimal painting sequence is [1, 2, 3, 2] with corresponding costs [3, 2, 1, 3]. This satisfies the following conditions:\n\nNo adjacent houses have the same color.\nHouses at positions 0 and 3 (equidistant from the ends) are not painted the same color (1 != 2).\nHouses at positions 1 and 2 (equidistant from the ends) are not painted the same color (2 != 3).\n\nThe minimum cost to paint the houses so that they look beautiful is 3 + 2 + 1 + 3 = 9.\n\nExample 2:\n\nInput: n = 6, cost = [[2,4,6],[5,3,8],[7,1,9],[4,6,2],[3,5,7],[8,2,4]]\nOutput: 18\nExplanation:\nThe optimal painting sequence is [1, 3, 2, 3, 1, 2] with corresponding costs [2, 8, 1, 2, 3, 2]. This satisfies the following conditions:\n\nNo adjacent houses have the same color.\nHouses at positions 0 and 5 (equidistant from the ends) are not painted the same color (1 != 2).\nHouses at positions 1 and 4 (equidistant from the ends) are not painted the same color (3 != 1).\nHouses at positions 2 and 3 (equidistant from the ends) are not painted the same color (2 != 3).\n\nThe minimum cost to paint the houses so that they look beautiful is 2 + 8 + 1 + 2 + 3 + 2 = 18.\n\n \nConstraints:\n\n2 <= n <= 10^5\nn is even.\ncost.length == n\ncost[i].length == 3\n0 <= cost[i][j] <= 10^5",
  "llm_response": "import sys\n\ndef minCost(n, cost):\n    for i in range(1, n):\n        cost[i][0] += min(cost[i-1][1], cost[i-1][2])\n        cost[i][1] += min(cost[i-1][0], cost[i-1][2])\n        cost[i][2] += min(cost[i-1][0], cost[i-1][1])\n    for i in range(n-2, -1, -1):\n        if i != n // 2:\n            cost[i][0] = min(cost[i][0], cost[i][1] + cost[i+1][0] - cost[i+1][2])\n            cost[i][1] = min(cost[i][1], cost[i][0] + cost[i+1][1] - cost[i+1][2])\n            cost[i][2] = min(cost[i][2], cost[i][0] + cost[i+1][2] - cost[i+1][1], cost[i][2], cost[i][1] + cost[i+1][2] - cost[i+1][0])\n    return min(cost[0][0], cost[0][1], cost[0][2])",
  "model": "llama-3.3-70b"
}