{
  "task_id": "3754",
  "task_description": "You are given a string s consisting of the characters 'N', 'S', 'E', and 'W', where s[i] indicates movements in an infinite grid:\n\n'N' : Move north by 1 unit.\n'S' : Move south by 1 unit.\n'E' : Move east by 1 unit.\n'W' : Move west by 1 unit.\n\nInitially, you are at the origin (0, 0). You can change at most k characters to any of the four directions.\nFind the maximum Manhattan distance from the origin that can be achieved at any time while performing the movements in order.\nThe Manhattan Distance between two cells (x_i, y_i) and (x_j, y_j) is |x_i - x_j| + |y_i - y_j|.\n \nExample 1:\n\nInput: s = \"NWSE\", k = 1\nOutput: 3\nExplanation:\nChange s[2] from 'S' to 'N'. The string s becomes \"NWNE\".\n\n\n\nMovement\nPosition (x, y)\nManhattan Distance\nMaximum\n\n\n\n\ns[0] == 'N'\n(0, 1)\n0 + 1 = 1\n1\n\n\ns[1] == 'W'\n(-1, 1)\n1 + 1 = 2\n2\n\n\ns[2] == 'N'\n(-1, 2)\n1 + 2 = 3\n3\n\n\ns[3] == 'E'\n(0, 2)\n0 + 2 = 2\n3\n\n\n\nThe maximum Manhattan distance from the origin that can be achieved is 3. Hence, 3 is the output.\n\nExample 2:\n\nInput: s = \"NSWWEW\", k = 3\nOutput: 6\nExplanation:\nChange s[1] from 'S' to 'N', and s[4] from 'E' to 'W'. The string s becomes \"NNWWWW\".\nThe maximum Manhattan distance from the origin that can be achieved is 6. Hence, 6 is the output.\n\n \nConstraints:\n\n1 <= s.length <= 10^5\n0 <= k <= s.length\ns consists of only 'N', 'S', 'E', and 'W'.",
  "llm_response": "from collections import defaultdict\n\ndef maxDistance(s, k):\n    directions = {'N': (0, 1), 'S': (0, -1), 'E': (1, 0), 'W': (-1, 0)}\n    max_dist = 0\n    for mask in range(1 << len(s)):\n        x, y = 0, 0\n        changes = 0\n        for i in range(len(s)):\n            if (mask >> i) & 1:\n                if s[i] == 'N':\n                    s_i = 'S'\n                elif s[i] == 'S':\n                    s_i = 'N'\n                elif s[i] == 'E':\n                    s_i = 'W'\n                else:\n                    s_i = 'E'\n                changes += 1\n            else:\n                s_i = s[i]\n            dx, dy = directions[s_i]\n            x += dx\n            y += dy\n            max_dist = max(max_dist, abs(x) + abs(y))\n        if changes > k:\n            max_dist = max_dist - 1\n    return max_dist",
  "model": "llama-3.3-70b"
}