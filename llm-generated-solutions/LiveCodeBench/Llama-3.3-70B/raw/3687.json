{
  "task_id": "3687",
  "task_description": "You are given an undirected tree rooted at node 0 with n nodes numbered from 0 to n - 1, represented by a 2D array edges of length n - 1, where edges[i] = [u_i, v_i, length_i] indicates an edge between nodes u_i and v_i with length length_i. You are also given an integer array nums, where nums[i] represents the value at node i.\nA special path is defined as a downward path from an ancestor node to a descendant node such that all the values of the nodes in that path are unique.\nNote that a path may start and end at the same node.\nReturn an array result of size 2, where result[0] is the length of the longest special path, and result[1] is the minimum number of nodes in all possible longest special paths.\n \nExample 1:\n\nInput: edges = [[0,1,2],[1,2,3],[1,3,5],[1,4,4],[2,5,6]], nums = [2,1,2,1,3,1]\nOutput: [6,2]\nExplanation:\nIn the image below, nodes are colored by their corresponding values in nums\n\nThe longest special paths are 2 -> 5 and 0 -> 1 -> 4, both having a length of 6. The minimum number of nodes across all longest special paths is 2.\n\nExample 2:\n\nInput: edges = [[1,0,8]], nums = [2,2]\nOutput: [0,1]\nExplanation:\n\nThe longest special paths are 0 and 1, both having a length of 0. The minimum number of nodes across all longest special paths is 1.\n\n \nConstraints:\n\n2 <= n <= 5 * 10^4\nedges.length == n - 1\nedges[i].length == 3\n0 <= u_i, v_i < n\n1 <= length_i <= 10^3\nnums.length == n\n0 <= nums[i] <= 5 * 10^4\nThe input is generated such that edges represents a valid tree.",
  "llm_response": "from collections import defaultdict\n\ndef longestSpecialPath(edges, nums):\n    graph = defaultdict(list)\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    max_len = 0\n    min_nodes = float('inf')\n\n    def dfs(node, parent, path, path_len):\n        nonlocal max_len, min_nodes\n        if len(path)!= len(set(path)):\n            return\n        if path_len > max_len:\n            max_len = path_len\n            min_nodes = len(path)\n        elif path_len == max_len:\n            min_nodes = min(min_nodes, len(path))\n        for child, weight in graph[node]:\n            if child!= parent:\n                dfs(child, node, path + [nums[child]], path_len + weight)\n\n    for i in range(len(nums)):\n        dfs(i, -1, [nums[i]], 0)\n\n    return [max_len, min_nodes]",
  "model": "llama-3.3-70b"
}