{
  "task_id": "3739",
  "task_description": "You are given three integers m, n, and k.\nThere is a rectangular grid of size m Ã— n containing k identical pieces. Return the sum of Manhattan distances between every pair of pieces over all valid arrangements of pieces.\nA valid arrangement is a placement of all k pieces on the grid with at most one piece per cell.\nSince the answer may be very large, return it modulo 10^9 + 7.\nThe Manhattan Distance between two cells (x_i, y_i) and (x_j, y_j) is |x_i - x_j| + |y_i - y_j|.\n \nExample 1:\n\nInput: m = 2, n = 2, k = 2\nOutput: 8\nExplanation:\nThe valid arrangements of pieces on the board are:\n\n\nIn the first 4 arrangements, the Manhattan distance between the two pieces is 1.\nIn the last 2 arrangements, the Manhattan distance between the two pieces is 2.\n\nThus, the total Manhattan distance across all valid arrangements is 1 + 1 + 1 + 1 + 2 + 2 = 8.\n\nExample 2:\n\nInput: m = 1, n = 4, k = 3\nOutput: 20\nExplanation:\nThe valid arrangements of pieces on the board are:\n\n\nThe first and last arrangements have a total Manhattan distance of 1 + 1 + 2 = 4.\nThe middle two arrangements have a total Manhattan distance of 1 + 2 + 3 = 6.\n\nThe total Manhattan distance between all pairs of pieces across all arrangements is 4 + 6 + 6 + 4 = 20.\n\n \nConstraints:\n\n1 <= m, n <= 10^5\n2 <= m * n <= 10^5\n2 <= k <= m * n",
  "llm_response": "def distanceSum(m, n, k):\n    MOD = 10**9 + 7\n    \n    def mod_inverse(a, mod):\n        return pow(a, mod - 2, mod)\n    \n    def comb(n, r):\n        if r > n or r < 0:\n            return 0\n        if r == 0 or r == n:\n            return 1\n        \n        num = 1\n        den = 1\n        for i in range(r):\n            num = (num * (n - i)) % MOD\n            den = (den * (i + 1)) % MOD\n        \n        return (num * mod_inverse(den, MOD)) % MOD\n    \n    total_arrangements = comb(m * n, k)\n    \n    result = 0\n    \n    for i1 in range(m):\n        for j1 in range(n):\n            for i2 in range(m):\n                for j2 in range(n):\n                    if i1 == i2 and j1 == j2:\n                        continue\n                    \n                    manhattan_dist = abs(i1 - i2) + abs(j1 - j2)\n                    arrangements_with_pair = comb(m * n - 2, k - 2)\n                    \n                    result = (result + manhattan_dist * arrangements_with_pair) % MOD\n    \n    result = (result * mod_inverse(2, MOD)) % MOD\n    \n    return result",
  "model": "claude-sonnet-4"
}