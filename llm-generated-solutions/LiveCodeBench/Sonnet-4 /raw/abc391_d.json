{
  "task_id": "abc391_d",
  "task_description": "There is a grid with 10^9 rows and W columns. The cell at the x-th column from the left and the y-th row from the bottom is denoted by (x,y).\nThere are N blocks. Each block is a 1 \\times 1 square, and block i-th (1 \\leq i \\leq N) is located at cell (X_i,Y_i) at time 0.\nAt times t=1,2,\\dots,10^{100}, the blocks are moved according to the following rules:\n\n- If the entire bottom row is filled with blocks, then all blocks in the bottom row are removed.\n- For each remaining block, in order from bottom to top, perform the following:\n- If the block is in the bottom row, or if there is a block in the cell immediately below it, do nothing.\n- Otherwise, move the block one cell downward.\n\n\n\nYou are given Q queries. For the j-th query (1 \\leq j \\leq Q), answer whether block A_j exists at time T_j+0.5.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN W\nX_1 Y_1\nX_2 Y_2\n\\vdots\nX_N Y_N\nQ\nT_1 A_1\nT_2 A_2\n\\vdots\nT_Q A_Q\n\nOutput\n\nPrint Q lines. The i-th line should contain Yes if block A_i exists at time T_i+0.5, and No otherwise.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq W \\leq N\n- 1 \\leq X_i \\leq W\n- 1 \\leq Y_i \\leq 10^9\n- (X_i,Y_i) \\neq (X_j,Y_j) if i \\neq j.\n- 1 \\leq Q \\leq 2 \\times 10^5\n- 1 \\leq T_j \\leq 10^9\n- 1 \\leq A_j \\leq N\n- All input values are integers.\n\nSample Input 1\n\n5 3\n1 1\n1 2\n2 2\n3 2\n2 3\n6\n1 1\n1 2\n2 3\n2 5\n3 4\n3 5\n\nSample Output 1\n\nYes\nYes\nNo\nYes\nNo\nYes\n\nThe positions of the blocks change as follows: (\"時刻\" means \"time.\")\n\n\n- Query 1: At time 1.5, block 1 exists, so the answer is Yes.\n- Query 2: At time 1.5, block 2 exists, so the answer is Yes.\n- Query 3: Block 3 disappears at time 2, so it does not exist at time 2.5, and the answer is No.\n\nSample Input 2\n\n3 2\n1 1\n2 1\n1 2\n4\n1 1\n1 2\n1 3\n2 3\n\nSample Output 2\n\nNo\nNo\nYes\nYes",
  "llm_response": "def candidate_func(input_str):\n    lines = input_str.strip().split('\\n')\n    idx = 0\n    \n    n, w = map(int, lines[idx].split())\n    idx += 1\n    \n    blocks = {}\n    for i in range(n):\n        x, y = map(int, lines[idx].split())\n        blocks[i + 1] = (x, y)\n        idx += 1\n    \n    q = int(lines[idx])\n    idx += 1\n    \n    results = []\n    \n    for _ in range(q):\n        t, a = map(int, lines[idx].split())\n        idx += 1\n        \n        if a not in blocks:\n            results.append(\"No\")\n            continue\n            \n        x, y = blocks[a]\n        \n        grid = {}\n        for block_id, (bx, by) in blocks.items():\n            if (bx, by) not in grid:\n                grid[(bx, by)] = []\n            grid[(bx, by)].append(block_id)\n        \n        removed_blocks = set()\n        \n        for time in range(1, t + 1):\n            current_grid = {}\n            for pos, block_list in grid.items():\n                for block_id in block_list:\n                    if block_id not in removed_blocks:\n                        if pos not in current_grid:\n                            current_grid[pos] = []\n                        current_grid[pos].append(block_id)\n            \n            min_y = min(pos[1] for pos in current_grid.keys()) if current_grid else 1\n            \n            bottom_row_positions = set()\n            for pos in current_grid.keys():\n                if pos[1] == min_y:\n                    bottom_row_positions.add(pos[0])\n            \n            if len(bottom_row_positions) == w:\n                for pos in list(current_grid.keys()):\n                    if pos[1] == min_y:\n                        for block_id in current_grid[pos]:\n                            removed_blocks.add(block_id)\n                        del current_grid[pos]\n            \n            new_grid = {}\n            positions_by_y = {}\n            for pos, block_list in current_grid.items():\n                y_val = pos[1]\n                if y_val not in positions_by_y:\n                    positions_by_y[y_val] = []\n                positions_by_y[y_val].extend([(pos, block_id) for block_id in block_list])\n            \n            occupied = set(current_grid.keys())\n            \n            for y_val in sorted(positions_by_y.keys()):\n                for pos, block_id in positions_by_y[y_val]:\n                    x_val, y_val = pos\n                    new_pos = pos\n                    \n                    if y_val > 1 and (x_val, y_val - 1) not in occupied:\n                        new_pos = (x_val, y_val - 1)\n                        occupied.discard(pos)\n                        occupied.add(new_pos)\n                    \n                    if new_pos not in new_grid:\n                        new_grid[new_pos] = []\n                    new_grid[new_pos].append(block_id)\n            \n            grid = new_grid\n        \n        if a in removed_blocks:\n            results.append(\"No\")\n        else:\n            results.append(\"Yes\")\n    \n    return '\\n'.join(results)",
  "model": "claude-sonnet-4"
}