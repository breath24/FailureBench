{
  "task_id": "abc391_d",
  "task_description": "There is a grid with 10^9 rows and W columns. The cell at the x-th column from the left and the y-th row from the bottom is denoted by (x,y).\nThere are N blocks. Each block is a 1 \\times 1 square, and block i-th (1 \\leq i \\leq N) is located at cell (X_i,Y_i) at time 0.\nAt times t=1,2,\\dots,10^{100}, the blocks are moved according to the following rules:\n\n- If the entire bottom row is filled with blocks, then all blocks in the bottom row are removed.\n- For each remaining block, in order from bottom to top, perform the following:\n- If the block is in the bottom row, or if there is a block in the cell immediately below it, do nothing.\n- Otherwise, move the block one cell downward.\n\n\n\nYou are given Q queries. For the j-th query (1 \\leq j \\leq Q), answer whether block A_j exists at time T_j+0.5.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN W\nX_1 Y_1\nX_2 Y_2\n\\vdots\nX_N Y_N\nQ\nT_1 A_1\nT_2 A_2\n\\vdots\nT_Q A_Q\n\nOutput\n\nPrint Q lines. The i-th line should contain Yes if block A_i exists at time T_i+0.5, and No otherwise.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq W \\leq N\n- 1 \\leq X_i \\leq W\n- 1 \\leq Y_i \\leq 10^9\n- (X_i,Y_i) \\neq (X_j,Y_j) if i \\neq j.\n- 1 \\leq Q \\leq 2 \\times 10^5\n- 1 \\leq T_j \\leq 10^9\n- 1 \\leq A_j \\leq N\n- All input values are integers.\n\nSample Input 1\n\n5 3\n1 1\n1 2\n2 2\n3 2\n2 3\n6\n1 1\n1 2\n2 3\n2 5\n3 4\n3 5\n\nSample Output 1\n\nYes\nYes\nNo\nYes\nNo\nYes\n\nThe positions of the blocks change as follows: (\"時刻\" means \"time.\")\n\n\n- Query 1: At time 1.5, block 1 exists, so the answer is Yes.\n- Query 2: At time 1.5, block 2 exists, so the answer is Yes.\n- Query 3: Block 3 disappears at time 2, so it does not exist at time 2.5, and the answer is No.\n\nSample Input 2\n\n3 2\n1 1\n2 1\n1 2\n4\n1 1\n1 2\n1 3\n2 3\n\nSample Output 2\n\nNo\nNo\nYes\nYes",
  "llm_response": "import sys\nimport bisect\n\ndef candidate_func(input_str):\n    lines = input_str.split('\\n')\n    ptr = 0\n    N, W = map(int, lines[ptr].split())\n    ptr += 1\n    blocks = []\n    x_to_ys = {}\n    for _ in range(N):\n        x, y = map(int, lines[ptr].split())\n        blocks.append((x, y))\n        if x not in x_to_ys:\n            x_to_ys[x] = []\n        x_to_ys[x].append(y)\n        ptr += 1\n    for x in x_to_ys:\n        x_to_ys[x].sort()\n    Q = int(lines[ptr])\n    ptr += 1\n    queries = []\n    for _ in range(Q):\n        t, a = map(int, lines[ptr].split())\n        queries.append((t, a))\n        ptr += 1\n    res = []\n    x_to_ys_copy = {x: ys.copy() for x, ys in x_to_ys.items()}\n    x_to_min_t = {}\n    for x in x_to_ys_copy:\n        ys = x_to_ys_copy[x]\n        ys.sort()\n        min_t = None\n        for i in range(len(ys)):\n            y = ys[i]\n            t_candidate = y - (i + 1)\n            if min_t is None or t_candidate < min_t:\n                min_t = t_candidate\n        if min_t is not None:\n            x_to_min_t[x] = min_t\n    for t, a in queries:\n        x, y = blocks[a-1]\n        ys = x_to_ys[x]\n        pos = bisect.bisect_left(ys, y)\n        if pos == -1:\n            res.append(\"No\")\n            continue\n        t_min = y - (pos + 1)\n        if t_min < 0:\n            res.append(\"No\")\n            continue\n        if t <= t_min:\n            res.append(\"Yes\")\n        else:\n            res.append(\"No\")\n    return '\\n'.join(res)",
  "model": "deepseek-chat-v3-0324"
}