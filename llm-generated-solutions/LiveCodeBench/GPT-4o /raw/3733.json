{
  "task_id": "3733",
  "task_description": "You are given a 2D integer matrix grid of size n x m, where each element is either 0, 1, or 2.\nA V-shaped diagonal segment is defined as:\n\nThe segment starts with 1.\nThe subsequent elements follow this infinite sequence: 2, 0, 2, 0, ....\nThe segment:\n\t\nStarts along a diagonal direction (top-left to bottom-right, bottom-right to top-left, top-right to bottom-left, or bottom-left to top-right).\nContinues the sequence in the same diagonal direction.\nMakes at most one clockwise 90-degree turn to another diagonal direction while maintaining the sequence.\n\n\n\n\nReturn the length of the longest V-shaped diagonal segment. If no valid segment exists, return 0.\n \nExample 1:\n\nInput: grid = [[2,2,1,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]\nOutput: 5\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,2) → (1,3) → (2,4), takes a 90-degree clockwise turn at (2,4), and continues as (3,3) → (4,2).\n\nExample 2:\n\nInput: grid = [[2,2,2,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]\nOutput: 4\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 4 and follows these coordinates: (2,3) → (3,2), takes a 90-degree clockwise turn at (3,2), and continues as (2,1) → (1,0).\n\nExample 3:\n\nInput: grid = [[1,2,2,2,2],[2,2,2,2,0],[2,0,0,0,0],[0,0,2,2,2],[2,0,0,2,0]]\nOutput: 5\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,0) → (1,1) → (2,2) → (3,3) → (4,4).\n\nExample 4:\n\nInput: grid = [[1]]\nOutput: 1\nExplanation:\nThe longest V-shaped diagonal segment has a length of 1 and follows these coordinates: (0,0).\n\n \nConstraints:\n\nn == grid.length\nm == grid[i].length\n1 <= n, m <= 500\ngrid[i][j] is either 0, 1 or 2.",
  "llm_response": "def lenOfVDiagonal(grid):\n    from collections import deque\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def bfs(start_x, start_y, direction):\n        queue = deque([(start_x, start_y, 1, direction)])\n        visited = set()\n        visited.add((start_x, start_y, direction))\n        max_length = 1\n\n        while queue:\n            x, y, length, dir_idx = queue.popleft()\n            next_val = (grid[x][y] + 1) % 3\n\n            for i, (dx, dy) in enumerate(directions):\n                if i == dir_idx or (i + 2) % 4 == dir_idx:\n                    nx, ny = x + dx, y + dy\n                    if is_valid(nx, ny) and grid[nx][ny] == next_val and (nx, ny, i) not in visited:\n                        visited.add((nx, ny, i))\n                        queue.append((nx, ny, length + 1, i))\n                        max_length = max(max_length, length + 1)\n\n        return max_length\n\n    n, m = len(grid), len(grid[0])\n    directions = [(-1, -1), (1, 1), (-1, 1), (1, -1)]\n    max_v_length = 0\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                for d in range(4):\n                    max_v_length = max(max_v_length, bfs(i, j, d))\n\n    return max_v_length",
  "model": "gpt-4o"
}