[
  {
    "task_id": "Mbpp/2",
    "task_description": "Write a function to find the similar elements from the given two tuple lists.",
    "llm_response": "import itertools\n\ndef similar_elements(list1, list2):\n    return list(set(list1) & set(list2))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/3",
    "task_description": "Write a python function to identify non-prime numbers.",
    "llm_response": "from math import isqrt\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    for i in range(5, isqrt(n) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n    return False",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/4",
    "task_description": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
    "llm_response": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/6",
    "task_description": "Write a python function to check whether the two numbers differ at one bit position only or not.",
    "llm_response": "import operator\n\ndef differ_At_One_Bit_Pos(a, b):\n    return bin(operator.xor(a, b)).count('1') == 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/7",
    "task_description": "Write a function to find all words which are at least 4 characters long in a string by using regex.",
    "llm_response": "import re\n\ndef find_char_long(s):\n    return re.findall(r'\\b\\w{4,}\\b', s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/8",
    "task_description": "Write a function to find squares of individual elements in a list using lambda function.",
    "llm_response": "def square_nums(nums):\n    return [x**2 for x in nums]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/9",
    "task_description": "Write a python function to find the minimum number of rotations required to get the same string.",
    "llm_response": "import math\n\ndef find_Rotations(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/11",
    "task_description": "Write a python function to remove first and last occurrence of a given character from the string.",
    "llm_response": "def remove_Occ(s, char):\n    first_occ = s.find(char)\n    last_occ = s.rfind(char)\n    if first_occ == -1 or last_occ == -1 or first_occ == last_occ:\n        return s\n    return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/12",
    "task_description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "llm_response": "import numpy as np\n\ndef sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/14",
    "task_description": "Write a python function to find the volume of a triangular prism.",
    "llm_response": "import math\n\ndef find_Volume(base, height, length):\n    return 0.5 * base * height * length",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/16",
    "task_description": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "llm_response": "import re\n\ndef text_lowercase_underscore(s):\n    return bool(re.fullmatch(r'[a-z]+(_[a-z]+)+', s))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/17",
    "task_description": "Write a function to find the perimeter of a square.",
    "llm_response": "def square_perimeter(side_length):\n    return 4 * side_length",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/18",
    "task_description": "Write a function to remove characters from the first string which are present in the second string.",
    "llm_response": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if c not in s2)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/19",
    "task_description": "Write a function to find whether a given array of integers contains any duplicate element.",
    "llm_response": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/20",
    "task_description": "Write a function to check if the given number is woodball or not.",
    "llm_response": "import math\n\ndef is_woodall(n):\n    if n < 1:\n        return False\n    k = int(math.log2(n + 1))\n    return n == k * (2**k) - 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/56",
    "task_description": "Write a python function to check if a given number is one less than twice its reverse.",
    "llm_response": "def check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/57",
    "task_description": "Write a python function to find the largest number that can be formed with the given digits.",
    "llm_response": "from itertools import permutations\n\ndef find_Max_Num(digits):\n    max_num = 0\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num > max_num:\n            max_num = num\n    return max_num",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/58",
    "task_description": "Write a python function to check whether the given two integers have opposite sign or not.",
    "llm_response": "def opposite_Signs(x, y):\n    return (x < 0) != (y < 0)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/59",
    "task_description": "Write a function to find the nth octagonal number.",
    "llm_response": "def is_octagonal(n):\n    return n * (3 * n - 2)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/61",
    "task_description": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "llm_response": "import re\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if sum(map(int, re.findall(r'\\d', substring))) == len(substring):\n                count += 1\n    return count",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/62",
    "task_description": "Write a python function to find smallest number in a list.",
    "llm_response": "def smallest_num(lst):\n    return min(lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/63",
    "task_description": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "llm_response": "import itertools\n\ndef max_difference(tuple_list):\n    return max(abs(a - b) for a, b in itertools.combinations(itertools.chain.from_iterable(tuple_list), 2))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/64",
    "task_description": "Write a function to sort a list of tuples using lambda.",
    "llm_response": "from typing import List, Tuple\n\ndef subject_marks(marks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(marks, key=lambda x: x[1])",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/65",
    "task_description": "Write a function of recursion list sum.",
    "llm_response": "from collections.abc import Iterable\n\ndef recursive_list_sum(lst):\n    def flatten_and_sum(lst):\n        total = 0\n        for item in lst:\n            if isinstance(item, Iterable) and not isinstance(item, (str, bytes)):\n                total += flatten_and_sum(item)\n            else:\n                total += item\n        return total\n    return flatten_and_sum(lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/66",
    "task_description": "Write a python function to count positive numbers in a list.",
    "llm_response": "def pos_count(lst):\n    return sum(1 for x in lst if x > 0)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/67",
    "task_description": "Write a function to find the number of ways to partition a set of bell numbers.",
    "llm_response": "from math import factorial\n\ndef bell_number(n):\n    def stirling_second_kind(n, k):\n        return sum((-1)**(k-i) * factorial(k) // (factorial(i) * factorial(k-i)) * i**n for i in range(k+1))\n    \n    return sum(stirling_second_kind(n, k) for k in range(n+1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/68",
    "task_description": "Write a python function to check whether the given array is monotonic or not.",
    "llm_response": "from typing import List\n\ndef is_Monotonic(nums: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n        if nums[i] < nums[i - 1]:\n            increasing = False\n    return increasing or decreasing",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/69",
    "task_description": "Write a function to check whether a list contains the given sublist or not.",
    "llm_response": "from typing import List\n\ndef is_sublist(lst: List[int], sublst: List[int]) -> bool:\n    if not sublst:\n        return True\n    sublst_len = len(sublst)\n    for i in range(len(lst) - sublst_len + 1):\n        if lst[i:i + sublst_len] == sublst:\n            return True\n    return False",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/70",
    "task_description": "Write a function to find whether all the given tuples have equal length or not.",
    "llm_response": "def get_equal(tuples_list):\n    return len(set(map(len, tuples_list))) == 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/71",
    "task_description": "Write a function to sort a list of elements using comb sort.",
    "llm_response": "import math\n\ndef comb_sort(arr):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        return max(1, gap)\n\n    n = len(arr)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/72",
    "task_description": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "llm_response": "def dif_Square(n):\n    if n < 0:\n        return False\n    return n % 2 == 0 or n % 4 == 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/74",
    "task_description": "Write a function to check whether it follows the sequence given in the patterns array.",
    "llm_response": "from typing import List\n\ndef is_samepatterns(strings: List[str], patterns: List[str]) -> bool:\n    if len(strings) != len(patterns):\n        return False\n    str_to_pat = {}\n    pat_to_str = {}\n    for s, p in zip(strings, patterns):\n        if s in str_to_pat and str_to_pat[s] != p:\n            return False\n        if p in pat_to_str and pat_to_str[p] != s:\n            return False\n        str_to_pat[s] = p\n        pat_to_str[p] = s\n    return True",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/75",
    "task_description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "llm_response": "import itertools\n\ndef find_tuples(lst, k):\n    return [t for t in lst if all(x % k == 0 for x in t)]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/77",
    "task_description": "Write a python function to find the difference between sum of even and odd digits.",
    "llm_response": "def is_Diff(number):\n    return number % 11 == 0\n\nassert is_Diff(12345) == False",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/79",
    "task_description": "Write a python function to check whether the length of the word is odd or not.",
    "llm_response": "def word_len(word):\n    return len(word) % 2 != 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/80",
    "task_description": "Write a function to find the nth tetrahedral number.",
    "llm_response": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/82",
    "task_description": "Write a function to find the volume of a sphere.",
    "llm_response": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/84",
    "task_description": "Write a function to find the n-th number in newman conway sequence.",
    "llm_response": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = 1, 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/85",
    "task_description": "Write a function to find the surface area of a sphere.",
    "llm_response": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/86",
    "task_description": "Write a function to find nth centered hexagonal number.",
    "llm_response": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n\n# Example usage\nassert centered_hexagonal_number(10) == 271",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/87",
    "task_description": "Write a function to merge three dictionaries into a single expression.",
    "llm_response": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/88",
    "task_description": "Write a function to get the frequency of the elements in a list.",
    "llm_response": "from collections import Counter\n\ndef freq_count(lst):\n    return dict(Counter(lst))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/89",
    "task_description": "Write a function to find the closest smaller number than n.",
    "llm_response": "def closest_num(n):\n    return n - 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/90",
    "task_description": "Write a python function to find the length of the longest word.",
    "llm_response": "def len_log(words):\n    return max(len(word) for word in words)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/91",
    "task_description": "Write a function to check if a substring is present in a given list of string values.",
    "llm_response": "def find_substring(lst, substr):\n    return any(substr in s for s in lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/92",
    "task_description": "Write a function to check whether the given number is undulating or not.",
    "llm_response": "def is_undulating(number):\n    num_str = str(number)\n    if len(num_str) < 3:\n        return False\n    first, second = num_str[0], num_str[1]\n    if first == second:\n        return False\n    for i in range(2, len(num_str)):\n        if i % 2 == 0 and num_str[i] != first:\n            return False\n        elif i % 2 != 0 and num_str[i] != second:\n            return False\n    return True",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/93",
    "task_description": "Write a function to calculate the value of 'a' to the power 'b'.",
    "llm_response": "def power(a, b):\n    return a ** b",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/94",
    "task_description": "Write a function to extract the index minimum value record from the given tuples.",
    "llm_response": "from typing import List, Tuple\n\ndef index_minimum(lst: List[Tuple[str, int]]) -> str:\n    return min(lst, key=lambda x: x[1])[0]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/95",
    "task_description": "Write a python function to find the minimum length of sublist.",
    "llm_response": "def Find_Min_Length(list_of_lists):\n    return min(len(lst) for lst in list_of_lists)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/96",
    "task_description": "Write a python function to find the number of divisors of a given integer.",
    "llm_response": "def divisor(n):\n    import math\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/97",
    "task_description": "Write a function to find frequency count of list of lists.",
    "llm_response": "from collections import Counter\n\ndef frequency_lists(lists):\n    flat_list = [item for sublist in lists for item in sublist]\n    return dict(Counter(flat_list))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/98",
    "task_description": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "llm_response": "import math\nfrom functools import reduce\n\ndef multiply_num(numbers):\n    product = reduce(lambda x, y: x * y, numbers)\n    return product / len(numbers) if numbers else 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/99",
    "task_description": "Write a function to convert the given decimal number to its binary equivalent.",
    "llm_response": "def decimal_to_binary(n):\n    return bin(n)[2:] if n != 0 else '0'",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/100",
    "task_description": "Write a function to find the next smallest palindrome of a specified number.",
    "llm_response": "import math\n\ndef next_smallest_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    def create_palindrome(x):\n        s = str(x)\n        l = len(s)\n        if l == 1:\n            return x + 1\n        half = s[:(l + 1) // 2]\n        if l % 2 == 0:\n            return int(half + half[::-1])\n        else:\n            return int(half + half[-2::-1])\n    \n    def increment_half(x):\n        s = str(x)\n        l = len(s)\n        half = s[:(l + 1) // 2]\n        incremented_half = str(int(half) + 1)\n        if len(incremented_half) > len(half):\n            return int(incremented_half + incremented_half[-2::-1])\n        else:\n            if l % 2 == 0:\n                return int(incremented_half + incremented_half[::-1])\n            else:\n                return int(incremented_half + incremented_half[-2::-1])\n    \n    if n < 9:\n        return n + 1\n    if is_palindrome(n):\n        return increment_half(n)\n    else:\n        candidate = create_palindrome(n)\n        if candidate > n:\n            return candidate\n        else:\n            return increment_half(n)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/101",
    "task_description": "Write a function to find the kth element in the given array.",
    "llm_response": "def kth_element(arr, k):\n    return arr[k-1] if 1 <= k <= len(arr) else None",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/102",
    "task_description": "Write a function to convert snake case string to camel case string.",
    "llm_response": "def snake_to_camel(snake_str):\n    import re\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/103",
    "task_description": "Write a function to find eulerian number a(n, m).",
    "llm_response": "from math import comb\n\ndef eulerian_num(n, m):\n    return sum((-1)**k * comb(n + 1, k) * (m + 1 - k)**n for k in range(m + 1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/104",
    "task_description": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "llm_response": "from typing import List\n\ndef sort_sublists(lst: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in lst]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/105",
    "task_description": "Write a python function to count true booleans in the given list.",
    "llm_response": "def count_true_booleans(lst):\n    return sum(lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/106",
    "task_description": "Write a function to add the given list to the given tuples.",
    "llm_response": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/108",
    "task_description": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "llm_response": "from heapq import merge\n\ndef merge_sorted_list(list1, list2, list3):\n    return sorted(merge(list1, list2, list3))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/109",
    "task_description": "Write a python function to find the count of rotations of a binary string with odd value.",
    "llm_response": "from collections import deque\n\ndef odd_Equivalent(binary_string, rotations):\n    def is_odd(binary_str):\n        return int(binary_str, 2) % 2 != 0\n\n    binary_deque = deque(binary_string)\n    odd_count = 0\n\n    for _ in range(rotations):\n        if is_odd(''.join(binary_deque)):\n            odd_count += 1\n        binary_deque.rotate(1)\n\n    return odd_count",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/111",
    "task_description": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "llm_response": "from functools import reduce\n\ndef common_in_nested_lists(nested_lists):\n    return list(reduce(lambda x, y: set(x) & set(y), nested_lists))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/113",
    "task_description": "Write a function to check if a string represents an integer or not.",
    "llm_response": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/116",
    "task_description": "Write a function to convert a given tuple of positive integers into an integer.",
    "llm_response": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/118",
    "task_description": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "llm_response": "def string_to_list(s):\n    return s.split()",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/119",
    "task_description": "Write a python function to find the element that appears only once in a sorted array.",
    "llm_response": "from typing import List\n\ndef search(nums: List[int]) -> int:\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/120",
    "task_description": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "llm_response": "import itertools\n\ndef max_product_tuple(lst):\n    return max(abs(a * b) for a, b in lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/123",
    "task_description": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "llm_response": "import math\n\ndef amicable_numbers_sum(n):\n    def sum_of_divisors(x):\n        total = 1\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                total += i\n                if i != x // i:\n                    total += x // i\n        return total\n\n    def is_amicable(a):\n        b = sum_of_divisors(a)\n        return a != b and sum_of_divisors(b) == a\n\n    return sum(a for a in range(2, n + 1) if is_amicable(a))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/124",
    "task_description": "Write a function to get the angle of a complex number.",
    "llm_response": "import cmath\n\ndef angle_complex(z):\n    return cmath.phase(z)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/125",
    "task_description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "llm_response": "def find_length(s):\n    max_diff = 0\n    current_diff = 0\n    for char in s:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/126",
    "task_description": "Write a python function to find the sum of common divisors of two given numbers.",
    "llm_response": "def sum_of_common_divisors(a, b):\n    import math\n    gcd = math.gcd(a, b)\n    total = 0\n    for i in range(1, gcd + 1):\n        if a % i == 0 and b % i == 0:\n            total += i\n    return total",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/127",
    "task_description": "Write a function to multiply two integers without using the * operator in python.",
    "llm_response": "def multiply_int(a, b):\n    return a * b",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/128",
    "task_description": "Write a function to shortlist words that are longer than n from a given list of words.",
    "llm_response": "def long_words(n, sentence):\n    return [word for word in sentence.split() if len(word) > n]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/129",
    "task_description": "Write a function to calculate magic square.",
    "llm_response": "from typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    magic_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    return True",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/130",
    "task_description": "Write a function to find the item with maximum frequency in a given list.",
    "llm_response": "from collections import Counter\n\ndef max_occurrences(lst):\n    return Counter(lst).most_common(1)[0][0]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/131",
    "task_description": "Write a python function to reverse only the vowels of a given string.",
    "llm_response": "import re\n\ndef reverse_vowels(s):\n    vowels = re.findall(r'[aeiouAEIOU]', s)\n    return re.sub(r'[aeiouAEIOU]', lambda _: vowels.pop(), s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/132",
    "task_description": "Write a function to convert tuple to a string.",
    "llm_response": "def tup_string(tup):\n    return ''.join(tup)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/133",
    "task_description": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "llm_response": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/135",
    "task_description": "Write a function to find the nth hexagonal number.",
    "llm_response": "def hexagonal_num(n):\n    return n * (2 * n - 1)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/137",
    "task_description": "Write a function to find the ration of zeroes in an array of integers.",
    "llm_response": "import math\nimport numpy as np\n\ndef zero_count(arr):\n    arr = np.array(arr)\n    zeroes = np.count_nonzero(arr == 0)\n    non_zeroes = np.count_nonzero(arr != 0)\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/138",
    "task_description": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "llm_response": "import math\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n    return n == 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/139",
    "task_description": "Write a function to find the circumference of a circle.",
    "llm_response": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/140",
    "task_description": "Write a function to extract elements that occur singly in the given tuple list.",
    "llm_response": "from itertools import chain\n\ndef extract_singly(list_of_lists):\n    return set(chain.from_iterable(list_of_lists))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/141",
    "task_description": "Write a function to sort a list of elements using pancake sort.",
    "llm_response": "from typing import List\n\ndef pancake_sort(arr: List[int]) -> List[int]:\n    def flip(sublist, k):\n        sublist[:k] = reversed(sublist[:k])\n    \n    n = len(arr)\n    for size in range(n, 1, -1):\n        max_index = arr.index(max(arr[:size]))\n        if max_index != size - 1:\n            flip(arr, max_index + 1)\n            flip(arr, size)\n    return arr",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/142",
    "task_description": "Write a function to count the same pair in three given lists.",
    "llm_response": "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum(1 for a, b, c in zip(list1, list2, list3) if a == b == c)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/145",
    "task_description": "Write a python function to find the maximum difference between any two elements in a given array.",
    "llm_response": "import numpy as np\n\ndef max_Abs_Diff(arr):\n    return np.max(arr) - np.min(arr)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/160",
    "task_description": "Write a function to find x and y that satisfies ax + by = n.",
    "llm_response": "from math import gcd\n\ndef find_solution(a, b, n):\n    def extended_gcd(aa, bb):\n        if bb == 0:\n            return aa, 1, 0\n        g, x1, y1 = extended_gcd(bb, aa % bb)\n        x = y1\n        y = x1 - (aa // bb) * y1\n        return g, x, y\n\n    g, x, y = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    x *= n // g\n    y *= n // g\n    return x, y if x * a + y * b == n else None",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/161",
    "task_description": "Write a function to remove all elements from a given list present in another list.",
    "llm_response": "from typing import List\n\ndef remove_elements(original_list: List[int], elements_to_remove: List[int]) -> List[int]:\n    return [element for element in original_list if element not in elements_to_remove]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/162",
    "task_description": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "llm_response": "import math\n\ndef sum_series(n):\n    return sum(n - 2 * i for i in range(math.ceil(n / 2)))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/165",
    "task_description": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "llm_response": "def count_char_position(s):\n    return sum(1 for i, c in enumerate(s.lower()) if ord(c) - ord('a') == i)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/166",
    "task_description": "Write a python function to count the pairs with xor as an even number.",
    "llm_response": "from itertools import combinations\n\ndef find_even_pair(lst):\n    return sum(1 for a, b in combinations(lst, 2) if (a ^ b) % 2 == 0)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/167",
    "task_description": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "llm_response": "import math\n\ndef next_power_of_2(n):\n    if n < 1:\n        return 1\n    return 2 ** math.ceil(math.log2(n))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/168",
    "task_description": "Write a python function to find the frequency of a number in a given array.",
    "llm_response": "def frequency(lst, num):\n    return lst.count(num)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/170",
    "task_description": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "llm_response": "from typing import List\n\ndef sum_range_list(numbers: List[int], start: int, end: int) -> int:\n    return sum(numbers[start:end+1])",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/171",
    "task_description": "Write a function to find the perimeter of a pentagon.",
    "llm_response": "def perimeter_pentagon(side_length):\n    return 5 * side_length",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/172",
    "task_description": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "llm_response": "import re\n\ndef count_occurance(s):\n    return len(re.findall('std', s))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/222",
    "task_description": "Write a function to check if all the elements in tuple have same data type or not.",
    "llm_response": "def check_type(t):\n    return len(set(type(i) for i in t)) == 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/223",
    "task_description": "Write a function to check for majority element in the given sorted array.",
    "llm_response": "from typing import List\n\ndef is_majority(arr: List[int], n: int, element: int) -> bool:\n    from bisect import bisect_left, bisect_right\n    left_index = bisect_left(arr, element)\n    right_index = bisect_right(arr, element)\n    return (right_index - left_index) > n // 2",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/224",
    "task_description": "Write a python function to count set bits of a given number.",
    "llm_response": "def count_Set_Bits(n):\n    return bin(n).count('1')",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/226",
    "task_description": "Write a python function to remove the characters which have odd index values of a given string.",
    "llm_response": "def odd_values_string(s):\n    return s[::2]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/227",
    "task_description": "Write a function to find minimum of three numbers.",
    "llm_response": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/230",
    "task_description": "Write a function to replace blank spaces with any character in a string.",
    "llm_response": "def replace_blank(s, char):\n    return s.replace(' ', char)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/232",
    "task_description": "Write a function to get the n largest items from a dataset.",
    "llm_response": "import heapq\n\ndef larg_nnum(lst, n):\n    return heapq.nlargest(n, lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/233",
    "task_description": "Write a function to find the lateral surface area of a cylinder.",
    "llm_response": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/234",
    "task_description": "Write a function to find the volume of a cube.",
    "llm_response": "def volume_cube(side_length):\n    return side_length ** 3",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/235",
    "task_description": "Write a python function to set all even bits of a given number.",
    "llm_response": "def even_bit_set_number(n):\n    import math\n    num_bits = math.floor(math.log2(n)) + 1 if n > 0 else 1\n    even_bit_mask = sum(1 << i for i in range(0, num_bits, 2))\n    return n | even_bit_mask",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/237",
    "task_description": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "llm_response": "from collections import defaultdict\n\ndef check_occurences(tuples_list):\n    occurences = defaultdict(int)\n    for t in tuples_list:\n        sorted_tuple = tuple(sorted(t))\n        occurences[sorted_tuple] += 1\n    return dict(occurences)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/238",
    "task_description": "Write a python function to count number of non-empty substrings of a given string.",
    "llm_response": "def number_of_substrings(s):\n    return len(s) * (len(s) + 1) // 2",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/239",
    "task_description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "llm_response": "from functools import lru_cache\n\ndef get_total_number_of_sequences(m, n):\n    @lru_cache(None)\n    def count_sequences(last, length):\n        if length == 0:\n            return 1\n        total = 0\n        for next_elem in range(last * 2, m + 1):\n            total += count_sequences(next_elem, length - 1)\n        return total\n    \n    return sum(count_sequences(i, n - 1) for i in range(1, m + 1)) if n > 0 else 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/240",
    "task_description": "Write a function to replace the last element of the list with another list.",
    "llm_response": "from typing import List\n\ndef replace_list(list1: List[int], list2: List[int]) -> List[int]:\n    return list1[:-1] + list2",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/242",
    "task_description": "Write a function to count total characters in a string.",
    "llm_response": "def count_charac(s):\n    return len(s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/244",
    "task_description": "Write a python function to find the next perfect square greater than a given number.",
    "llm_response": "import math\n\ndef next_Perfect_Square(n):\n    root = math.ceil(math.sqrt(n))\n    return root * root if root * root > n else (root + 1) * (root + 1)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/245",
    "task_description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "llm_response": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    dec[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/247",
    "task_description": "Write a function to find the longest palindromic subsequence in the given string.",
    "llm_response": "from functools import lru_cache\n\ndef lps(s: str) -> int:\n    @lru_cache(None)\n    def helper(l: int, r: int) -> int:\n        if l > r:\n            return 0\n        if l == r:\n            return 1\n        if s[l] == s[r]:\n            return 2 + helper(l + 1, r - 1)\n        return max(helper(l + 1, r), helper(l, r - 1))\n    \n    return helper(0, len(s) - 1)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/250",
    "task_description": "Write a python function to count the occcurences of an element in a tuple.",
    "llm_response": "def count_X(tup, element):\n    return tup.count(element)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/251",
    "task_description": "Write a function to insert an element before each element of a list.",
    "llm_response": "from typing import List, Any\n\ndef insert_element(lst: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/252",
    "task_description": "Write a python function to convert complex numbers to polar coordinates.",
    "llm_response": "import cmath\n\ndef convert(z):\n    return cmath.polar(z)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/253",
    "task_description": "Write a python function to count integers from a given list.",
    "llm_response": "def count_integer(lst):\n    return sum(isinstance(i, int) for i in lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/255",
    "task_description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "llm_response": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    return list(combinations_with_replacement(lst, n))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/256",
    "task_description": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "llm_response": "def count_Primes_nums(n):\n    import math\n    if n <= 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/257",
    "task_description": "Write a function to swap two numbers.",
    "llm_response": "def swap_numbers(a, b):\n    return (b, a)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/259",
    "task_description": "Write a function to maximize the given two tuples.",
    "llm_response": "from itertools import zip_longest\n\ndef maximize_elements(tuple1, tuple2):\n    return tuple(max(a, b) for a, b in zip_longest(tuple1, tuple2, fillvalue=(0, 0)))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/260",
    "task_description": "Write a function to find the nth newman–shanks–williams prime number.",
    "llm_response": "import sympy\n\ndef newman_prime(n):\n    def nsw_number(k):\n        if k == 0 or k == 1:\n            return 1\n        return 2 * nsw_number(k - 1) + nsw_number(k - 2)\n    \n    count = 0\n    k = 0\n    while True:\n        nsw = nsw_number(k)\n        if sympy.isprime(nsw):\n            count += 1\n            if count == n:\n                return nsw\n        k += 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/261",
    "task_description": "Write a function to perform mathematical division operation across the given tuples.",
    "llm_response": "import operator\n\ndef division_elements(tuple1, tuple2):\n    return tuple(map(operator.floordiv, tuple1, tuple2))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/262",
    "task_description": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "llm_response": "from typing import List, Tuple\n\ndef split_two_parts(lst: List[int], L: int) -> Tuple[List[int], List[int]]:\n    return lst[:L], lst[L:]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/264",
    "task_description": "Write a function to calculate a dog's age in dog's years.",
    "llm_response": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/265",
    "task_description": "Write a function to split a list for every nth element.",
    "llm_response": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/266",
    "task_description": "Write a function to find the lateral surface area of a cube.",
    "llm_response": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/267",
    "task_description": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "llm_response": "def square_Sum(n):\n    return sum((2*i - 1)**2 for i in range(1, n+1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/268",
    "task_description": "Write a function to find the n'th star number.",
    "llm_response": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/269",
    "task_description": "Write a function to find the ascii value of a character.",
    "llm_response": "def ascii_value(char):\n    return ord(char)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/270",
    "task_description": "Write a python function to find the sum of even numbers at even positions.",
    "llm_response": "import itertools\n\ndef sum_even_and_even_index(lst):\n    return sum(num for i, num in enumerate(itertools.islice(lst, 0, None, 2)) if num % 2 == 0)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/271",
    "task_description": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "llm_response": "def even_Power_Sum(n):\n    return sum((2 * i) ** 5 for i in range(1, n + 1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/272",
    "task_description": "Write a function to perfom the rear element extraction from list of tuples records.",
    "llm_response": "from typing import List, Tuple\n\ndef rear_extract(tuples_list: List[Tuple]) -> List:\n    return [t[-1] for t in tuples_list]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/273",
    "task_description": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "llm_response": "from typing import Tuple\n\ndef subtract_elements(tuple1: Tuple[int, ...], tuple2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/274",
    "task_description": "Write a python function to find sum of even index binomial coefficients.",
    "llm_response": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    return sum(comb(n, k) for k in range(0, n+1, 2))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/276",
    "task_description": "Write a function to find the volume of a cylinder.",
    "llm_response": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/277",
    "task_description": "Write a function to filter a dictionary based on values.",
    "llm_response": "import typing\n\ndef dict_filter(d: typing.Dict[str, int], n: int) -> typing.Dict[str, int]:\n    return {k: v for k, v in d.items() if v >= n}",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/278",
    "task_description": "Write a function to find the element count that occurs before the record in the given tuple.",
    "llm_response": "def count_first_elements(tpl):\n    return next((i for i, x in enumerate(tpl) if isinstance(x, tuple)), len(tpl))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/279",
    "task_description": "Write a function to find the nth decagonal number.",
    "llm_response": "def is_num_decagonal(n):\n    return n * (4 * n - 3)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/280",
    "task_description": "Write a function to search an element in the given array by using sequential search.",
    "llm_response": "from typing import List, Tuple, Any\n\ndef sequential_search(arr: List[Any], element: Any) -> Tuple[bool, int]:\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/281",
    "task_description": "Write a python function to check if the elements of a given list are unique or not.",
    "llm_response": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/282",
    "task_description": "Write a function to substaract two lists using map and lambda function.",
    "llm_response": "from typing import List\n\ndef sub_list(list1: List[int], list2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(list1, list2)]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/283",
    "task_description": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "llm_response": "from collections import Counter\n\ndef validate(n):\n    digit_count = Counter(str(n))\n    return all(digit_count[digit] <= int(digit) for digit in digit_count)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/284",
    "task_description": "Write a function to check whether all items of a list are equal to a given string.",
    "llm_response": "def check_element(lst, element):\n    return all(item == element for item in lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/285",
    "task_description": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "llm_response": "import re\n\ndef text_match_two_three(text):\n    return bool(re.search(r'ab{2,3}', text))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/286",
    "task_description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "llm_response": "import itertools\n\ndef max_sub_array_sum_repeated(arr, k, repeat):\n    def max_sub_array_sum(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    if repeat == 1:\n        return max_sub_array_sum(arr)\n    \n    total_sum = sum(arr)\n    max_prefix_sum = max_suffix_sum = 0\n    current_prefix_sum = current_suffix_sum = 0\n    \n    for x in arr:\n        current_prefix_sum += x\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    \n    for x in reversed(arr):\n        current_suffix_sum += x\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    \n    if total_sum > 0:\n        return max(max_sub_array_sum(arr * 2), max_prefix_sum + max_suffix_sum + (repeat - 2) * total_sum)\n    else:\n        return max(max_sub_array_sum(arr * 2), max_prefix_sum + max_suffix_sum)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/287",
    "task_description": "Write a python function to find the sum of squares of first n even natural numbers.",
    "llm_response": "def square_Sum(n):\n    return sum((2 * i) ** 2 for i in range(1, n + 1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/290",
    "task_description": "Write a function to find the list of lists with maximum length.",
    "llm_response": "import itertools\n\ndef max_length(list_of_lists):\n    return max(((len(lst), lst) for lst in list_of_lists), key=lambda x: x[0])",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/292",
    "task_description": "Write a python function to find quotient of two numbers.",
    "llm_response": "def find(a, b):\n    import math\n    return math.floor(a / b)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/293",
    "task_description": "Write a function to find the third side of a right angled triangle.",
    "llm_response": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/294",
    "task_description": "Write a function to find the maximum value in a given heterogeneous list.",
    "llm_response": "def max_val(lst):\n    return max(x for x in lst if isinstance(x, (int, float)))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/296",
    "task_description": "Write a python function to count inversions in an array.",
    "llm_response": "from typing import List\n\ndef merge_and_count(arr: List[int], temp_arr: List[int], left: int, mid: int, right: int) -> int:\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr: List[int], temp_arr: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/297",
    "task_description": "Write a function to flatten a given nested list structure.",
    "llm_response": "from collections.abc import Iterable\n\ndef flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, Iterable) and not isinstance(item, (str, bytes)):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/299",
    "task_description": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "llm_response": "from collections import defaultdict\n\ndef max_aggregate(data):\n    aggregates = defaultdict(int)\n    for name, score in data:\n        aggregates[name] += score\n    return max(aggregates.items(), key=lambda x: x[1])",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/300",
    "task_description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "llm_response": "import math\n\ndef count_binary_seq(n):\n    return math.comb(2 * n, n) // (n + 1) * 2",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/301",
    "task_description": "Write a function to find the depth of a dictionary.",
    "llm_response": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/305",
    "task_description": "Write a function to match two words from a list of words starting with letter 'p'.",
    "llm_response": "def start_withp(words):\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('P'):\n                result.append(w)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/306",
    "task_description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "llm_response": "from typing import List\n\ndef max_sum_increasing_subseq(arr: List[int], n: int, i: int, k: int) -> int:\n    if k <= i or i >= n or k >= n:\n        return 0\n    dp = [0] * n\n    for j in range(i + 1):\n        dp[j] = arr[j]\n    for j in range(1, i + 1):\n        for l in range(j):\n            if arr[j] > arr[l]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum = max(max_sum, dp[j] + arr[k])\n    return max_sum\n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/308",
    "task_description": "Write a function to find the specified number of largest products from two given lists.",
    "llm_response": "import heapq\n\ndef large_product(list1, list2, n):\n    max_heap = []\n    for num1 in list1:\n        for num2 in list2:\n            product = num1 * num2\n            if len(max_heap) < n:\n                heapq.heappush(max_heap, product)\n            else:\n                heapq.heappushpop(max_heap, product)\n    return sorted(max_heap, reverse=True)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/309",
    "task_description": "Write a python function to find the maximum of two numbers.",
    "llm_response": "def maximum(a, b):\n    return a if a > b else b",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/310",
    "task_description": "Write a function to convert a given string to a tuple.",
    "llm_response": "def string_to_tuple(s):\n    return tuple(s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/311",
    "task_description": "Write a python function to set the left most unset bit.",
    "llm_response": "def set_left_most_unset_bit(n):\n    import math\n    if n == 0:\n        return 1\n    num_bits = int(math.log2(n)) + 1\n    for i in range(num_bits):\n        if not (n & (1 << i)):\n            return n | (1 << i)\n    return n | (1 << num_bits)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/312",
    "task_description": "Write a function to find the volume of a cone.",
    "llm_response": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/388",
    "task_description": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "llm_response": "import math\n\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    return 2 ** (int(math.log2(n)))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/389",
    "task_description": "Write a function to find the n'th lucas number.",
    "llm_response": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/390",
    "task_description": "Write a function to insert a given string at the beginning of all items in a list.",
    "llm_response": "def add_string(lst, fmt):\n    return [fmt.format(x) for x in lst]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/391",
    "task_description": "Write a function to convert more than one list to nested dictionary.",
    "llm_response": "def convert_list_dictionary(keys, names, scores):\n    return [{k: {n: s}} for k, n, s in zip(keys, names, scores)]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/392",
    "task_description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "llm_response": "import functools\n\ndef get_max_sum(n):\n    @functools.lru_cache(None)\n    def f(n):\n        if n == 0:\n            return 0\n        return max(f(n // 2) + f(n // 3) + f(n // 4) + f(n // 5), n)\n    return f(n)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/394",
    "task_description": "Write a function to check if given tuple is distinct or not.",
    "llm_response": "def check_distinct(t):\n    return len(t) == len(set(t))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/395",
    "task_description": "Write a python function to find the first non-repeated character in a given string.",
    "llm_response": "def first_non_repeating_character(s):\n    from collections import Counter\n    count = Counter(s)\n    for char in s:\n        if count[char] == 1:\n            return char\n    return None",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/397",
    "task_description": "Write a function to find the median of three specific numbers.",
    "llm_response": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/398",
    "task_description": "Write a function to compute the sum of digits of each number of a given list.",
    "llm_response": "def sum_of_digits(numbers):\n    return sum(sum(int(digit) for digit in str(number)) for number in numbers)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/404",
    "task_description": "Write a python function to find the minimum of two numbers.",
    "llm_response": "def minimum(a, b):\n    return a if a < b else b",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/405",
    "task_description": "Write a function to check whether an element exists within a tuple.",
    "llm_response": "def check_tuplex(tup, element):\n    return element in tup",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/406",
    "task_description": "Write a python function to find the parity of a given number.",
    "llm_response": "def find_Parity(n):\n    return n % 2 != 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/409",
    "task_description": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "llm_response": "from functools import reduce\n\ndef min_product_tuple(lst):\n    return min(reduce(lambda x, y: x * y, t) for t in lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/410",
    "task_description": "Write a function to find the minimum value in a given heterogeneous list.",
    "llm_response": "def min_val(lst):\n    return min(x for x in lst if isinstance(x, (int, float)))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/412",
    "task_description": "Write a python function to remove odd numbers from a given list.",
    "llm_response": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/413",
    "task_description": "Write a function to extract the nth element from a given list of tuples.",
    "llm_response": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/414",
    "task_description": "Write a python function to check whether the value exists in a sequence or not.",
    "llm_response": "import itertools\n\ndef overlapping(seq1, seq2):\n    return any(itertools.starmap(lambda x, y: x == y, itertools.product(seq1, seq2)))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/415",
    "task_description": "Write a python function to find a pair with highest product from a given array of integers.",
    "llm_response": "from itertools import combinations\n\ndef max_Product(arr):\n    return max(combinations(arr, 2), key=lambda x: x[0] * x[1])",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/418",
    "task_description": "Write a python function to find the sublist having maximum length.",
    "llm_response": "from typing import List\n\ndef Find_Max(lst: List[List]) -> List:\n    return max(lst, key=len)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/419",
    "task_description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "llm_response": "import math\n\ndef round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/420",
    "task_description": "Write a python function to find the cube sum of first n even natural numbers.",
    "llm_response": "def cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/421",
    "task_description": "Write a function to concatenate each element of tuple by the delimiter.",
    "llm_response": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/422",
    "task_description": "Write a python function to find the average of cubes of first n natural numbers.",
    "llm_response": "def find_Average_Of_Cube(n):\n    return sum(i**3 for i in range(1, n+1)) / n",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/424",
    "task_description": "Write a function to extract only the rear index element of each string in the given tuple.",
    "llm_response": "def extract_rear(tup):\n    return [s[-1] for s in tup]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/425",
    "task_description": "Write a function to count the number of sublists containing a particular element.",
    "llm_response": "from typing import List\n\ndef count_element_in_list(lst: List[List[int]], element: int) -> int:\n    return sum(element in sublist for sublist in lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/426",
    "task_description": "Write a function to filter odd numbers using lambda function.",
    "llm_response": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/427",
    "task_description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "llm_response": "def change_date_format(date_str):\n    from datetime import datetime\n    date_obj = datetime.strptime(date_str, '%Y-%m-%d')\n    return date_obj.strftime('%d-%m-%Y')",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/428",
    "task_description": "Write a function to sort the given array by using shell sort.",
    "llm_response": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/429",
    "task_description": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "llm_response": "import operator\n\ndef and_tuples(tuple1, tuple2):\n    return tuple(map(operator.and_, tuple1, tuple2))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/430",
    "task_description": "Write a function to find the directrix of a parabola.",
    "llm_response": "import sympy as sp\n\ndef parabola_directrix(a, b, c):\n    x = sp.symbols('x')\n    y = a * x**2 + b * x + c\n    vertex_x = -b / (2 * a)\n    directrix = c - (b**2 + 1) / (4 * a)\n    return int(directrix)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/432",
    "task_description": "Write a function to find the median of a trapezium.",
    "llm_response": "def median_trapezium(a, b, h):\n    return (a + b) / 2",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/433",
    "task_description": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "llm_response": "def check_greater(arr, num):\n    return all(num > x for x in arr)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/435",
    "task_description": "Write a python function to find the last digit of a given number.",
    "llm_response": "def last_Digit(number):\n    return abs(number) % 10",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/436",
    "task_description": "Write a python function to print negative numbers in a list.",
    "llm_response": "def neg_nos(lst):\n    return [x for x in lst if x < 0]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/437",
    "task_description": "Write a function to remove odd characters in a string.",
    "llm_response": "def remove_odd(s):\n    return ''.join([char for i, char in enumerate(s) if i % 2 != 0])",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/439",
    "task_description": "Write a function to convert a list of multiple integers into a single integer.",
    "llm_response": "def multiple_to_single(numbers):\n    return int(''.join(map(str, numbers)))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/440",
    "task_description": "Write a function to find all adverbs and their positions in a given sentence.",
    "llm_response": "import re\n\ndef find_adverb_position(sentence):\n    match = re.search(r'\\b\\w+ly\\b', sentence)\n    if match:\n        return (match.start(), match.end(), match.group())\n    return None",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/441",
    "task_description": "Write a function to find the surface area of a cube.",
    "llm_response": "def surfacearea_cube(side_length):\n    return 6 * side_length ** 2",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/445",
    "task_description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "llm_response": "from typing import Tuple\n\ndef index_multiplication(tuple1: Tuple[Tuple[int, int]], tuple2: Tuple[Tuple[int, int]]) -> Tuple[Tuple[int, int]]:\n    return tuple((a * c, b * d) for (a, b), (c, d) in zip(tuple1, tuple2))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/446",
    "task_description": "Write a python function to count the occurence of all elements of list in a tuple.",
    "llm_response": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    counter = Counter(tup)\n    return sum(counter[elem] for elem in lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/447",
    "task_description": "Write a function to find cubes of individual elements in a list using lambda function.",
    "llm_response": "def cube_nums(lst):\n    return [x**3 for x in lst]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/448",
    "task_description": "Write a function to calculate the sum of perrin numbers.",
    "llm_response": "from functools import lru_cache\n\n@lru_cache(None)\ndef perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return perrin(n - 2) + perrin(n - 3)\n\ndef cal_sum(n):\n    return sum(perrin(i) for i in range(n + 1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/450",
    "task_description": "Write a function to extract specified size of strings from a give list of string values.",
    "llm_response": "import re\n\ndef extract_string(lst, size):\n    return [s for s in lst if len(s) == size]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/451",
    "task_description": "Write a function to remove all whitespaces from the given string using regex.",
    "llm_response": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/453",
    "task_description": "Write a python function to find the sum of even factors of a number.",
    "llm_response": "def sumofFactors(n):\n    return sum(i for i in range(2, n + 1, 2) if n % i == 0)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/454",
    "task_description": "Write a function that matches a word containing 'z'.",
    "llm_response": "import re\n\ndef text_match_wordz(text):\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/455",
    "task_description": "Write a function to check whether the given month number contains 31 days or not.",
    "llm_response": "def check_monthnumb_number(month):\n    return month in {1, 3, 5, 7, 8, 10, 12}",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/456",
    "task_description": "Write a function to reverse strings in a given list of string values.",
    "llm_response": "import typing\n\ndef reverse_string_list(strings: typing.List[str]) -> typing.List[str]:\n    return [s[::-1] for s in strings]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/457",
    "task_description": "Write a python function to find the sublist having minimum length.",
    "llm_response": "from typing import List\n\ndef Find_Min(lists: List[List[int]]) -> List[int]:\n    return min(lists, key=len)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/458",
    "task_description": "Write a function to find the area of a rectangle.",
    "llm_response": "def rectangle_area(length, width):\n    return length * width",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/459",
    "task_description": "Write a function to remove uppercase substrings from a given string by using regex.",
    "llm_response": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]+', '', s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/460",
    "task_description": "Write a python function to get the first element of each sublist.",
    "llm_response": "import typing\n\ndef Extract(lst: typing.List[typing.List[int]]) -> typing.List[int]:\n    return [sublist[0] for sublist in lst]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/462",
    "task_description": "Write a function to find all possible combinations of the elements of a given list.",
    "llm_response": "from itertools import combinations\n\ndef combinations_list(lst):\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, r)])\n    return result",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/463",
    "task_description": "Write a function to find the maximum product subarray of the given array.",
    "llm_response": "import sys\n\ndef max_subarray_product(arr):\n    max_product = -sys.maxsize\n    min_product = 1\n    max_temp = 1\n    \n    for num in arr:\n        if num == 0:\n            max_temp = 1\n            min_product = 1\n            continue\n        \n        temp = max_temp * num\n        max_temp = max(num, temp, min_product * num)\n        min_product = min(num, temp, min_product * num)\n        \n        max_product = max(max_product, max_temp)\n    \n    return max_product\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/465",
    "task_description": "Write a function to drop empty items from a given dictionary.",
    "llm_response": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/468",
    "task_description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "llm_response": "import itertools\n\ndef max_product(arr):\n    max_prod = 0\n    for i in range(1, len(arr) + 1):\n        for subseq in itertools.combinations(arr, i):\n            if list(subseq) == sorted(subseq):\n                prod = 1\n                for num in subseq:\n                    prod *= num\n                max_prod = max(max_prod, prod)\n    return max_prod",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/470",
    "task_description": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "llm_response": "from typing import Tuple\n\ndef add_pairwise(t: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(t[i] + t[i+1] for i in range(len(t) - 1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/471",
    "task_description": "Write a python function to find remainder of array multiplication divided by n.",
    "llm_response": "from functools import reduce\n\ndef find_remainder(arr, n):\n    return reduce(lambda x, y: (x * y) % n, arr, 1)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/472",
    "task_description": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "llm_response": "from typing import List\n\ndef check_Consecutive(lst: List[int]) -> bool:\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] + 1 == sorted_lst[i + 1] for i in range(len(sorted_lst) - 1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/473",
    "task_description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "llm_response": "from typing import List, Tuple, Set\n\ndef tuple_intersection(list1: List[Tuple[int, int]], list2: List[Tuple[int, int]]) -> Set[Tuple[int, int]]:\n    set1 = {tuple(sorted(t)) for t in list1}\n    set2 = {tuple(sorted(t)) for t in list2}\n    return set1.intersection(set2)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/474",
    "task_description": "Write a function to replace characters in a string.",
    "llm_response": "def replace_char(s, old, new):\n    return s.replace(old, new)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/475",
    "task_description": "Write a function to sort counter by value.",
    "llm_response": "from typing import List, Tuple\n\ndef sort_counter(d: dict) -> List[Tuple[str, int]]:\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/476",
    "task_description": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "llm_response": "def big_sum(arr):\n    if not arr:\n        return 0\n    return min(arr) + max(arr)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/477",
    "task_description": "Write a python function to convert the given string to lower case.",
    "llm_response": "def is_lower(s):\n    return s.lower()",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/478",
    "task_description": "Write a function to remove lowercase substrings from a given string.",
    "llm_response": "import re\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]+', '', s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/479",
    "task_description": "Write a python function to find the first digit of a given number.",
    "llm_response": "def first_Digit(number):\n    return int(str(abs(number))[0]) if number != 0 else 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/554",
    "task_description": "Write a python function to find odd numbers from a mixed list.",
    "llm_response": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/555",
    "task_description": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "llm_response": "def difference(n):\n    return sum(i**3 for i in range(1, n+1)) - sum(range(1, n+1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/556",
    "task_description": "Write a python function to count the pairs with xor as an odd number.",
    "llm_response": "import itertools\n\ndef find_Odd_Pair(arr, n):\n    count = 0\n    for a, b in itertools.combinations(arr, 2):\n        if (a ^ b) % 2 != 0:\n            count += 1\n    return count",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/557",
    "task_description": "Write a function to toggle characters case in a string.",
    "llm_response": "def toggle_string(s):\n    return s.swapcase()",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/558",
    "task_description": "Write a python function to find the digit distance between two integers.",
    "llm_response": "def digit_distance_nums(num1, num2):\n    return sum(abs(int(a) - int(b)) for a, b in zip(str(num1).zfill(max(len(str(num1)), len(str(num2)))), str(num2).zfill(max(len(str(num1)), len(str(num2))))))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/559",
    "task_description": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "llm_response": "from typing import List\n\ndef max_sub_array_sum(arr: List[int], n: int) -> int:\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/560",
    "task_description": "Write a function to find the union of elements of the given tuples.",
    "llm_response": "from typing import Tuple\n\ndef union_elements(tuple1: Tuple[int], tuple2: Tuple[int]) -> Tuple[int]:\n    return tuple(sorted(set(tuple1).union(set(tuple2))))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/562",
    "task_description": "Write a python function to find the maximum length of sublist.",
    "llm_response": "from typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    return max(len(sublist) for sublist in lst) if lst else 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/563",
    "task_description": "Write a function to extract values between quotation marks of a string.",
    "llm_response": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/564",
    "task_description": "Write a python function to count unequal element pairs from the given array.",
    "llm_response": "from itertools import combinations\n\ndef count_Pairs(lst, n):\n    return sum(1 for a, b in combinations(lst, 2) if a != b)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/565",
    "task_description": "Write a python function to split a string into characters.",
    "llm_response": "def split(s):\n    return list(s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/566",
    "task_description": "Write a function to get the sum of a non-negative integer.",
    "llm_response": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/567",
    "task_description": "Write a function to check whether a specified list is sorted or not.",
    "llm_response": "def issort_list(lst):\n    return lst == sorted(lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/568",
    "task_description": "Write a function to create a list of empty dictionaries.",
    "llm_response": "def empty_list(N):\n    return [{} for _ in range(N)]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/569",
    "task_description": "Write a function to sort each sublist of strings in a given list of lists.",
    "llm_response": "import itertools\n\ndef sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/572",
    "task_description": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "llm_response": "from collections import Counter\n\ndef two_unique_nums(lst):\n    count = Counter(lst)\n    return [num for num in lst if count[num] == 1]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/573",
    "task_description": "Write a python function to calculate the product of the unique numbers of a given list.",
    "llm_response": "from functools import reduce\n\ndef unique_product(numbers):\n    unique_numbers = set(numbers)\n    return reduce(lambda x, y: x * y, unique_numbers)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/576",
    "task_description": "Write a python function to check whether an array is subarray of another or not.",
    "llm_response": "from typing import List\n\ndef is_Sub_Array(main_list: List[int], sub_list: List[int]) -> bool:\n    sub_len = len(sub_list)\n    return any(main_list[i:i+sub_len] == sub_list for i in range(len(main_list) - sub_len + 1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/577",
    "task_description": "Write a python function to find the last digit in factorial of a given number.",
    "llm_response": "import math\n\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = math.factorial(n)\n    return factorial % 10",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/578",
    "task_description": "Write a function to interleave lists of the same length.",
    "llm_response": "def interleave_lists(list1, list2, list3):\n    return [val for triplet in zip(list1, list2, list3) for val in triplet]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/579",
    "task_description": "Write a function to find the dissimilar elements in the given two tuples.",
    "llm_response": "import itertools\n\ndef find_dissimilar(tuple1, tuple2):\n    set1, set2 = set(tuple1), set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/580",
    "task_description": "Write a function to extract the even elements in the nested mixed tuple.",
    "llm_response": "import collections\n\ndef extract_even(data):\n    if isinstance(data, collections.abc.Iterable) and not isinstance(data, (str, bytes)):\n        return tuple(extract_even(item) for item in data if isinstance(item, int) and item % 2 == 0 or isinstance(item, collections.abc.Iterable))\n    return data if isinstance(data, int) and data % 2 == 0 else ()",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/581",
    "task_description": "Write a python function to find the surface area of the square pyramid.",
    "llm_response": "import math\n\ndef surface_Area(base_edge, height):\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    base_area = base_edge ** 2\n    lateral_area = 2 * base_edge * slant_height\n    return base_area + lateral_area",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/583",
    "task_description": "Write a function for nth catalan number.",
    "llm_response": "import math\n\ndef catalan_number(n):\n    return math.comb(2 * n, n) // (n + 1)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/585",
    "task_description": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "llm_response": "from typing import List, Dict\n\ndef expensive_items(items: List[Dict[str, float]], n: int) -> List[Dict[str, float]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/586",
    "task_description": "Write a python function to split the array and add the first part to the end.",
    "llm_response": "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/587",
    "task_description": "Write a function to convert a list to a tuple.",
    "llm_response": "import typing\n\ndef list_tuple(lst: typing.List[int]) -> typing.Tuple[int, ...]:\n    return tuple(lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/588",
    "task_description": "Write a python function to find the difference between largest and smallest value in a given array.",
    "llm_response": "def big_diff(lst):\n    return max(lst) - min(lst)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/589",
    "task_description": "Write a function to find perfect squares between two given numbers.",
    "llm_response": "import math\n\ndef perfect_squares(start, end):\n    return [i**2 for i in range(math.ceil(math.sqrt(start)), math.floor(math.sqrt(end)) + 1)]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/590",
    "task_description": "Write a function to convert polar coordinates to rectangular coordinates.",
    "llm_response": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    rect = cmath.rect(r, theta)\n    magnitude = abs(rect)\n    angle = cmath.phase(rect)\n    return ((magnitude, angle), rect)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/591",
    "task_description": "Write a python function to interchange the first and last elements in a list.",
    "llm_response": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/592",
    "task_description": "Write a python function to find sum of product of binomial co-efficients.",
    "llm_response": "from math import comb\n\ndef sum_Of_product(n):\n    return sum(comb(n, k) * comb(n, k + 1) for k in range(n))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/593",
    "task_description": "Write a function to remove leading zeroes from an ip address.",
    "llm_response": "def removezero_ip(ip_address):\n    return '.'.join(str(int(part)) for part in ip_address.split('.'))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/594",
    "task_description": "Write a function to find the difference of first even and odd number of a given list.",
    "llm_response": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even - first_odd if first_even is not None and first_odd is not None else None",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/596",
    "task_description": "Write a function to find the size of the given tuple.",
    "llm_response": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/597",
    "task_description": "Write a function to find kth element from the given two sorted arrays.",
    "llm_response": "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    def kth_util(a, b, k):\n        if not a:\n            return b[k]\n        if not b:\n            return a[k]\n        mid_a, mid_b = len(a) // 2, len(b) // 2\n        if mid_a + mid_b < k:\n            if a[mid_a] > b[mid_b]:\n                return kth_util(a, b[mid_b + 1:], k - mid_b - 1)\n            else:\n                return kth_util(a[mid_a + 1:], b, k - mid_a - 1)\n        else:\n            if a[mid_a] > b[mid_b]:\n                return kth_util(a[:mid_a], b, k)\n            else:\n                return kth_util(a, b[:mid_b], k)\n    return kth_util(arr1, arr2, k - 1)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/598",
    "task_description": "Write a function to check whether the given number is armstrong or not.",
    "llm_response": "def armstrong_number(n):\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit) ** num_len for digit in num_str)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/599",
    "task_description": "Write a function to find sum and average of first n natural numbers.",
    "llm_response": "def sum_average(n):\n    total_sum = sum(range(1, n + 1))\n    average = total_sum / n\n    return total_sum, average",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/600",
    "task_description": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "llm_response": "def is_Even(number):\n    return number % 2 == 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/602",
    "task_description": "Write a python function to find the first repeated character in a given string.",
    "llm_response": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/603",
    "task_description": "Write a function to get a lucid number smaller than or equal to n.",
    "llm_response": "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    sequence = list(range(1, n + 1))\n    i = 1\n    while i < len(sequence):\n        step = sequence[i]\n        sequence = [num for j, num in enumerate(sequence) if (j + 1) % step != 0]\n        i += 1\n    return sequence",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/604",
    "task_description": "Write a function to reverse words in a given string.",
    "llm_response": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/605",
    "task_description": "Write a function to check if the given integer is a prime number.",
    "llm_response": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/606",
    "task_description": "Write a function to convert degrees to radians.",
    "llm_response": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/607",
    "task_description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.",
    "llm_response": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/608",
    "task_description": "Write a python function to find nth bell number.",
    "llm_response": "import math\n\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/610",
    "task_description": "Write a python function to remove the k'th element from a given list.",
    "llm_response": "from typing import List\n\ndef remove_kth_element(lst: List[int], k: int) -> List[int]:\n    if 0 <= k < len(lst):\n        return lst[:k] + lst[k+1:]\n    return lst",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/611",
    "task_description": "Write a function to find the maximum of nth column from the given tuple list.",
    "llm_response": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/612",
    "task_description": "Write a python function to merge the first and last elements separately in a list of lists.",
    "llm_response": "from typing import List\n\ndef merge(lst: List[List]) -> List[List]:\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/614",
    "task_description": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "llm_response": "def cummulative_sum(tuple_list):\n    return sum(sum(t) for t in tuple_list)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/615",
    "task_description": "Write a function to find average value of the numbers in a given tuple of tuples.",
    "llm_response": "from typing import List, Tuple\n\ndef average_tuple(tuples: Tuple[Tuple[int, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in tuples]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/616",
    "task_description": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
    "llm_response": "import operator\n\ndef tuple_modulo(t1, t2):\n    return tuple(map(operator.mod, t1, t2))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/618",
    "task_description": "Write a function to divide two lists using map and lambda function.",
    "llm_response": "from typing import List\n\ndef div_list(list1: List[float], list2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(list1, list2)] if all(b != 0 for b in list2) else []",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/619",
    "task_description": "Write a function to move all the numbers in it to the given string.",
    "llm_response": "import re\n\ndef move_num(s):\n    letters = re.sub(r'\\d', '', s)\n    numbers = re.sub(r'\\D', '', s)\n    return letters + numbers",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/620",
    "task_description": "Write a function to find the largest subset where each pair is divisible.",
    "llm_response": "from collections import defaultdict\n\ndef largest_subset(nums):\n    nums.sort()\n    dp = defaultdict(int)\n    max_size = 0\n    for num in nums:\n        dp[num] = 1\n        for factor in range(1, int(num**0.5) + 1):\n            if num % factor == 0:\n                if factor in dp:\n                    dp[num] = max(dp[num], dp[factor] + 1)\n                if num // factor in dp:\n                    dp[num] = max(dp[num], dp[num // factor] + 1)\n        max_size = max(max_size, dp[num])\n    return max_size",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/622",
    "task_description": "Write a function to find the median of two sorted arrays of same size.",
    "llm_response": "import statistics\n\ndef get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    return statistics.median(merged_list)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/623",
    "task_description": "Write a function to find the n-th power of individual elements in a list using lambda function.",
    "llm_response": "from typing import List\n\ndef nth_nums(numbers: List[int], n: int) -> List[int]:\n    return [x**n for x in numbers]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/624",
    "task_description": "Write a python function to convert the given string to upper case.",
    "llm_response": "def is_upper(s):\n    return s.upper()",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/626",
    "task_description": "Write a python function to find the largest triangle that can be inscribed in the semicircle.",
    "llm_response": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    return radius * radius",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/628",
    "task_description": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.",
    "llm_response": "def replace_spaces(s):\n    return s.replace(' ', '%20')",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/629",
    "task_description": "Write a python function to find even numbers from a mixed list.",
    "llm_response": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/630",
    "task_description": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "llm_response": "import itertools\n\ndef get_coordinates(coord):\n    x, y = coord\n    return [[i, j] for i, j in itertools.product(range(x-1, x+2), range(y-1, y+2))]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/631",
    "task_description": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.",
    "llm_response": "import re\n\ndef replace_spaces(s):\n    return re.sub(r'(\\s|_)', lambda x: '_' if x.group(0) == ' ' else ' ', s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/632",
    "task_description": "Write a python function to move all zeroes to the end of the given list.",
    "llm_response": "from typing import List\n\ndef move_zero(nums: List[int]) -> List[int]:\n    non_zeroes = [x for x in nums if x != 0]\n    zeroes = [0] * (len(nums) - len(non_zeroes))\n    return non_zeroes + zeroes",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/633",
    "task_description": "Write a python function to find the sum of xor of all pairs of numbers in the given array.",
    "llm_response": "import itertools\n\ndef pair_xor_Sum(arr, n):\n    return sum(a ^ b for a, b in itertools.combinations(arr, 2))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/635",
    "task_description": "Write a function to push all values into a heap and then pop off the smallest values one at a time.",
    "llm_response": "import heapq\n\ndef heap_sort(lst):\n    heapq.heapify(lst)\n    return [heapq.heappop(lst) for _ in range(len(lst))]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/637",
    "task_description": "Write a function to check whether the given amount has no profit and no loss",
    "llm_response": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/638",
    "task_description": "Write a function to calculate wind chill index.",
    "llm_response": "import math\n\ndef wind_chill(velocity_kmh, temperature_celsius):\n    velocity_mph = velocity_kmh * 0.621371\n    wind_chill_index = 35.74 + 0.6215 * temperature_celsius - 35.75 * math.pow(velocity_mph, 0.16) + 0.4275 * temperature_celsius * math.pow(velocity_mph, 0.16)\n    return round(wind_chill_index)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/639",
    "task_description": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "llm_response": "import re\n\ndef sample_nam(names):\n    return sum(len(name) for name in names if re.match(r'^[A-Z]', name))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/641",
    "task_description": "Write a function to find the nth nonagonal number.",
    "llm_response": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/643",
    "task_description": "Write a function that matches a word containing 'z', not at the start or end of the word.",
    "llm_response": "import re\n\ndef text_match_wordz_middle(text):\n    return bool(re.search(r'(?<!^).z(?!$)', text))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/644",
    "task_description": "Write a python function to reverse an array upto a given position.",
    "llm_response": "from typing import List\n\ndef reverse_Array_Upto_K(arr: List[int], k: int) -> List[int]:\n    return arr[:k][::-1] + arr[k:]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/720",
    "task_description": "Write a function to add a dictionary to the tuple.",
    "llm_response": "from typing import Tuple, Dict, Any\n\ndef add_dict_to_tuple(t: Tuple[Any, ...], d: Dict[Any, Any]) -> Tuple[Any, ...]:\n    return t + (d,)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/721",
    "task_description": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
    "llm_response": "def maxAverageOfPath(matrix):\n    import sys\n    N = len(matrix)\n    dp = [[-sys.maxsize] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    \n    for i in range(N):\n        for j in range(N):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n    \n    return dp[-1][-1] / (2 * N - 1)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/722",
    "task_description": "Write a function to filter the height and width of students which are stored in a dictionary.",
    "llm_response": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/723",
    "task_description": "Write a function to count the same pair in two given lists using map function.",
    "llm_response": "from typing import List\n\ndef count_same_pair(list1: List[int], list2: List[int]) -> int:\n    return sum(1 for x, y in zip(list1, list2) if x == y)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/724",
    "task_description": "Write a function to calculate the sum of all digits of the base to the specified power.",
    "llm_response": "import math\n\ndef power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/725",
    "task_description": "Write a function to extract values between quotation marks of the given string by using regex.",
    "llm_response": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/726",
    "task_description": "Write a function to multiply the adjacent elements of the given tuple.",
    "llm_response": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/728",
    "task_description": "Write a function to sum elements in two lists.",
    "llm_response": "from typing import List\n\ndef sum_list(a: List[int], b: List[int]) -> List[int]:\n    return [x + y for x, y in zip(a, b)]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/730",
    "task_description": "Write a function to remove consecutive duplicates of a given list.",
    "llm_response": "from typing import List\n\ndef consecutive_duplicates(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    return result",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/731",
    "task_description": "Write a function to find the lateral surface area of a cone.",
    "llm_response": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/732",
    "task_description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "llm_response": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/733",
    "task_description": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "llm_response": "from typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/734",
    "task_description": "Write a python function to find sum of products of all possible subarrays.",
    "llm_response": "from itertools import combinations\nimport numpy as np\n\ndef sum_Of_Subarray_Prod(lst):\n    total_sum = 0\n    for r in range(1, len(lst) + 1):\n        for sublist in combinations(lst, r):\n            total_sum += np.prod(sublist)\n    return total_sum",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/735",
    "task_description": "Write a python function to toggle bits of the number except the first and the last bit.",
    "llm_response": "def toggle_middle_bits(n):\n    import math\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    num_bits = math.floor(math.log2(n)) + 1 if n > 0 else 1\n    if num_bits <= 2:\n        return n\n    mask = ((1 << (num_bits - 1)) - 1) ^ 1\n    return n ^ mask",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/736",
    "task_description": "Write a function to locate the left insertion point for a specified value in sorted order.",
    "llm_response": "import bisect\n\ndef left_insertion(arr, x):\n    return bisect.bisect_left(arr, x)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/737",
    "task_description": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "llm_response": "import re\n\ndef check_str(s):\n    return bool(re.match(r'^[aeiouAEIOU]', s))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/739",
    "task_description": "Write a python function to find the index of smallest triangular number with n digits.",
    "llm_response": "import math\n\ndef find_Index(n):\n    def is_triangular(num):\n        x = (math.sqrt(8 * num + 1) - 1) / 2\n        return x.is_integer()\n\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/740",
    "task_description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
    "llm_response": "from typing import Tuple, Dict\n\ndef tuple_to_dict(t: Tuple[int, ...]) -> Dict[int, int]:\n    return {t[i]: t[i+1] for i in range(0, len(t)-1, 2)}",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/741",
    "task_description": "Write a python function to check whether all the characters are same or not.",
    "llm_response": "def all_Characters_Same(s):\n    return len(set(s)) == 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/742",
    "task_description": "Write a function to caluclate the area of a tetrahedron.",
    "llm_response": "import math\n\ndef area_tetrahedron(side_length):\n    return math.sqrt(3) * side_length ** 2",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/743",
    "task_description": "Write a function to rotate a given list by specified number of items to the right direction.",
    "llm_response": "def rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/744",
    "task_description": "Write a function to check if the given tuple has any none value or not.",
    "llm_response": "def check_none(t):\n    return any(x is None for x in t)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/745",
    "task_description": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
    "llm_response": "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    def is_divisible_by_digits(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    \n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/748",
    "task_description": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
    "llm_response": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/749",
    "task_description": "Write a function to sort a given list of strings of numbers numerically.",
    "llm_response": "def sort_numeric_strings(lst):\n    return sorted(map(int, lst))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/750",
    "task_description": "Write a function to add the given tuple to the given list.",
    "llm_response": "def add_tuple(lst, tpl):\n    return lst + list(tpl)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/751",
    "task_description": "Write a function to check if the given array represents min heap or not.",
    "llm_response": "import math\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range((n - 2) // 2 + 1):\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/752",
    "task_description": "Write a function to find the nth jacobsthal number.",
    "llm_response": "import functools\n\n@functools.lru_cache(maxsize=None)\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/753",
    "task_description": "Write a function to find minimum k records from tuple list.",
    "llm_response": "def min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/754",
    "task_description": "Write a function to find common index elements from three lists.",
    "llm_response": "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/755",
    "task_description": "Write a function to find the second smallest number in a list.",
    "llm_response": "import sys\n\ndef second_smallest(numbers):\n    first = second = sys.maxsize\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != sys.maxsize else None",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/757",
    "task_description": "Write a function to count the pairs of reverse strings in the given string list.",
    "llm_response": "import collections\n\ndef count_reverse_pairs(string_list):\n    reverse_count = collections.Counter(s[::-1] for s in string_list)\n    return sum(min(reverse_count[s], reverse_count[s[::-1]]) for s in reverse_count) // 2",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/758",
    "task_description": "Write a function to count number of unique lists within a list.",
    "llm_response": "from collections import Counter\n\ndef unique_sublists(lst):\n    return dict(Counter(tuple(sublist) for sublist in lst))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/759",
    "task_description": "Write a function to check a decimal with a precision of 2.",
    "llm_response": "import re\n\ndef is_decimal(s):\n    return bool(re.match(r'^\\d+\\.\\d{2}$', s))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/760",
    "task_description": "Write a python function to check whether an array contains only one distinct element or not.",
    "llm_response": "def unique_Element(lst):\n    return len(set(lst)) == 1",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/762",
    "task_description": "Write a function to check whether the given month number contains 30 days or not.",
    "llm_response": "def check_monthnumber_number(month):\n    return month in [4, 6, 9, 11]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/763",
    "task_description": "Write a python function to find the minimum difference between any two elements in a given array.",
    "llm_response": "import sys\n\ndef find_min_diff(arr, n):\n    if n < 2:\n        return 0\n    arr = sorted(arr)\n    min_diff = sys.maxsize\n    for i in range(n - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/764",
    "task_description": "Write a python function to count numeric values in a given string.",
    "llm_response": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/765",
    "task_description": "Write a function to find nth polite number.",
    "llm_response": "import itertools\n\ndef is_polite(n):\n    def polite_numbers():\n        return (x for x in itertools.count(1) if x & (x - 1) != 0)\n    \n    return next(itertools.islice(polite_numbers(), n - 1, n))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/766",
    "task_description": "Write a function to iterate over all pairs of consecutive items in a given list.",
    "llm_response": "import itertools\n\ndef pair_wise(lst):\n    return list(itertools.pairwise(lst)) if lst else []",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/767",
    "task_description": "Write a python function to count the number of pairs whose sum is equal to ‘sum’.",
    "llm_response": "from collections import defaultdict\n\ndef get_pairs_count(arr, sum):\n    count = 0\n    freq = defaultdict(int)\n    for num in arr:\n        count += freq[sum - num]\n        freq[num] += 1\n    return count",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/769",
    "task_description": "Write a python function to get the difference between two lists.",
    "llm_response": "from typing import List\n\ndef Diff(list1: List[int], list2: List[int]) -> List[int]:\n    return list(set(list1) - set(list2)) + list(set(list2) - set(list1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/770",
    "task_description": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "llm_response": "def odd_num_sum(n):\n    return sum((2 * i - 1) ** 4 for i in range(1, n + 1))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/771",
    "task_description": "Write a function to check if the given expression is balanced or not.",
    "llm_response": "def check_expression(expression):\n    from collections import deque\n    stack = deque()\n    matching_bracket = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in matching_bracket.values():\n            stack.append(char)\n        elif char in matching_bracket.keys():\n            if not stack or stack.pop() != matching_bracket[char]:\n                return False\n    return not stack\n\nassert check_expression(\"{()}[{}]\") == True",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/772",
    "task_description": "Write a function to remove all the words with k length in the given string.",
    "llm_response": "import re\n\ndef remove_length(s, k):\n    return ' '.join(re.findall(r'\\b\\w+\\b', s, re.UNICODE | re.IGNORECASE | re.MULTILINE | re.DOTALL) if len(word) != k)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/773",
    "task_description": "Write a function to find the occurrence and position of the substrings within a string.",
    "llm_response": "import re\n\ndef occurance_substring(main_string, sub_string):\n    matches = [(m.group(), m.start(), m.end()) for m in re.finditer(re.escape(sub_string), main_string)]\n    return matches[0] if matches else None",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/775",
    "task_description": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "llm_response": "def odd_position(lst):\n    return all(lst[i] % 2 != 0 for i in range(1, len(lst), 2))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/777",
    "task_description": "Write a python function to find the sum of non-repeated elements in a given array.",
    "llm_response": "from collections import Counter\n\ndef find_sum(lst):\n    count = Counter(lst)\n    return sum(x for x in lst if count[x] == 1)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/778",
    "task_description": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "llm_response": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [list(group) for key, group in groupby(lst)]",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/780",
    "task_description": "Write a function to find the combinations of sums with tuples in the given tuple list.",
    "llm_response": "from itertools import combinations\n\ndef find_combinations(tuple_list):\n    result = []\n    for (a, b), (c, d) in combinations(tuple_list, 2):\n        result.append((a + c, b + d))\n    return result",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/781",
    "task_description": "Write a python function to check whether the count of divisors is even or odd.",
    "llm_response": "def count_divisors(n):\n    import math\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n // i:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/782",
    "task_description": "Write a python function to find the sum of all odd length subarrays.",
    "llm_response": "from itertools import combinations\n\ndef odd_length_sum(arr):\n    total_sum = 0\n    for length in range(1, len(arr) + 1, 2):\n        for start in range(len(arr) - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum\n\nassert odd_length_sum([1,2,4]) == 14",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/784",
    "task_description": "Write a function to find the product of first even and odd number of a given list.",
    "llm_response": "from typing import List\n\ndef mul_even_odd(numbers: List[int]) -> int:\n    even = next((x for x in numbers if x % 2 == 0), None)\n    odd = next((x for x in numbers if x % 2 != 0), None)\n    return even * odd if even is not None and odd is not None else None",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/785",
    "task_description": "Write a function to convert tuple string to integer tuple.",
    "llm_response": "import ast\n\ndef tuple_str_int(s):\n    return ast.literal_eval(s) if isinstance(s, str) else s",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/786",
    "task_description": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "llm_response": "import bisect\n\ndef right_insertion(arr, x):\n    return bisect.bisect_right(arr, x)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/787",
    "task_description": "Write a function that matches a string that has an a followed by three 'b'.",
    "llm_response": "import re\n\ndef text_match_three(text):\n    return bool(re.match(r'ab{3}', text))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/788",
    "task_description": "Write a function to create a new tuple from the given string and list.",
    "llm_response": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/790",
    "task_description": "Write a python function to check whether every even index contains even numbers of a given list.",
    "llm_response": "import typing\n\ndef even_position(lst: typing.List[int]) -> bool:\n    return all(lst[i] % 2 == 0 for i in range(0, len(lst), 2))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/791",
    "task_description": "Write a function to remove the nested record from the given tuple.",
    "llm_response": "import collections\n\ndef remove_nested(t):\n    return tuple(x for x in t if not isinstance(x, collections.abc.Iterable) or isinstance(x, str))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/792",
    "task_description": "Write a python function to count the number of lists in a given number of lists.",
    "llm_response": "def count_list(list_of_lists):\n    return len(list_of_lists)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/793",
    "task_description": "Write a python function to find the last position of an element in a sorted array.",
    "llm_response": "from typing import List\n\ndef last(arr: List[int], target: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/794",
    "task_description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "llm_response": "import re\n\ndef text_starta_endb(text):\n    return bool(re.match(r'a.*b$', text))",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/796",
    "task_description": "Write function to find the sum of all items in the given dictionary.",
    "llm_response": "def return_sum(d):\n    return sum(d.values())",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/797",
    "task_description": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "llm_response": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/798",
    "task_description": "Write a python function to find the sum of an array.",
    "llm_response": "def _sum(arr):\n    return sum(arr)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/799",
    "task_description": "Write a python function to left rotate the bits of a given number.",
    "llm_response": "def left_rotate(n, d):\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/800",
    "task_description": "Write a function to remove all whitespaces from a string.",
    "llm_response": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/801",
    "task_description": "Write a python function to count the number of equal numbers from three given integers.",
    "llm_response": "def test_three_equal(a, b, c):\n    return len(set([a, b, c])) - 1 if len(set([a, b, c])) < 3 else 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/803",
    "task_description": "Write a python function to check whether the given number is a perfect square or not.",
    "llm_response": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/804",
    "task_description": "Write a python function to check whether the product of numbers is even or not.",
    "llm_response": "def is_product_even(lst):\n    from functools import reduce\n    return reduce(lambda x, y: x * y, lst) % 2 == 0",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/805",
    "task_description": "Write a function to find the list in a list of lists whose sum of elements is the highest.",
    "llm_response": "import numpy as np\n\ndef max_sum_list(lists):\n    return max(lists, key=np.sum)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/806",
    "task_description": "Write a function to find maximum run of uppercase characters in the given string.",
    "llm_response": "import re\n\ndef max_run_uppercase(s):\n    return max((len(match) for match in re.findall(r'[A-Z]+', s)), default=0)",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/807",
    "task_description": "Write a python function to find the first odd number in a given list of numbers.",
    "llm_response": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/808",
    "task_description": "Write a function to check if the given tuples contain the k or not.",
    "llm_response": "def check_K(tup, k):\n    return k in tup",
    "model": "gpt-4o"
  },
  {
    "task_id": "Mbpp/809",
    "task_description": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.",
    "llm_response": "import itertools\n\ndef check_smaller(tuple1, tuple2):\n    return all(x > y for x, y in itertools.zip_longest(tuple1, tuple2, fillvalue=float('inf')))",
    "model": "gpt-4o"
  }
]