{
  "task_id": "Mbpp/247",
  "task_description": "Write a function to find the longest palindromic subsequence in the given string.",
  "llm_response": "def lps(s):\n    s = s.replace(\" \", \"\").lower()\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1] if i + 1 <= j - 1 else 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]",
  "model": "mistral-3.2-24b"
}