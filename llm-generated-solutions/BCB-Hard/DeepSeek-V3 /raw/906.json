{
  "task_id": "BigCodeBench/906",
  "instruct_prompt": "Archives all processed files from a source directory to a target directory. The function identifies processed files by the '_processed' suffix in the filename.\nThe function should output with:\n    str: The path to the created archive.\nYou should write self-contained code starting with:\n```\nimport zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n```",
  "llm_response": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives all processed files (those with '_processed' suffix in their filenames) from the source directory to a target directory.\n    \n    The function creates a zip archive in the target directory containing all processed files.\n    The source directory remains unchanged after the operation.\n\n    Parameters:\n    - source_dir (str): The directory to search for processed files.\n    - target_dir (str): The directory where the archive will be created.\n    - archive_name (str, optional): The name of the archive file. Defaults to 'archive.zip'.\n\n    Returns:\n    - str: The full path to the created archive.\n\n    Raises:\n    - ValueError: If the source or target directory does not exist.\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if not os.path.isdir(target_dir):\n        raise ValueError(f\"Target directory does not exist: {target_dir}\")\n    \n    processed_files = []\n    for filename in os.listdir(source_dir):\n        if re.search(r'_processed(\\.|$)', filename):\n            file_path = os.path.join(source_dir, filename)\n            if os.path.isfile(file_path):\n                processed_files.append(file_path)\n    \n    archive_path = os.path.join(target_dir, archive_name)\n    \n    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as archive:\n        for file_path in processed_files:\n            archive.write(file_path, os.path.basename(file_path))\n    \n    return archive_path",
  "model": "deepseek-chat-v3-0324"
}