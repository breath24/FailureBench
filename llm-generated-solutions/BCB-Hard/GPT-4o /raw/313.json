{
  "task_id": "BigCodeBench/313",
  "instruct_prompt": "Organize files in a directory based on the first text that is not enclosed in square brackets. Move the files to subdirectories named after this text. If no matching text is found, the file is not moved.\nThe function should output with:\n    tuple:\n    str: The directory path with organized files.\n    dict: A dictionary where keys are the created subdirectories and values are lists of files moved to them.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n```",
  "llm_response": "import re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    # Ensure the directory exists\n    if not os.path.isdir(directory):\n        raise ValueError(f\"The directory {directory} does not exist.\")\n    \n    # Dictionary to store the results\n    organized_files = {}\n\n    # Iterate over all files in the directory\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        \n        # Skip directories\n        if os.path.isdir(file_path):\n            continue\n        \n        # Use regex to find the first text not enclosed in square brackets\n        match = re.search(r'(?<!\\[)(\\b\\w+\\b)(?![^\\[]*\\])', filename)\n        \n        if match:\n            # Extract the matched text\n            folder_name = match.group(1)\n            folder_path = os.path.join(directory, folder_name)\n            \n            # Create the subdirectory if it doesn't exist\n            if not os.path.exists(folder_path):\n                os.makedirs(folder_path)\n            \n            # Move the file to the new subdirectory\n            new_file_path = os.path.join(folder_path, filename)\n            shutil.move(file_path, new_file_path)\n            \n            # Add the file to the organized_files dictionary\n            if folder_name not in organized_files:\n                organized_files[folder_name] = []\n            organized_files[folder_name].append(filename)\n    \n    return (directory, organized_files)",
  "model": "gpt-4o"
}