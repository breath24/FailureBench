{
  "task_id": "BigCodeBench/857",
  "instruct_prompt": "Transfer files from one directory (SOURCE_DIR) to another (DEST_DIR) based on the specified file extensions (EXTENSIONS). It also issues warnings for files that could not be transferred due to any issues.\nThe function should output with:\n    transferred_files (list): A list containing the names of files that were successfully transferred.\nYou should write self-contained code starting with:\n```\nimport warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n```",
  "llm_response": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from one directory to another based on specified file extensions.\n    \n    Args:\n        SOURCE_DIR (str): Source directory path\n        DEST_DIR (str): Destination directory path\n        EXTENSIONS (list): List of file extensions to transfer (e.g., ['.txt', '.pdf'])\n    \n    Returns:\n        transferred_files (list): A list containing the names of files that were successfully transferred.\n    \"\"\"\n    transferred_files = []\n    \n    # Check if source directory exists\n    if not os.path.exists(SOURCE_DIR):\n        warnings.warn(f\"Source directory '{SOURCE_DIR}' does not exist.\")\n        return transferred_files\n    \n    # Check if source is actually a directory\n    if not os.path.isdir(SOURCE_DIR):\n        warnings.warn(f\"Source path '{SOURCE_DIR}' is not a directory.\")\n        return transferred_files\n    \n    # Create destination directory if it doesn't exist\n    if not os.path.exists(DEST_DIR):\n        try:\n            os.makedirs(DEST_DIR)\n        except Exception as e:\n            warnings.warn(f\"Could not create destination directory '{DEST_DIR}': {str(e)}\")\n            return transferred_files\n    \n    # Process each extension\n    for extension in EXTENSIONS:\n        # Ensure extension starts with a dot\n        if not extension.startswith('.'):\n            extension = '.' + extension\n            \n        # Create pattern for glob\n        pattern = os.path.join(SOURCE_DIR, '*' + extension)\n        \n        # Find all files with this extension\n        files = glob.glob(pattern)\n        \n        # Also check for uppercase extensions\n        upper_pattern = os.path.join(SOURCE_DIR, '*' + extension.upper())\n        files.extend(glob.glob(upper_pattern))\n        \n        for file_path in files:\n            try:\n                # Get filename\n                filename = os.path.basename(file_path)\n                \n                # Create destination path\n                dest_path = os.path.join(DEST_DIR, filename)\n                \n                # Check if file already exists in destination\n                if os.path.exists(dest_path):\n                    # Add timestamp to filename to make it unique\n                    name, ext = os.path.splitext(filename)\n                    timestamp = str(int(time.time() * 1000))  # milliseconds timestamp\n                    new_filename = f\"{name}_{timestamp}{ext}\"\n                    dest_path = os.path.join(DEST_DIR, new_filename)\n                    warnings.warn(f\"File '{filename}' already exists in destination. Saving as '{new_filename}'.\")\n                \n                # Transfer the file\n                shutil.copy2(file_path, dest_path)\n                transferred_files.append(filename)\n                \n            except PermissionError:\n                warnings.warn(f\"Permission denied when transferring '{file_path}'.\")\n            except FileNotFoundError:\n                warnings.warn(f\"File '{file_path}' not found during transfer.\")\n            except shutil.SameFileError:\n                warnings.warn(f\"Source and destination are the same for '{file_path}'.\")\n            except Exception as e:\n                warnings.warn(f\"Could not transfer '{file_path}': {str(e)}\")\n    \n    return transferred_files",
  "model": "qwen3-coder"
}