{
  "task_id": "BigCodeBench/590",
  "instruct_prompt": "Extracts the text and href attributes of all anchor tags from a given URL's HTML content, and returns this data in a pandas DataFrame along with the time of data extraction.\nNote that: The function requires internet connectivity to fetch HTML content.\nThe function should raise the exception for: ValueError: If the provided URL is invalid or empty. URLError: If there is an issue with network connectivity or the server.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'. Each row\n    corresponds to an anchor tag in the HTML, with 'text' and 'href' containing\n    the text and the hyperlink reference of the anchor tag, respectively.\n    'fetch_time' contains the timestamp of when the data was fetched in the format\n    'YYYY-MM-DD HH:MM:SS'.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n```",
  "llm_response": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\nfrom urllib.error import URLError\nimport re\ndef task_func(url):\n    \"\"\"\n    Extracts the text and href attributes of all anchor tags from a given URL's HTML content,\n    and returns this data in a pandas DataFrame along with the time of data extraction.\n    \n    Args:\n        url (str): The URL to fetch HTML content from\n        \n    Returns:\n        pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'\n        \n    Raises:\n        ValueError: If the provided URL is invalid or empty\n        URLError: If there is an issue with network connectivity or the server\n    \"\"\"\n    # Validate URL\n    if not url or not isinstance(url, str):\n        raise ValueError(\"URL cannot be empty or None\")\n    \n    # Check if URL has a valid format\n    url_pattern = re.compile(\n        r'^https?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+[A-Z]{2,6}\\.?|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    \n    if not url_pattern.match(url):\n        raise ValueError(\"Invalid URL format\")\n    \n    try:\n        # Fetch HTML content\n        response = urllib.request.urlopen(url)\n        html_content = response.read().decode('utf-8')\n    except URLError:\n        raise URLError(\"Failed to connect to the server or network issue\")\n    except Exception as e:\n        raise URLError(f\"Failed to fetch URL: {str(e)}\")\n    \n    # Parse HTML content using PyQuery\n    doc = pq(html_content)\n    \n    # Find all anchor tags\n    anchor_tags = doc('a')\n    \n    # Get current timestamp\n    fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    \n    # Extract text and href attributes\n    data = []\n    for anchor in anchor_tags:\n        anchor_pq = pq(anchor)\n        text = anchor_pq.text().strip()\n        href = anchor_pq.attr('href')\n        \n        # Only include anchor tags that have href attribute\n        if href:\n            data.append({\n                'text': text,\n                'href': href,\n                'fetch_time': fetch_time\n            })\n    \n    # Create DataFrame\n    df = pd.DataFrame(data, columns=['text', 'href', 'fetch_time'])\n    \n    return df",
  "model": "qwen3-coder"
}