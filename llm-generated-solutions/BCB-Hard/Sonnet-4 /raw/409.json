{
  "task_id": "BigCodeBench/409",
  "instruct_prompt": "Calculate the mean, median, and standard deviation of the data from a specific column in an Excel file.\nThe function should raise the exception for: FileNotFoundError: If the Excel file does not exist at the specified path. ValueError: If the specified column is not found in the Excel file.\nThe function should output with:\n    dict: A dictionary with the mean, median, and standard deviation.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n```",
  "llm_response": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n    \"\"\"\n    Calculate the mean, median, and standard deviation of the data from a specific column in an Excel file.\n    \n    Args:\n        excel_file_path (str): The directory path where the Excel file is located\n        file_name (str): The name of the Excel file\n        column_name (str): The name of the column to analyze\n    \n    Returns:\n        dict: A dictionary with the mean, median, and standard deviation\n    \n    Raises:\n        FileNotFoundError: If the Excel file does not exist at the specified path\n        ValueError: If the specified column is not found in the Excel file\n    \"\"\"\n    # Construct the full file path\n    full_path = os.path.join(excel_file_path, file_name)\n    \n    # Check if the file exists\n    if not os.path.exists(full_path):\n        raise FileNotFoundError(f\"Excel file not found at path: {full_path}\")\n    \n    try:\n        # Read the Excel file\n        df = pd.read_excel(full_path)\n    except Exception as e:\n        raise FileNotFoundError(f\"Could not read Excel file: {e}\")\n    \n    # Check if the column exists\n    if column_name not in df.columns:\n        raise ValueError(f\"Column '{column_name}' not found in the Excel file. Available columns: {list(df.columns)}\")\n    \n    # Extract the column data and remove any NaN values\n    column_data = df[column_name].dropna()\n    \n    # Check if there's any data left after removing NaN values\n    if len(column_data) == 0:\n        raise ValueError(f\"Column '{column_name}' contains no valid numeric data\")\n    \n    # Calculate statistics\n    try:\n        mean_value = float(np.mean(column_data))\n        median_value = float(np.median(column_data))\n        std_value = float(np.std(column_data, ddof=1))  # Using sample standard deviation\n    except Exception as e:\n        raise ValueError(f\"Could not calculate statistics for column '{column_name}'. Data may not be numeric: {e}\")\n    \n    # Return results as a dictionary\n    return {\n        'mean': mean_value,\n        'median': median_value,\n        'standard_deviation': std_value\n    }",
  "model": "claude-sonnet-4"
}