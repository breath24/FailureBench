{
  "task_id": "BigCodeBench/313",
  "instruct_prompt": "Organize files in a directory based on the first text that is not enclosed in square brackets. Move the files to subdirectories named after this text. If no matching text is found, the file is not moved.\nThe function should output with:\n    tuple:\n    str: The directory path with organized files.\n    dict: A dictionary where keys are the created subdirectories and values are lists of files moved to them.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n```",
  "llm_response": "import re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    \"\"\"\n    Organizes files in a directory based on the first text not enclosed in square brackets.\n    Files are moved to subdirectories named after this text. If no matching text is found,\n    the file is not moved.\n\n    Args:\n        directory (str): Path to the directory to organize.\n\n    Returns:\n        tuple: (directory_path, {subdirectory: [files]})\n    \"\"\"\n    # Validate directory\n    if not os.path.isdir(directory):\n        raise ValueError(f\"Directory does not exist: {directory}\")\n\n    # Initialize result dictionary\n    result = {}\n\n    # Process each file in the directory\n    for filename in os.listdir(directory):\n        filepath = os.path.join(directory, filename)\n\n        # Skip directories\n        if os.path.isdir(filepath):\n            continue\n\n        # Find the first text not in square brackets\n        match = re.search(r'\\[[^\\]]*\\]?([^\\[\\]]+)', filename)\n        if match:\n            category = match.group(1).strip()\n            if category:  # Only proceed if we found valid text\n                # Create subdirectory if it doesn't exist\n                subdir = os.path.join(directory, category)\n                if not os.path.exists(subdir):\n                    os.makedirs(subdir)\n\n                # Move the file\n                dest_path = os.path.join(subdir, filename)\n                shutil.move(filepath, dest_path)\n\n                # Update result dictionary\n                if category not in result:\n                    result[category] = []\n                result[category].append(filename)\n\n    return (directory, result)",
  "model": "mistral-3.2-24b"
}