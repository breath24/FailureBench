{
  "task_id": "BigCodeBench/574",
  "instruct_prompt": "Create a noisy sine wave of a specified length and adjusts a curve using curve_fit from scipy.optimize to the data.\nThe function should output with:\n    Axes object: A plot showing the noisy sine wave and its adjusted curve.\nYou should write self-contained code starting with:\n```\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n```",
  "llm_response": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    \"\"\"\n    Generate a noisy sine wave and fit a curve to it using scipy.optimize.curve_fit.\n\n    Parameters:\n    - array_length: int, length of the generated data (default: 100)\n    - noise_level: float, standard deviation of the Gaussian noise (default: 0.2)\n\n    Returns:\n    - Axes object: A plot showing the noisy sine wave and its fitted curve.\n    \"\"\"\n    # Generate x values\n    x = np.linspace(0, 2 * np.pi, array_length)\n\n    # Generate clean sine wave\n    y_clean = np.sin(x)\n\n    # Add Gaussian noise\n    y_noisy = y_clean + noise_level * np.random.randn(array_length)\n\n    # Define the model function (sine wave with amplitude, frequency, and phase)\n    def model_func(x, amplitude, frequency, phase, offset):\n        return amplitude * np.sin(frequency * x + phase) + offset\n\n    # Initial guess for the parameters\n    initial_guess = [1, 1, 0, 0]\n\n    # Fit the model to the noisy data\n    popt, pcov = curve_fit(model_func, x, y_noisy, p0=initial_guess)\n\n    # Generate the fitted curve\n    y_fit = model_func(x, *popt)\n\n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(x, y_noisy, 'b-', label='Noisy data')\n    ax.plot(x, y_fit, 'r-', label='Fitted curve')\n    ax.plot(x, y_clean, 'g--', label='Clean sine wave')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Noisy Sine Wave with Fitted Curve')\n    ax.legend()\n    ax.grid(True)\n\n    return ax",
  "model": "mistral-3.2-24b"
}