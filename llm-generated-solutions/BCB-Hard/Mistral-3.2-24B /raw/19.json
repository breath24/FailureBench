{
  "task_id": "BigCodeBench/19",
  "instruct_prompt": "Zips all files (not including subdirectories) located in the specified directory and returns the path to the created zip file.\nNote that: Notes: The zip name is always 'files.zip'\nThe function should raise the exception for: FileNotFoundError: if the specified directory does not exist\nThe function should output with:\n    str: The path to the generated zip file. Returns None if the directory does not contain any files.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport zipfile\ndef task_func(directory):\n```",
  "llm_response": "import os\nimport glob\nimport zipfile\ndef task_func(directory):\n    \"\"\"\n    Zips all files (not including subdirectories) located in the specified directory\n    and returns the path to the created zip file.\n\n    Args:\n        directory (str): Path to the directory containing files to be zipped.\n\n    Returns:\n        str: Path to the generated zip file. Returns None if the directory does not contain any files.\n\n    Raises:\n        FileNotFoundError: If the specified directory does not exist.\n    \"\"\"\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The specified directory does not exist: {directory}\")\n\n    # Get all files in the directory (excluding subdirectories)\n    files = glob.glob(os.path.join(directory, '*'))\n    files = [f for f in files if os.path.isfile(f)]\n\n    # Return None if no files found\n    if not files:\n        return None\n\n    # Create zip file path\n    zip_path = os.path.join(directory, 'files.zip')\n\n    # Create zip file\n    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for file in files:\n            # Get relative path to maintain directory structure\n            rel_path = os.path.relpath(file, directory)\n            zipf.write(file, rel_path)\n\n    return zip_path",
  "model": "mistral-3.2-24b"
}