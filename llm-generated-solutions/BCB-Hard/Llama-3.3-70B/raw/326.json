{
  "task_id": "BigCodeBench/326",
  "instruct_prompt": "Find and run all .bat files in a given directory, returning their file names and exit codes.\nThe function should output with:\n    list of tuples: A list where each tuple contains the file name and its exit code.\n    The exit code is None if the file could not be executed.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n```",
  "llm_response": "import subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n    \"\"\"\n    Find and run all .bat files in a given directory, returning their file names and exit codes.\n\n    Args:\n        directory_path (str): The path to the directory containing the .bat files.\n\n    Returns:\n        list: A list of tuples, where each tuple contains the file name and its exit code.\n              The exit code is None if the file could not be executed.\n    \"\"\"\n    # Initialize an empty list to store the results\n    results = []\n\n    # Check if the directory exists\n    if not os.path.exists(directory_path):\n        print(f\"Directory '{directory_path}' does not exist.\")\n        return results\n\n    # Find all .bat files in the directory\n    bat_files = glob.glob(os.path.join(directory_path, \"*.bat\"))\n\n    # Iterate over each .bat file\n    for file in bat_files:\n        try:\n            # Run the .bat file and capture its exit code\n            exit_code = subprocess.call([file])\n            results.append((os.path.basename(file), exit_code))\n        except Exception as e:\n            # If an error occurs, append the file name with an exit code of None\n            print(f\"Error running {file}: {str(e)}\")\n            results.append((os.path.basename(file), None))\n\n    return results",
  "model": "llama-3.3-70b"
}